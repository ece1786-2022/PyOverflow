[
    {
        "Topic": "string Common string operations",
        "content": [],
        "class": [],
        "functions": [],
        "code_demo": [],
        "Subtopics": [
            {
                "Topic": "String constants",
                "content": [
                    "The constants defined in this module are:"
                ],
                "class": [],
                "functions": [
                    {
                        "name": "string.ascii_letters",
                        "content": [
                            "The concatenation of the ascii_lowercase and ascii_uppercase\nconstants described below.  This value is not locale-dependent."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.ascii_lowercase",
                        "content": [
                            "The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.  This value is not\nlocale-dependent and will not change."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.ascii_uppercase",
                        "content": [
                            "The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.  This value is not\nlocale-dependent and will not change."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.digits",
                        "content": [
                            "The string '0123456789'."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.hexdigits",
                        "content": [
                            "The string '0123456789abcdefABCDEF'."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.octdigits",
                        "content": [
                            "The string '01234567'."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.punctuation",
                        "content": [
                            "String of ASCII characters which are considered punctuation characters\nin the C locale: !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.printable",
                        "content": [
                            "String of ASCII characters which are considered printable.  This is a\ncombination of digits, ascii_letters, punctuation,\nand whitespace."
                        ],
                        "code_demo": []
                    },
                    {
                        "name": "string.whitespace",
                        "content": [
                            "A string containing all ASCII characters that are considered whitespace.\nThis includes the characters space, tab, linefeed, return, formfeed, and\nvertical tab."
                        ],
                        "code_demo": []
                    }
                ],
                "code_demo": [],
                "Subtopics": []
            },
            {
                "Topic": "Custom String Formatting",
                "content": [
                    "The built-in string class provides the ability to do complex variable\nsubstitutions and value formatting via the format() method described in\nPEP 3101.  The Formatter class in the string module allows\nyou to create and customize your own string formatting behaviors using the same\nimplementation as the built-in format() method."
                ],
                "class": [
                    {
                        "name": "class string.Formatter",
                        "content": [
                            "The Formatter class has the following public methods:",
                            "In addition, the Formatter defines a number of methods that are\nintended to be replaced by subclasses:"
                        ],
                        "code_demo": [],
                        "methods": [
                            {
                                "name": "format(format_string, /, *args, **kwargs)",
                                "content": [
                                    "The primary API method.  It takes a format string and\nan arbitrary set of positional and keyword arguments.\nIt is just a wrapper that calls vformat()."
                                ],
                                "code_demo": [
                                    "\nChanged in version 3.7: A format string argument is now positional-only.\n"
                                ]
                            },
                            {
                                "name": "vformat(format_string, args, kwargs)",
                                "content": [
                                    "This function does the actual work of formatting.  It is exposed as a\nseparate function for cases where you want to pass in a predefined\ndictionary of arguments, rather than unpacking and repacking the\ndictionary as individual arguments using the *args and **kwargs\nsyntax.  vformat() does the work of breaking up the format string\ninto character data and replacement fields.  It calls the various\nmethods described below."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "parse(format_string)",
                                "content": [
                                    "Loop over the format_string and return an iterable of tuples\n(literal_text, field_name, format_spec, conversion).  This is used\nby vformat() to break the string into either literal text, or\nreplacement fields.",
                                    "The values in the tuple conceptually represent a span of literal text\nfollowed by a single replacement field.  If there is no literal text\n(which can happen if two replacement fields occur consecutively), then\nliteral_text will be a zero-length string.  If there is no replacement\nfield, then the values of field_name, format_spec and conversion\nwill be None."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "get_field(field_name, args, kwargs)",
                                "content": [
                                    "Given field_name as returned by parse() (see above), convert it to\nan object to be formatted.  Returns a tuple (obj, used_key).  The default\nversion takes strings of the form defined in PEP 3101, such as\n0[name] or label.title.  args and kwargs are as passed in to\nvformat().  The return value used_key has the same meaning as the\nkey parameter to get_value()."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "get_value(key, args, kwargs)",
                                "content": [
                                    "Retrieve a given field value.  The key argument will be either an\ninteger or a string.  If it is an integer, it represents the index of the\npositional argument in args; if it is a string, then it represents a\nnamed argument in kwargs.",
                                    "The args parameter is set to the list of positional arguments to\nvformat(), and the kwargs parameter is set to the dictionary of\nkeyword arguments.",
                                    "For compound field names, these functions are only called for the first\ncomponent of the field name; subsequent components are handled through\nnormal attribute and indexing operations.",
                                    "So for example, the field expression 0.name would cause\nget_value() to be called with a key argument of 0.  The name\nattribute will be looked up after get_value() returns by calling the\nbuilt-in getattr() function.",
                                    "If the index or keyword refers to an item that does not exist, then an\nIndexError or KeyError should be raised."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "check_unused_args(used_args, args, kwargs)",
                                "content": [
                                    "Implement checking for unused arguments if desired.  The arguments to this\nfunction is the set of all argument keys that were actually referred to in\nthe format string (integers for positional arguments, and strings for\nnamed arguments), and a reference to the args and kwargs that was\npassed to vformat.  The set of unused args can be calculated from these\nparameters.  check_unused_args() is assumed to raise an exception if\nthe check fails."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "format_field(value, format_spec)",
                                "content": [
                                    "format_field() simply calls the global format() built-in.  The\nmethod is provided so that subclasses can override it."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "convert_field(value, conversion)",
                                "content": [
                                    "Converts the value (returned by get_field()) given a conversion type\n(as in the tuple returned by the parse() method).  The default\nversion understands s (str), r (repr) and a (ascii) conversion\ntypes."
                                ],
                                "code_demo": []
                            }
                        ]
                    }
                ],
                "functions": [],
                "code_demo": [],
                "Subtopics": []
            },
            {
                "Topic": "Format String Syntax",
                "content": [
                    "The str.format() method and the Formatter class share the same\nsyntax for format strings (although in the case of Formatter,\nsubclasses can define their own format string syntax).  The syntax is\nrelated to that of formatted string literals, but it is\nless sophisticated and, in particular, does not support arbitrary expressions.",
                    "Format strings contain replacement fields surrounded by curly braces {}.\nAnything that is not contained in braces is considered literal text, which is\ncopied unchanged to the output.  If you need to include a brace character in the\nliteral text, it can be escaped by doubling: {{ and }}.",
                    "The grammar for a replacement field is as follows:",
                    "In less formal terms, the replacement field can start with a field_name that specifies\nthe object whose value is to be formatted and inserted\ninto the output instead of the replacement field.\nThe field_name is optionally followed by a  conversion field, which is\npreceded by an exclamation point '!', and a format_spec, which is preceded\nby a colon ':'.  These specify a non-default format for the replacement value.",
                    "See also the Format Specification Mini-Language section.",
                    "The field_name itself begins with an arg_name that is either a number or a\nkeyword.  If its a number, it refers to a positional argument, and if its a keyword,\nit refers to a named keyword argument.  If the numerical arg_names in a format string\nare 0, 1, 2, in sequence, they can all be omitted (not just some)\nand the numbers 0, 1, 2,  will be automatically inserted in that order.\nBecause arg_name is not quote-delimited, it is not possible to specify arbitrary\ndictionary keys (e.g., the strings '10' or ':-]') within a format string.\nThe arg_name can be followed by any number of index or\nattribute expressions. An expression of the form '.name' selects the named\nattribute using getattr(), while an expression of the form '[index]'\ndoes an index lookup using __getitem__().",
                    "Some simple format string examples:",
                    "The conversion field causes a type coercion before formatting.  Normally, the\njob of formatting a value is done by the __format__() method of the value\nitself.  However, in some cases it is desirable to force a type to be formatted\nas a string, overriding its own definition of formatting.  By converting the\nvalue to a string before calling __format__(), the normal formatting logic\nis bypassed.",
                    "Three conversion flags are currently supported: '!s' which calls str()\non the value, '!r' which calls repr() and '!a' which calls\nascii().",
                    "Some examples:",
                    "The format_spec field contains a specification of how the value should be\npresented, including such details as field width, alignment, padding, decimal\nprecision and so on.  Each value type can define its own formatting\nmini-language or interpretation of the format_spec.",
                    "Most built-in types support a common formatting mini-language, which is\ndescribed in the next section.",
                    "A format_spec field can also include nested replacement fields within it.\nThese nested replacement fields may contain a field name, conversion flag\nand format specification, but deeper nesting is\nnot allowed.  The replacement fields within the\nformat_spec are substituted before the format_spec string is interpreted.\nThis allows the formatting of a value to be dynamically specified.",
                    "See the Format examples section for some examples."
                ],
                "class": [],
                "functions": [],
                "code_demo": [
                    "\nChanged in version 3.1: The positional argument specifiers can be omitted for str.format(),\nso '{} {}'.format(a, b) is equivalent to '{0} {1}'.format(a, b).\n",
                    "\nChanged in version 3.4: The positional argument specifiers can be omitted for Formatter.\n",
                    "\"First, thou shalt count to {0}\"  # References first positional argument\n\"Bring me a {}\"                   # Implicitly references the first positional argument\n\"From {} to {}\"                   # Same as \"From {0} to {1}\"\n\"My quest is {name}\"              # References keyword argument 'name'\n\"Weight in tons {0.weight}\"       # 'weight' attribute of first positional arg\n\"Units destroyed: {players[0]}\"   # First element of keyword argument 'players'.\n\n",
                    "\"Harold's a clever {0!s}\"        # Calls str() on the argument first\n\"Bring out the holy {name!r}\"    # Calls repr() on the argument first\n\"More {!a}\"                      # Calls ascii() on the argument first\n\n"
                ],
                "Subtopics": [
                    {
                        "Topic": "Format Specification Mini-Language",
                        "content": [
                            "Format specifications are used within replacement fields contained within a\nformat string to define how individual values are presented (see\nFormat String Syntax and Formatted string literals).\nThey can also be passed directly to the built-in\nformat() function.  Each formattable type may define how the format\nspecification is to be interpreted.",
                            "Most built-in types implement the following options for format specifications,\nalthough some of the formatting options are only supported by the numeric types.",
                            "A general convention is that an empty format specification produces\nthe same result as if you had called str() on the value. A\nnon-empty format specification typically modifies the result.",
                            "The general form of a standard format specifier is:",
                            "If a valid align value is specified, it can be preceded by a fill\ncharacter that can be any character and defaults to a space if omitted.\nIt is not possible to use a literal curly brace ({ or }) as\nthe fill character in a formatted string literal or when using the str.format()\nmethod.  However, it is possible to insert a curly brace\nwith a nested replacement field.  This limitation doesnt\naffect the format() function.",
                            "The meaning of the various alignment options is as follows:",
                            "Note that unless a minimum field width is defined, the field width will always\nbe the same size as the data to fill it, so that the alignment option has no\nmeaning in this case.",
                            "The sign option is only valid for number types, and can be one of the\nfollowing:",
                            "The 'z' option coerces negative zero floating-point values to positive\nzero after rounding to the format precision.  This option is only valid for\nfloating-point presentation types.",
                            "The '#' option causes the alternate form to be used for the\nconversion.  The alternate form is defined differently for different\ntypes.  This option is only valid for integer, float and complex\ntypes. For integers, when binary, octal, or hexadecimal output\nis used, this option adds the respective prefix '0b', '0o',\n'0x', or '0X' to the output value. For float and complex the\nalternate form causes the result of the conversion to always contain a\ndecimal-point character, even if no digits follow it. Normally, a\ndecimal-point character appears in the result of these conversions\nonly if a digit follows it. In addition, for 'g' and 'G'\nconversions, trailing zeros are not removed from the result.",
                            "The ',' option signals the use of a comma for a thousands separator.\nFor a locale aware separator, use the 'n' integer presentation type\ninstead.",
                            "The '_' option signals the use of an underscore for a thousands\nseparator for floating point presentation types and for integer\npresentation type 'd'.  For integer presentation types 'b',\n'o', 'x', and 'X', underscores will be inserted every 4\ndigits.  For other presentation types, specifying this option is an\nerror.",
                            "width is a decimal integer defining the minimum total field width,\nincluding any prefixes, separators, and other formatting characters.\nIf not specified, then the field width will be determined by the content.",
                            "When no explicit alignment is given, preceding the width field by a zero\n('0') character enables\nsign-aware zero-padding for numeric types.  This is equivalent to a fill\ncharacter of '0' with an alignment type of '='.",
                            "The precision is a decimal integer indicating how many digits should be\ndisplayed after the decimal point for presentation types\n'f' and 'F', or before and after the decimal point for presentation\ntypes 'g' or 'G'.  For string presentation types the field\nindicates the maximum field size - in other words, how many characters will be\nused from the field content.  The precision is not allowed for integer\npresentation types.",
                            "Finally, the type determines how the data should be presented.",
                            "The available string presentation types are:",
                            "The available integer presentation types are:",
                            "In addition to the above presentation types, integers can be formatted\nwith the floating point presentation types listed below (except\n'n' and None). When doing so, float() is used to convert the\ninteger to a floating point number before formatting.",
                            "The available presentation types for float and\nDecimal values are:"
                        ],
                        "class": [],
                        "functions": [],
                        "code_demo": [
                            "\nChanged in version 3.11: Added the 'z' option (see also PEP 682).\n",
                            "\nChanged in version 3.1: Added the ',' option (see also PEP 378).\n",
                            "\nChanged in version 3.6: Added the '_' option (see also PEP 515).\n",
                            "\nChanged in version 3.10: Preceding the width field by '0' no longer affects the default\nalignment for strings.\n"
                        ],
                        "Subtopics": []
                    },
                    {
                        "Topic": "Format examples",
                        "content": [
                            "This section contains examples of the str.format() syntax and\ncomparison with the old %-formatting.",
                            "In most of the cases the syntax is similar to the old %-formatting, with the\naddition of the {} and with : used instead of %.\nFor example, '%03.2f' can be translated to '{:03.2f}'.",
                            "The new format syntax also supports new and different options, shown in the\nfollowing examples.",
                            "Accessing arguments by position:",
                            "Accessing arguments by name:",
                            "Accessing arguments attributes:",
                            "Accessing arguments items:",
                            "Replacing %s and %r:",
                            "Aligning the text and specifying a width:",
                            "Replacing %+f, %-f, and % f and specifying a sign:",
                            "Replacing %x and %o and converting the value to different bases:",
                            "Using the comma as a thousands separator:",
                            "Expressing a percentage:",
                            "Using type-specific formatting:",
                            "Nesting arguments and more complex examples:"
                        ],
                        "class": [],
                        "functions": [],
                        "code_demo": [
                            ">>> '{0}, {1}, {2}'.format('a', 'b', 'c')\n'a, b, c'\n>>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n'a, b, c'\n>>> '{2}, {1}, {0}'.format('a', 'b', 'c')\n'c, b, a'\n>>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence\n'c, b, a'\n>>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be repeated\n'abracadabra'\n\n",
                            ">>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')\n'Coordinates: 37.24N, -115.81W'\n>>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}\n>>> 'Coordinates: {latitude}, {longitude}'.format(**coord)\n'Coordinates: 37.24N, -115.81W'\n\n",
                            ">>> c = 3-5j\n>>> ('The complex number {0} is formed from the real part {0.real} '\n...  'and the imaginary part {0.imag}.').format(c)\n'The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.'\n>>> class Point:\n...     def __init__(self, x, y):\n...         self.x, self.y = x, y\n...     def __str__(self):\n...         return 'Point({self.x}, {self.y})'.format(self=self)\n...\n>>> str(Point(4, 2))\n'Point(4, 2)'\n\n",
                            ">>> coord = (3, 5)\n>>> 'X: {0[0]};  Y: {0[1]}'.format(coord)\n'X: 3;  Y: 5'\n\n",
                            ">>> \"repr() shows quotes: {!r}; str() doesn't: {!s}\".format('test1', 'test2')\n\"repr() shows quotes: 'test1'; str() doesn't: test2\"\n\n",
                            ">>> '{:<30}'.format('left aligned')\n'left aligned                  '\n>>> '{:>30}'.format('right aligned')\n'                 right aligned'\n>>> '{:^30}'.format('centered')\n'           centered           '\n>>> '{:*^30}'.format('centered')  # use '*' as a fill char\n'***********centered***********'\n\n",
                            ">>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always\n'+3.140000; -3.140000'\n>>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers\n' 3.140000; -3.140000'\n>>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:f}; {:f}'\n'3.140000; -3.140000'\n\n",
                            ">>> # format also supports binary numbers\n>>> \"int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}\".format(42)\n'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n>>> # with 0x, 0o, or 0b as prefix:\n>>> \"int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}\".format(42)\n'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'\n\n",
                            ">>> '{:,}'.format(1234567890)\n'1,234,567,890'\n\n",
                            ">>> points = 19\n>>> total = 22\n>>> 'Correct answers: {:.2%}'.format(points/total)\n'Correct answers: 86.36%'\n\n",
                            ">>> import datetime\n>>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n>>> '{:%Y-%m-%d %H:%M:%S}'.format(d)\n'2010-07-04 12:15:58'\n\n",
                            ">>> for align, text in zip('<^>', ['left', 'center', 'right']):\n...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)\n...\n'left<<<<<<<<<<<<'\n'^^^^^center^^^^^'\n'>>>>>>>>>>>right'\n>>>\n>>> octets = [192, 168, 0, 1]\n>>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n'C0A80001'\n>>> int(_, 16)\n3232235521\n>>>\n>>> width = 5\n>>> for num in range(5,12): \n...     for base in 'dXob':\n...         print('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')\n...     print()\n...\n    5     5     5   101\n    6     6     6   110\n    7     7     7   111\n    8     8    10  1000\n    9     9    11  1001\n   10     A    12  1010\n   11     B    13  1011\n\n"
                        ],
                        "Subtopics": []
                    }
                ]
            },
            {
                "Topic": "Template strings",
                "content": [
                    "Template strings provide simpler string substitutions as described in\nPEP 292.  A primary use case for template strings is for\ninternationalization (i18n) since in that context, the simpler syntax and\nfunctionality makes it easier to translate than other built-in string\nformatting facilities in Python.  As an example of a library built on template\nstrings for i18n, see the\nflufl.i18n package.",
                    "Template strings support $-based substitutions, using the following rules:",
                    "Any other appearance of $ in the string will result in a ValueError\nbeing raised.",
                    "The string module provides a Template class that implements\nthese rules.  The methods of Template are:",
                    "Here is an example of how to use a Template:",
                    "Advanced usage: you can derive subclasses of Template to customize\nthe placeholder syntax, delimiter character, or the entire regular expression\nused to parse template strings.  To do this, you can override these class\nattributes:",
                    "Alternatively, you can provide the entire regular expression pattern by\noverriding the class attribute pattern.  If you do this, the value must be a\nregular expression object with four named capturing groups.  The capturing\ngroups correspond to the rules given above, along with the invalid placeholder\nrule:",
                    "The methods on this class will raise ValueError if the pattern matches\nthe template without one of these named groups matching."
                ],
                "class": [
                    {
                        "name": "class string.Template(template)",
                        "content": [
                            "The constructor takes a single argument which is the template string.",
                            "Template instances also provide one public data attribute:"
                        ],
                        "code_demo": [],
                        "methods": [
                            {
                                "name": "substitute(mapping={}, /, **kwds)",
                                "content": [
                                    "Performs the template substitution, returning a new string.  mapping is\nany dictionary-like object with keys that match the placeholders in the\ntemplate.  Alternatively, you can provide keyword arguments, where the\nkeywords are the placeholders.  When both mapping and kwds are given\nand there are duplicates, the placeholders from kwds take precedence."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "safe_substitute(mapping={}, /, **kwds)",
                                "content": [
                                    "Like substitute(), except that if placeholders are missing from\nmapping and kwds, instead of raising a KeyError exception, the\noriginal placeholder will appear in the resulting string intact.  Also,\nunlike with substitute(), any other appearances of the $ will\nsimply return $ instead of raising ValueError.",
                                    "While other exceptions may still occur, this method is called safe\nbecause it always tries to return a usable string instead of\nraising an exception.  In another sense, safe_substitute() may be\nanything other than safe, since it will silently ignore malformed\ntemplates containing dangling delimiters, unmatched braces, or\nplaceholders that are not valid Python identifiers."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "is_valid()",
                                "content": [
                                    "Returns false if the template has invalid placeholders that will cause\nsubstitute() to raise ValueError."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "get_identifiers()",
                                "content": [
                                    "Returns a list of the valid identifiers in the template, in the order\nthey first appear, ignoring any invalid identifiers."
                                ],
                                "code_demo": []
                            }
                        ]
                    }
                ],
                "functions": [],
                "code_demo": [
                    ">>> from string import Template\n>>> s = Template('$who likes $what')\n>>> s.substitute(who='tim', what='kung pao')\n'tim likes kung pao'\n>>> d = dict(who='tim')\n>>> Template('Give $who $100').substitute(d)\nTraceback (most recent call last):\n...\nValueError: Invalid placeholder in string: line 1, col 11\n>>> Template('$who likes $what').substitute(d)\nTraceback (most recent call last):\n...\nKeyError: 'what'\n>>> Template('$who likes $what').safe_substitute(d)\n'tim likes $what'\n\n"
                ],
                "Subtopics": []
            },
            {
                "Topic": "Helper functions",
                "content": [],
                "class": [],
                "functions": [
                    {
                        "name": "string.capwords(s, sep=None)",
                        "content": [
                            "Split the argument into words using str.split(), capitalize each word\nusing str.capitalize(), and join the capitalized words using\nstr.join().  If the optional second argument sep is absent\nor None, runs of whitespace characters are replaced by a single space\nand leading and trailing whitespace are removed, otherwise sep is used to\nsplit and join the words."
                        ],
                        "code_demo": []
                    }
                ],
                "code_demo": [],
                "Subtopics": []
            }
        ]
    }
]