[
    {
        "Topic": "Built-in Exceptions",
        "content": [
            "In Python, all exceptions must be instances of a class that derives from\nBaseException.  In a try statement with an except\nclause that mentions a particular class, that clause also handles any exception\nclasses derived from that class (but not exception classes from which it is\nderived).  Two exception classes that are not related via subclassing are never\nequivalent, even if they have the same name.",
            "The built-in exceptions listed below can be generated by the interpreter or\nbuilt-in functions.  Except where mentioned, they have an \u201cassociated value\u201d\nindicating the detailed cause of the error.  This may be a string or a tuple of\nseveral items of information (e.g., an error code and a string explaining the\ncode).  The associated value is usually passed as arguments to the exception\nclass\u2019s constructor.",
            "User code can raise built-in exceptions.  This can be used to test an exception\nhandler or to report an error condition \u201cjust like\u201d the situation in which the\ninterpreter raises the same exception; but beware that there is nothing to\nprevent user code from raising an inappropriate error.",
            "The built-in exception classes can be subclassed to define new exceptions;\nprogrammers are encouraged to derive new exceptions from the Exception\nclass or one of its subclasses, and not from BaseException.  More\ninformation on defining exceptions is available in the Python Tutorial under\nUser-defined Exceptions."
        ],
        "functions": [],
        "code_demo": [],
        "Subtopics": [
            {
                "Topic": "Exception context",
                "content": [
                    "When raising a new exception while another exception\nis already being handled, the new exception\u2019s\n__context__ attribute is automatically set to the handled\nexception.  An exception may be handled when an except or\nfinally clause, or a with statement, is used.",
                    "This implicit exception context can be\nsupplemented with an explicit cause by using from with\nraise:",
                    "The expression following from must be an exception or None. It\nwill be set as __cause__ on the raised exception. Setting\n__cause__ also implicitly sets the __suppress_context__\nattribute to True, so that using raise new_exc from None\neffectively replaces the old exception with the new one for display\npurposes (e.g. converting KeyError to AttributeError), while\nleaving the old exception available in __context__ for introspection\nwhen debugging.",
                    "The default traceback display code shows these chained exceptions in\naddition to the traceback for the exception itself. An explicitly chained\nexception in __cause__ is always shown when present. An implicitly\nchained exception in __context__ is shown only if __cause__\nis None and __suppress_context__ is false.",
                    "In either case, the exception itself is always shown after any chained\nexceptions so that the final line of the traceback always shows the last\nexception that was raised."
                ],
                "functions": [],
                "code_demo": [
                    "raise new_exc from original_exc\n\n"
                ],
                "Subtopics": []
            },
            {
                "Topic": "Inheriting from built-in exceptions",
                "content": [
                    "User code can create subclasses that inherit from an exception type.\nIt\u2019s recommended to only subclass one exception type at a time to avoid\nany possible conflicts between how the bases handle the args\nattribute, as well as due to possible memory layout incompatibilities."
                ],
                "functions": [],
                "code_demo": [],
                "Subtopics": []
            },
            {
                "Topic": "Base classes",
                "content": [
                    "The following exceptions are used mostly as base classes for other exceptions."
                ],
                "functions": [
                    {
                        "name": "exception BaseException",
                        "content": [
                            "The base class for all built-in exceptions.  It is not meant to be directly\ninherited by user-defined classes (for that, use Exception).  If\nstr() is called on an instance of this class, the representation of\nthe argument(s) to the instance are returned, or the empty string when\nthere were no arguments."
                        ],
                        "code_demo": [],
                        "arguments and method": [
                            {
                                "name": "args",
                                "content": [
                                    "The tuple of arguments given to the exception constructor.  Some built-in\nexceptions (like OSError) expect a certain number of arguments and\nassign a special meaning to the elements of this tuple, while others are\nusually called only with a single string giving an error message."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "__notes__",
                                "content": [
                                    "A list of the notes of this exception, which were added with add_note().\nThis attribute is created when add_note() is called."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "with_traceback(tb)",
                                "content": [
                                    "This method sets tb as the new traceback for the exception and returns\nthe exception object.  It was more commonly used before the exception\nchaining features of PEP 3134 became available.  The following example\nshows how we can convert an instance of SomeException into an\ninstance of OtherException while preserving the traceback.  Once\nraised, the current frame is pushed onto the traceback of the\nOtherException, as would have happened to the traceback of the\noriginal SomeException had we allowed it to propagate to the caller."
                                ],
                                "code_demo": [
                                    "try:\n    ...\nexcept SomeException:\n    tb = sys.exc_info()[2]\n    raise OtherException(...).with_traceback(tb)\n\n"
                                ]
                            },
                            {
                                "name": "add_note(note)",
                                "content": [
                                    "Add the string note to the exception\u2019s notes which appear in the standard\ntraceback after the exception string. A TypeError is raised if note\nis not a string."
                                ],
                                "code_demo": []
                            }
                        ]
                    },
                    {
                        "name": "exception Exception",
                        "content": [
                            "All built-in, non-system-exiting exceptions are derived from this class.  All\nuser-defined exceptions should also be derived from this class."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ArithmeticError",
                        "content": [
                            "The base class for those built-in exceptions that are raised for various\narithmetic errors: OverflowError, ZeroDivisionError,\nFloatingPointError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception BufferError",
                        "content": [
                            "Raised when a buffer related operation cannot be\nperformed."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception LookupError",
                        "content": [
                            "The base class for the exceptions that are raised when a key or index used on\na mapping or sequence is invalid: IndexError, KeyError.  This\ncan be raised directly by codecs.lookup()."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    }
                ],
                "code_demo": [],
                "Subtopics": []
            },
            {
                "Topic": "Concrete exceptions",
                "content": [
                    "The following exceptions are the exceptions that are usually raised.",
                    "The following exceptions are kept for compatibility with previous versions;\nstarting from Python 3.3, they are aliases of OSError."
                ],
                "functions": [
                    {
                        "name": "exception AssertionError",
                        "content": [
                            "Raised when an assert statement fails."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception AttributeError",
                        "content": [
                            "Raised when an attribute reference (see Attribute references) or\nassignment fails.  (When an object does not support attribute references or\nattribute assignments at all, TypeError is raised.)",
                            "The name and obj attributes can be set using keyword-only\narguments to the constructor. When set they represent the name of the attribute\nthat was attempted to be accessed and the object that was accessed for said\nattribute, respectively."
                        ],
                        "code_demo": [
                            "\nChanged in version 3.10: Added the name and obj attributes.\n"
                        ],
                        "arguments and method": []
                    },
                    {
                        "name": "exception EOFError",
                        "content": [
                            "Raised when the input() function hits an end-of-file condition (EOF)\nwithout reading any data. (N.B.: the io.IOBase.read() and\nio.IOBase.readline() methods return an empty string when they hit EOF.)"
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception FloatingPointError",
                        "content": [
                            "Not currently used."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception GeneratorExit",
                        "content": [
                            "Raised when a generator or coroutine is closed;\nsee generator.close() and coroutine.close().  It\ndirectly inherits from BaseException instead of Exception since\nit is technically not an error."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ImportError",
                        "content": [
                            "Raised when the import statement has troubles trying to\nload a module.  Also raised when the \u201cfrom list\u201d in from ... import\nhas a name that cannot be found.",
                            "The name and path attributes can be set using keyword-only\narguments to the constructor. When set they represent the name of the module\nthat was attempted to be imported and the path to any file which triggered\nthe exception, respectively."
                        ],
                        "code_demo": [
                            "\nChanged in version 3.3: Added the name and path attributes.\n"
                        ],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ModuleNotFoundError",
                        "content": [
                            "A subclass of ImportError which is raised by import\nwhen a module could not be located.  It is also raised when None\nis found in sys.modules."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception IndexError",
                        "content": [
                            "Raised when a sequence subscript is out of range.  (Slice indices are\nsilently truncated to fall in the allowed range; if an index is not an\ninteger, TypeError is raised.)"
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception KeyError",
                        "content": [
                            "Raised when a mapping (dictionary) key is not found in the set of existing keys."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception KeyboardInterrupt",
                        "content": [
                            "Raised when the user hits the interrupt key (normally Control-C or\nDelete).  During execution, a check for interrupts is made\nregularly. The exception inherits from BaseException so as to not be\naccidentally caught by code that catches Exception and thus prevent\nthe interpreter from exiting."
                        ],
                        "code_demo": [
                            "\nNote\nCatching a KeyboardInterrupt requires special consideration.\nBecause it can be raised at unpredictable points, it may, in some\ncircumstances, leave the running program in an inconsistent state. It is\ngenerally best to allow KeyboardInterrupt to end the program as\nquickly as possible or avoid raising it entirely. (See\nNote on Signal Handlers and Exceptions.)\n"
                        ],
                        "arguments and method": []
                    },
                    {
                        "name": "exception MemoryError",
                        "content": [
                            "Raised when an operation runs out of memory but the situation may still be\nrescued (by deleting some objects).  The associated value is a string indicating\nwhat kind of (internal) operation ran out of memory. Note that because of the\nunderlying memory management architecture (C\u2019s malloc() function), the\ninterpreter may not always be able to completely recover from this situation; it\nnevertheless raises an exception so that a stack traceback can be printed, in\ncase a run-away program was the cause."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception NameError",
                        "content": [
                            "Raised when a local or global name is not found.  This applies only to\nunqualified names.  The associated value is an error message that includes the\nname that could not be found.",
                            "The name attribute can be set using a keyword-only argument to the\nconstructor. When set it represent the name of the variable that was attempted\nto be accessed."
                        ],
                        "code_demo": [
                            "\nChanged in version 3.10: Added the name attribute.\n"
                        ],
                        "arguments and method": []
                    },
                    {
                        "name": "exception NotImplementedError",
                        "content": [
                            "This exception is derived from RuntimeError.  In user defined base\nclasses, abstract methods should raise this exception when they require\nderived classes to override the method, or while the class is being\ndeveloped to indicate that the real implementation still needs to be added."
                        ],
                        "code_demo": [
                            "\nNote\nIt should not be used to indicate that an operator or method is not\nmeant to be supported at all \u2013 in that case either leave the operator /\nmethod undefined or, if a subclass, set it to None.\n",
                            "\nNote\nNotImplementedError and NotImplemented are not interchangeable,\neven though they have similar names and purposes.  See\nNotImplemented for details on when to use it.\n"
                        ],
                        "arguments and method": []
                    },
                    {
                        "name": "exception OSError([arg])",
                        "content": [
                            "This exception is raised when a system function returns a system-related\nerror, including I/O failures such as \u201cfile not found\u201d or \u201cdisk full\u201d\n(not for illegal argument types or other incidental errors).",
                            "The second form of the constructor sets the corresponding attributes,\ndescribed below.  The attributes default to None if not\nspecified.  For backwards compatibility, if three arguments are passed,\nthe args attribute contains only a 2-tuple\nof the first two constructor arguments.",
                            "The constructor often actually returns a subclass of OSError, as\ndescribed in OS exceptions below.  The particular subclass depends on\nthe final errno value.  This behaviour only occurs when\nconstructing OSError directly or via an alias, and is not\ninherited when subclassing."
                        ],
                        "code_demo": [
                            "\nChanged in version 3.3: EnvironmentError, IOError, WindowsError,\nsocket.error, select.error and\nmmap.error have been merged into OSError, and the\nconstructor may return a subclass.\n",
                            "\nChanged in version 3.4: The filename attribute is now the original file name passed to\nthe function, instead of the name encoded to or decoded from the\nfilesystem encoding and error handler. Also, the filename2\nconstructor argument and attribute was added.\n"
                        ],
                        "arguments and method": [
                            {
                                "name": "errno",
                                "content": [
                                    "A numeric error code from the C variable errno."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "winerror",
                                "content": [
                                    "Under Windows, this gives you the native\nWindows error code.  The errno attribute is then an approximate\ntranslation, in POSIX terms, of that native error code.",
                                    "Under Windows, if the winerror constructor argument is an integer,\nthe errno attribute is determined from the Windows error code,\nand the errno argument is ignored.  On other platforms, the\nwinerror argument is ignored, and the winerror attribute\ndoes not exist."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "strerror",
                                "content": [
                                    "The corresponding error message, as provided by\nthe operating system.  It is formatted by the C\nfunctions perror() under POSIX, and FormatMessage()\nunder Windows."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "filename",
                                "content": [
                                    "For exceptions that involve a file system path (such as open() or\nos.unlink()), filename is the file name passed to the function.\nFor functions that involve two file system paths (such as\nos.rename()), filename2 corresponds to the second\nfile name passed to the function."
                                ],
                                "code_demo": []
                            }
                        ]
                    },
                    {
                        "name": "exception OverflowError",
                        "content": [
                            "Raised when the result of an arithmetic operation is too large to be\nrepresented.  This cannot occur for integers (which would rather raise\nMemoryError than give up).  However, for historical reasons,\nOverflowError is sometimes raised for integers that are outside a required\nrange.   Because of the lack of standardization of floating point exception\nhandling in C, most floating point operations are not checked."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception RecursionError",
                        "content": [
                            "This exception is derived from RuntimeError.  It is raised when the\ninterpreter detects that the maximum recursion depth (see\nsys.getrecursionlimit()) is exceeded."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ReferenceError",
                        "content": [
                            "This exception is raised when a weak reference proxy, created by the\nweakref.proxy() function, is used to access an attribute of the referent\nafter it has been garbage collected. For more information on weak references,\nsee the weakref module."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception RuntimeError",
                        "content": [
                            "Raised when an error is detected that doesn\u2019t fall in any of the other\ncategories.  The associated value is a string indicating what precisely went\nwrong."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception StopIteration",
                        "content": [
                            "Raised by built-in function next() and an iterator's\n__next__() method to signal that there are no further\nitems produced by the iterator.",
                            "The exception object has a single attribute value, which is\ngiven as an argument when constructing the exception, and defaults\nto None.",
                            "When a generator or coroutine function\nreturns, a new StopIteration instance is\nraised, and the value returned by the function is used as the\nvalue parameter to the constructor of the exception.",
                            "If a generator code directly or indirectly raises StopIteration,\nit is converted into a RuntimeError (retaining the\nStopIteration as the new exception\u2019s cause)."
                        ],
                        "code_demo": [
                            "\nChanged in version 3.3: Added value attribute and the ability for generator functions to\nuse it to return a value.\n",
                            "\nChanged in version 3.5: Introduced the RuntimeError transformation via\nfrom __future__ import generator_stop, see PEP 479.\n",
                            "\nChanged in version 3.7: Enable PEP 479 for all code by default: a StopIteration\nerror raised in a generator is transformed into a RuntimeError.\n"
                        ],
                        "arguments and method": []
                    },
                    {
                        "name": "exception StopAsyncIteration",
                        "content": [
                            "Must be raised by __anext__() method of an\nasynchronous iterator object to stop the iteration."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception SyntaxError(message, details)",
                        "content": [
                            "Raised when the parser encounters a syntax error.  This may occur in an\nimport statement, in a call to the built-in functions\ncompile(), exec(),\nor eval(), or when reading the initial script or standard input\n(also interactively).",
                            "The str() of the exception instance returns only the error message.\nDetails is a tuple whose members are also available as separate attributes.",
                            "For errors in f-string fields, the message is prefixed by \u201cf-string: \u201d\nand the offsets are offsets in a text constructed from the replacement\nexpression.  For example, compiling f\u2019Bad {a b} field\u2019 results in this\nargs attribute: (\u2018f-string: \u2026\u2019, (\u2018\u2019, 1, 2, \u2018(a b)n\u2019, 1, 5))."
                        ],
                        "code_demo": [
                            "\nChanged in version 3.10: Added the end_lineno and end_offset attributes.\n"
                        ],
                        "arguments and method": [
                            {
                                "name": "filename",
                                "content": [
                                    "The name of the file the syntax error occurred in."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "lineno",
                                "content": [
                                    "Which line number in the file the error occurred in. This is\n1-indexed: the first line in the file has a lineno of 1."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "offset",
                                "content": [
                                    "The column in the line where the error occurred. This is\n1-indexed: the first character in the line has an offset of 1."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "text",
                                "content": [
                                    "The source code text involved in the error."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "end_lineno",
                                "content": [
                                    "Which line number in the file the error occurred ends in. This is\n1-indexed: the first line in the file has a lineno of 1."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "end_offset",
                                "content": [
                                    "The column in the end line where the error occurred finishes. This is\n1-indexed: the first character in the line has an offset of 1."
                                ],
                                "code_demo": []
                            }
                        ]
                    },
                    {
                        "name": "exception IndentationError",
                        "content": [
                            "Base class for syntax errors related to incorrect indentation.  This is a\nsubclass of SyntaxError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception TabError",
                        "content": [
                            "Raised when indentation contains an inconsistent use of tabs and spaces.\nThis is a subclass of IndentationError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception SystemError",
                        "content": [
                            "Raised when the interpreter finds an internal error, but the situation does not\nlook so serious to cause it to abandon all hope. The associated value is a\nstring indicating what went wrong (in low-level terms).",
                            "You should report this to the author or maintainer of your Python interpreter.\nBe sure to report the version of the Python interpreter (sys.version; it is\nalso printed at the start of an interactive Python session), the exact error\nmessage (the exception\u2019s associated value) and if possible the source of the\nprogram that triggered the error."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception SystemExit",
                        "content": [
                            "This exception is raised by the sys.exit() function.  It inherits from\nBaseException instead of Exception so that it is not accidentally\ncaught by code that catches Exception.  This allows the exception to\nproperly propagate up and cause the interpreter to exit.  When it is not\nhandled, the Python interpreter exits; no stack traceback is printed.  The\nconstructor accepts the same optional argument passed to sys.exit().\nIf the value is an integer, it specifies the system exit status (passed to\nC\u2019s exit() function); if it is None, the exit status is zero; if\nit has another type (such as a string), the object\u2019s value is printed and\nthe exit status is one.",
                            "A call to sys.exit() is translated into an exception so that clean-up\nhandlers (finally clauses of try statements) can be\nexecuted, and so that a debugger can execute a script without running the risk\nof losing control.  The os._exit() function can be used if it is\nabsolutely positively necessary to exit immediately (for example, in the child\nprocess after a call to os.fork())."
                        ],
                        "code_demo": [],
                        "arguments and method": [
                            {
                                "name": "code",
                                "content": [
                                    "The exit status or error message that is passed to the constructor.\n(Defaults to None.)"
                                ],
                                "code_demo": []
                            }
                        ]
                    },
                    {
                        "name": "exception TypeError",
                        "content": [
                            "Raised when an operation or function is applied to an object of inappropriate\ntype.  The associated value is a string giving details about the type mismatch.",
                            "This exception may be raised by user code to indicate that an attempted\noperation on an object is not supported, and is not meant to be. If an object\nis meant to support a given operation but has not yet provided an\nimplementation, NotImplementedError is the proper exception to raise.",
                            "Passing arguments of the wrong type (e.g. passing a list when an\nint is expected) should result in a TypeError, but passing\narguments with the wrong value (e.g. a number outside expected boundaries)\nshould result in a ValueError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception UnboundLocalError",
                        "content": [
                            "Raised when a reference is made to a local variable in a function or method, but\nno value has been bound to that variable.  This is a subclass of\nNameError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception UnicodeError",
                        "content": [
                            "Raised when a Unicode-related encoding or decoding error occurs.  It is a\nsubclass of ValueError.",
                            "UnicodeError has attributes that describe the encoding or decoding\nerror.  For example, err.object[err.start:err.end] gives the particular\ninvalid input that the codec failed on."
                        ],
                        "code_demo": [],
                        "arguments and method": [
                            {
                                "name": "encoding",
                                "content": [
                                    "The name of the encoding that raised the error."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "reason",
                                "content": [
                                    "A string describing the specific codec error."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "object",
                                "content": [
                                    "The object the codec was attempting to encode or decode."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "start",
                                "content": [
                                    "The first index of invalid data in object."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "end",
                                "content": [
                                    "The index after the last invalid data in object."
                                ],
                                "code_demo": []
                            }
                        ]
                    },
                    {
                        "name": "exception UnicodeEncodeError",
                        "content": [
                            "Raised when a Unicode-related error occurs during encoding.  It is a subclass of\nUnicodeError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception UnicodeDecodeError",
                        "content": [
                            "Raised when a Unicode-related error occurs during decoding.  It is a subclass of\nUnicodeError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception UnicodeTranslateError",
                        "content": [
                            "Raised when a Unicode-related error occurs during translating.  It is a subclass\nof UnicodeError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ValueError",
                        "content": [
                            "Raised when an operation or function receives an argument that has the\nright type but an inappropriate value, and the situation is not described by a\nmore precise exception such as IndexError."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ZeroDivisionError",
                        "content": [
                            "Raised when the second argument of a division or modulo operation is zero.  The\nassociated value is a string indicating the type of the operands and the\noperation."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception EnvironmentError",
                        "content": [],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception IOError",
                        "content": [],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception WindowsError",
                        "content": [
                            "Only available on Windows."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    }
                ],
                "code_demo": [],
                "Subtopics": [
                    {
                        "Topic": "OS exceptions",
                        "content": [
                            "The following exceptions are subclasses of OSError, they get raised\ndepending on the system error code."
                        ],
                        "functions": [
                            {
                                "name": "exception BlockingIOError",
                                "content": [
                                    "Raised when an operation would block on an object (e.g. socket) set\nfor non-blocking operation.\nCorresponds to errno EAGAIN, EALREADY,\nEWOULDBLOCK and EINPROGRESS.",
                                    "In addition to those of OSError, BlockingIOError can have\none more attribute:"
                                ],
                                "code_demo": [],
                                "arguments and method": [
                                    {
                                        "name": "characters_written",
                                        "content": [
                                            "An integer containing the number of characters written to the stream\nbefore it blocked.  This attribute is available when using the\nbuffered I/O classes from the io module."
                                        ],
                                        "code_demo": []
                                    }
                                ]
                            },
                            {
                                "name": "exception ChildProcessError",
                                "content": [
                                    "Raised when an operation on a child process failed.\nCorresponds to errno ECHILD."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception ConnectionError",
                                "content": [
                                    "A base class for connection-related issues.",
                                    "Subclasses are BrokenPipeError, ConnectionAbortedError,\nConnectionRefusedError and ConnectionResetError."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception BrokenPipeError",
                                "content": [
                                    "A subclass of ConnectionError, raised when trying to write on a\npipe while the other end has been closed, or trying to write on a socket\nwhich has been shutdown for writing.\nCorresponds to errno EPIPE and ESHUTDOWN."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception ConnectionAbortedError",
                                "content": [
                                    "A subclass of ConnectionError, raised when a connection attempt\nis aborted by the peer.\nCorresponds to errno ECONNABORTED."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception ConnectionRefusedError",
                                "content": [
                                    "A subclass of ConnectionError, raised when a connection attempt\nis refused by the peer.\nCorresponds to errno ECONNREFUSED."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception ConnectionResetError",
                                "content": [
                                    "A subclass of ConnectionError, raised when a connection is\nreset by the peer.\nCorresponds to errno ECONNRESET."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception FileExistsError",
                                "content": [
                                    "Raised when trying to create a file or directory which already exists.\nCorresponds to errno EEXIST."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception FileNotFoundError",
                                "content": [
                                    "Raised when a file or directory is requested but doesn\u2019t exist.\nCorresponds to errno ENOENT."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception InterruptedError",
                                "content": [
                                    "Raised when a system call is interrupted by an incoming signal.\nCorresponds to errno EINTR."
                                ],
                                "code_demo": [
                                    "\nChanged in version 3.5: Python now retries system calls when a syscall is interrupted by a\nsignal, except if the signal handler raises an exception (see PEP 475\nfor the rationale), instead of raising InterruptedError.\n"
                                ],
                                "arguments and method": []
                            },
                            {
                                "name": "exception IsADirectoryError",
                                "content": [
                                    "Raised when a file operation (such as os.remove()) is requested\non a directory.\nCorresponds to errno EISDIR."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception NotADirectoryError",
                                "content": [
                                    "Raised when a directory operation (such as os.listdir()) is requested on\nsomething which is not a directory.  On most POSIX platforms, it may also be\nraised if an operation attempts to open or traverse a non-directory file as if\nit were a directory.\nCorresponds to errno ENOTDIR."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception PermissionError",
                                "content": [
                                    "Raised when trying to run an operation without the adequate access\nrights - for example filesystem permissions.\nCorresponds to errno EACCES,\nEPERM, and ENOTCAPABLE."
                                ],
                                "code_demo": [
                                    "\nChanged in version 3.11.1: WASI\u2019s ENOTCAPABLE is now mapped to\nPermissionError.\n"
                                ],
                                "arguments and method": []
                            },
                            {
                                "name": "exception ProcessLookupError",
                                "content": [
                                    "Raised when a given process doesn\u2019t exist.\nCorresponds to errno ESRCH."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            },
                            {
                                "name": "exception TimeoutError",
                                "content": [
                                    "Raised when a system function timed out at the system level.\nCorresponds to errno ETIMEDOUT."
                                ],
                                "code_demo": [],
                                "arguments and method": []
                            }
                        ],
                        "code_demo": [],
                        "Subtopics": []
                    }
                ]
            },
            {
                "Topic": "Warnings",
                "content": [
                    "The following exceptions are used as warning categories; see the\nWarning Categories documentation for more details."
                ],
                "functions": [
                    {
                        "name": "exception Warning",
                        "content": [
                            "Base class for warning categories."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception UserWarning",
                        "content": [
                            "Base class for warnings generated by user code."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception DeprecationWarning",
                        "content": [
                            "Base class for warnings about deprecated features when those warnings are\nintended for other Python developers.",
                            "Ignored by the default warning filters, except in the __main__ module\n(PEP 565). Enabling the Python Development Mode shows\nthis warning.",
                            "The deprecation policy is described in PEP 387."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception PendingDeprecationWarning",
                        "content": [
                            "Base class for warnings about features which are obsolete and\nexpected to be deprecated in the future, but are not deprecated\nat the moment.",
                            "This class is rarely used as emitting a warning about a possible\nupcoming deprecation is unusual, and DeprecationWarning\nis preferred for already active deprecations.",
                            "Ignored by the default warning filters. Enabling the Python\nDevelopment Mode shows this warning.",
                            "The deprecation policy is described in PEP 387."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception SyntaxWarning",
                        "content": [
                            "Base class for warnings about dubious syntax."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception RuntimeWarning",
                        "content": [
                            "Base class for warnings about dubious runtime behavior."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception FutureWarning",
                        "content": [
                            "Base class for warnings about deprecated features when those warnings are\nintended for end users of applications that are written in Python."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ImportWarning",
                        "content": [
                            "Base class for warnings about probable mistakes in module imports.",
                            "Ignored by the default warning filters. Enabling the Python\nDevelopment Mode shows this warning."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception UnicodeWarning",
                        "content": [
                            "Base class for warnings related to Unicode."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception EncodingWarning",
                        "content": [
                            "Base class for warnings related to encodings.",
                            "See Opt-in EncodingWarning for details."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception BytesWarning",
                        "content": [
                            "Base class for warnings related to bytes and bytearray."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception ResourceWarning",
                        "content": [
                            "Base class for warnings related to resource usage.",
                            "Ignored by the default warning filters. Enabling the Python\nDevelopment Mode shows this warning."
                        ],
                        "code_demo": [],
                        "arguments and method": []
                    }
                ],
                "code_demo": [],
                "Subtopics": []
            },
            {
                "Topic": "Exception groups",
                "content": [
                    "The following are used when it is necessary to raise multiple unrelated\nexceptions. They are part of the exception hierarchy so they can be\nhandled with except like all other exceptions. In addition,\nthey are recognised by except*, which matches\ntheir subgroups based on the types of the contained exceptions."
                ],
                "functions": [
                    {
                        "name": "exception ExceptionGroup(msg, excs)",
                        "content": [],
                        "code_demo": [],
                        "arguments and method": []
                    },
                    {
                        "name": "exception BaseExceptionGroup(msg, excs)",
                        "content": [
                            "Both of these exception types wrap the exceptions in the sequence excs.\nThe msg parameter must be a string. The difference between the two\nclasses is that BaseExceptionGroup extends BaseException and\nit can wrap any exception, while ExceptionGroup extends Exception\nand it can only wrap subclasses of Exception. This design is so that\nexcept Exception catches an ExceptionGroup but not\nBaseExceptionGroup.",
                            "The BaseExceptionGroup constructor returns an ExceptionGroup\nrather than a BaseExceptionGroup if all contained exceptions are\nException instances, so it can be used to make the selection\nautomatic. The ExceptionGroup constructor, on the other hand,\nraises a TypeError if any contained exception is not an\nException subclass.",
                            "Note that BaseExceptionGroup defines __new__(), so\nsubclasses that need a different constructor signature need to\noverride that rather than __init__(). For example, the following\ndefines an exception group subclass which accepts an exit_code and\nand constructs the group\u2019s message from it."
                        ],
                        "code_demo": [
                            "class Errors(ExceptionGroup):\n   def __new__(cls, errors, exit_code):\n      self = super().__new__(Errors, f\"exit code: {exit_code}\", errors)\n      self.exit_code = exit_code\n      return self\n\n   def derive(self, excs):\n      return Errors(excs, self.exit_code)\n\n"
                        ],
                        "arguments and method": [
                            {
                                "name": "message",
                                "content": [
                                    "The msg argument to the constructor. This is a read-only attribute."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "exceptions",
                                "content": [
                                    "A tuple of the exceptions in the excs sequence given to the\nconstructor. This is a read-only attribute."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "subgroup(condition)",
                                "content": [
                                    "Returns an exception group that contains only the exceptions from the\ncurrent group that match condition, or None if the result is empty.",
                                    "The condition can be either a function that accepts an exception and returns\ntrue for those that should be in the subgroup, or it can be an exception type\nor a tuple of exception types, which is used to check for a match using the\nsame check that is used in an except clause.",
                                    "The nesting structure of the current exception is preserved in the result,\nas are the values of its message, __traceback__,\n__cause__, __context__ and __notes__ fields.\nEmpty nested groups are omitted from the result.",
                                    "The condition is checked for all exceptions in the nested exception group,\nincluding the top-level and any nested exception groups. If the condition is\ntrue for such an exception group, it is included in the result in full."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "split(condition)",
                                "content": [
                                    "Like subgroup(), but returns the pair (match, rest) where match\nis subgroup(condition) and rest is the remaining non-matching\npart."
                                ],
                                "code_demo": []
                            },
                            {
                                "name": "derive(excs)",
                                "content": [
                                    "Returns an exception group with the same message,\n__traceback__, __cause__, __context__\nand __notes__ but which wraps the exceptions in excs.",
                                    "This method is used by subgroup() and split(). A\nsubclass needs to override it in order to make subgroup()\nand split() return instances of the subclass rather\nthan ExceptionGroup."
                                ],
                                "code_demo": [
                                    ">>> class MyGroup(ExceptionGroup):\n...     def derive(self, exc):\n...         return MyGroup(self.message, exc)\n...\n>>> MyGroup(\"eg\", [ValueError(1), TypeError(2)]).split(TypeError)\n(MyGroup('eg', [TypeError(2)]), MyGroup('eg', [ValueError(1)]))\n\n"
                                ]
                            }
                        ]
                    }
                ],
                "code_demo": [],
                "Subtopics": []
            },
            {
                "Topic": "Exception hierarchy",
                "content": [
                    "The class hierarchy for built-in exceptions is:"
                ],
                "functions": [],
                "code_demo": [],
                "Subtopics": []
            }
        ]
    }
]