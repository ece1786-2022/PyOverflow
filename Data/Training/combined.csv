content,topic,label
"In Python, all exceptions must be instances of a class that derives from BaseException",Built-in Exceptions,0
"  In a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived)",Built-in Exceptions,0
"  Two exception classes that are not related via subclassing are never equivalent, even if they have the same name",Built-in Exceptions,0
 The built-in exceptions listed below can be generated by the interpreter or built-in functions,Built-in Exceptions,0
"  Except where mentioned, they have an “associated value” indicating the detailed cause of the error",Built-in Exceptions,0
  This may be a string or a tuple of several items of information (e,Built-in Exceptions,0
g,Built-in Exceptions,0
", an error code and a string explaining the code)",Built-in Exceptions,0
  The associated value is usually passed as arguments to the exception class’s constructor,Built-in Exceptions,0
 User code can raise built-in exceptions,Built-in Exceptions,0
  This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error,Built-in Exceptions,0
" The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException",Built-in Exceptions,0
  More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions,Built-in Exceptions,0
" When raising a new exception while another exception is already being handled, the new exception’s __context__ attribute is automatically set to the handled exception",Built-in Exceptions,0
"  An exception may be handled when an except or finally clause, or a with statement, is used",Built-in Exceptions,0
 This implicit exception context can be supplemented with an explicit cause by using from with raise: The expression following from must be an exception or None,Built-in Exceptions,0
 It will be set as __cause__ on the raised exception,Built-in Exceptions,0
" Setting __cause__ also implicitly sets the __suppress_context__ attribute to True, so that using raise new_exc from None effectively replaces the old exception with the new one for display purposes (e",Built-in Exceptions,0
g,Built-in Exceptions,0
" converting KeyError to AttributeError), while leaving the old exception available in __context__ for introspection when debugging",Built-in Exceptions,0
 The default traceback display code shows these chained exceptions in addition to the traceback for the exception itself,Built-in Exceptions,0
 An explicitly chained exception in __cause__ is always shown when present,Built-in Exceptions,0
 An implicitly chained exception in __context__ is shown only if __cause__ is None and __suppress_context__ is false,Built-in Exceptions,0
" In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised",Built-in Exceptions,0
 User code can create subclasses that inherit from an exception type,Built-in Exceptions,0
" It’s recommended to only subclass one exception type at a time to avoid any possible conflicts between how the bases handle the args attribute, as well as due to possible memory layout incompatibilities",Built-in Exceptions,0
 The following exceptions are used mostly as base classes for other exceptions,Built-in Exceptions,0
 The following exceptions are the exceptions that are usually raised,Built-in Exceptions,0
 The following exceptions are kept for compatibility with previous versions; starting from Python 3,Built-in Exceptions,0
"3, they are aliases of OSError",Built-in Exceptions,0
 The following exceptions are used as warning categories; see the Warning Categories documentation for more details,Built-in Exceptions,0
 The following are used when it is necessary to raise multiple unrelated exceptions,Built-in Exceptions,0
 They are part of the exception hierarchy so they can be handled with except like all other exceptions,Built-in Exceptions,0
" In addition, they are recognised by except*, which matches their subgroups based on the types of the contained exceptions",Built-in Exceptions,0
 The class hierarchy for built-in exceptions is:,Built-in Exceptions,0
The following sections describe the standard types that are built into the interpreter,Built-in Types,1
" The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions",Built-in Types,1
 Some collection classes are mutable,Built-in Types,1
"  The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but None",Built-in Types,1
" Some operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the repr() function or the slightly different str() function)",Built-in Types,1
  The latter function is implicitly used when an object is written by the print() function,Built-in Types,1
" Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below",Built-in Types,1
" By default, an object is considered true unless its class defines either a __bool__() method that returns False or a __len__() method that returns zero, when called with the object",Built-in Types,1
" 1  Here are most of the built-in objects considered false: Operations and built-in functions that have a Boolean result always return 0 or False for false and 1 or True for true, unless otherwise stated",Built-in Types,1
 (Important exception: the Boolean operations or and and always return one of their operands,Built-in Types,1
),Built-in Types,1
" These are the Boolean operations, ordered by ascending priority: Notes: This is a short-circuit operator, so it only evaluates the second argument if the first one is false",Built-in Types,1
" This is a short-circuit operator, so it only evaluates the second argument if the first one is true",Built-in Types,1
" not has a lower priority than non-Boolean operators, so not a == b is interpreted as not (a == b), and a == not b is a syntax error",Built-in Types,1
 There are eight comparison operations in Python,Built-in Types,1
  They all have the same priority (which is higher than that of the Boolean operations),Built-in Types,1
"  Comparisons can be chained arbitrarily; for example, x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x < y is found to be false)",Built-in Types,1
" This table summarizes the comparison operations: Objects of different types, except different numeric types, never compare equal",Built-in Types,1
" The == operator is always defined but for some object types (for example, class objects) is equivalent to is",Built-in Types,1
" The <, <=, > and >= operators are only defined where they make sense; for example, they raise a TypeError exception when one of the arguments is a complex number",Built-in Types,1
 Non-identical instances of a class normally compare as non-equal unless the class defines the __eq__() method,Built-in Types,1
" Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods __lt__(), __le__(), __gt__(), and __ge__() (in general, __lt__() and __eq__() are sufficient, if you want the conventional meanings of the comparison operators)",Built-in Types,1
 The behavior of the is and is not operators cannot be customized; also they can be applied to any two objects and never raise an exception,Built-in Types,1
" Two more operations with the same syntactic priority, in and not in, are supported by types that are iterable or implement the __contains__() method",Built-in Types,1
" There are three distinct numeric types: integers, floating point numbers, and complex numbers",Built-in Types,1
"  In addition, Booleans are a subtype of integers",Built-in Types,1
  Integers have unlimited precision,Built-in Types,1
  Floating point numbers are usually implemented using double in C; information about the precision and internal representation of floating point numbers for the machine on which your program is running is available in sys,Built-in Types,1
float_info,Built-in Types,1
"  Complex numbers have a real and imaginary part, which are each a floating point number",Built-in Types,1
"  To extract these parts from a complex number z, use z",Built-in Types,1
real and z,Built-in Types,1
imag,Built-in Types,1
 (The standard library includes the additional numeric types fractions,Built-in Types,1
"Fraction, for rationals, and decimal",Built-in Types,1
"Decimal, for floating-point numbers with user-definable precision",Built-in Types,1
) Numbers are created by numeric literals or as the result of built-in functions and operators,Built-in Types,1
"  Unadorned integer literals (including hex, octal and binary numbers) yield integers",Built-in Types,1
  Numeric literals containing a decimal point or an exponent sign yield floating point numbers,Built-in Types,1
  Appending 'j' or 'J' to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts,Built-in Types,1
" Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex",Built-in Types,1
 A comparison between numbers of different types behaves as though the exact values of those numbers were being compared,Built-in Types,1
" 2 The constructors int(), float(), and complex() can be used to produce numbers of a specific type",Built-in Types,1
" All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence): Notes: All numbers",Built-in Types,1
Real types (int and float) also include the following operations: For additional numeric operations see the math and cmath modules,Built-in Types,1
 Also referred to as integer division,Built-in Types,1
"  The resultant value is a whole integer, though the result’s type is not necessarily int",Built-in Types,1
"  The result is always rounded towards minus infinity: 1//2 is 0, (-1)//2 is -1, 1//(-2) is -1, and (-1)//(-2) is 0",Built-in Types,1
 Not for complex numbers,Built-in Types,1
  Instead convert to floats using abs() if appropriate,Built-in Types,1
 Conversion from floating point to integer may round or truncate as in C; see functions math,Built-in Types,1
floor() and math,Built-in Types,1
ceil() for well-defined conversions,Built-in Types,1
  float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity,Built-in Types,1
" Python defines pow(0, 0) and 0 ** 0 to be 1, as is common for programming languages",Built-in Types,1
 The numeric literals accepted include the digits 0 to 9 or any Unicode equivalent (code points with the Nd property),Built-in Types,1
 See https://www,Built-in Types,1
unicode,Built-in Types,1
org/Public/14,Built-in Types,1
0,Built-in Types,1
0/ucd/extracted/DerivedNumericType,Built-in Types,1
txt for a complete list of code points with the Nd property,Built-in Types,1
 ,Built-in Types,1
 Python supports a concept of iteration over containers,Built-in Types,1
  This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration,Built-in Types,1
"  Sequences, described below in more detail, always support the iteration methods",Built-in Types,1
" One method needs to be defined for container objects to provide iterable support: The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: Python defines several iterator objects to support iteration over general and specific sequence types, dictionaries, and other more specialized forms",Built-in Types,1
  The specific types are not important beyond their implementation of the iterator protocol,Built-in Types,1
" Once an iterator’s __next__() method raises StopIteration, it must continue to do so on subsequent calls",Built-in Types,1
 Implementations that do not obey this property are deemed broken,Built-in Types,1
" There are three basic sequence types: lists, tuples, and range objects",Built-in Types,1
 Additional sequence types tailored for processing of binary data and text strings are described in dedicated sections,Built-in Types,1
" Textual data in Python is handled with str objects, or strings",Built-in Types,1
 Strings are immutable sequences of Unicode code points,Built-in Types,1
  String literals are written in a variety of ways: Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal,Built-in Types,1
 String literals that are part of a single expression and have only whitespace between them will be implicitly converted to a single string literal,Built-in Types,1
" That is, (""spam "" ""eggs"") == ""spam eggs""",Built-in Types,1
" See String and Bytes literals for more about the various forms of string literal, including supported escape sequences, and the r (“raw”) prefix that disables most escape sequence processing",Built-in Types,1
 Strings may also be created from other objects using the str constructor,Built-in Types,1
" Since there is no separate “character” type, indexing a string produces strings of length 1",Built-in Types,1
" That is, for a non-empty string s, s[0] == s[0:1]",Built-in Types,1
" There is also no mutable string type, but str",Built-in Types,1
join() or io,Built-in Types,1
StringIO can be used to efficiently construct strings from multiple fragments,Built-in Types,1
 The core built-in types for manipulating binary data are bytes and bytearray,Built-in Types,1
 They are supported by memoryview which uses the buffer protocol to access the memory of other binary objects without needing to make a copy,Built-in Types,1
 The array module supports efficient storage of basic data types like 32-bit integers and IEEE754 double-precision floating values,Built-in Types,1
 A set object is an unordered collection of distinct hashable objects,Built-in Types,1
" Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference",Built-in Types,1
" (For other containers see the built-in dict, list, and tuple classes, and the collections module",Built-in Types,1
") Like other collections, sets support x in set, len(set), and for x in set",Built-in Types,1
"  Being an unordered collection, sets do not record element position or order of insertion",Built-in Types,1
"  Accordingly, sets do not support indexing, slicing, or other sequence-like behavior",Built-in Types,1
" There are currently two built-in set types, set and frozenset",Built-in Types,1
 The set type is mutable — the contents can be changed using methods like add() and remove(),Built-in Types,1
"  Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set",Built-in Types,1
  The frozenset type is immutable and hashable — its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set,Built-in Types,1
" Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: {'jack', 'sjoerd'}, in addition to the set constructor",Built-in Types,1
 The constructors for both classes work the same:,Built-in Types,1
 A mapping object maps hashable values to arbitrary objects,Built-in Types,1
 Mappings are mutable objects,Built-in Types,1
"  There is currently only one standard mapping type, the dictionary",Built-in Types,1
"  (For other containers see the built-in list, set, and tuple classes, and the collections module",Built-in Types,1
) A dictionary’s keys are almost arbitrary values,Built-in Types,1
"  Values that are not hashable, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys",Built-in Types,1
" Values that compare equal (such as 1, 1",Built-in Types,1
"0, and True) can be used interchangeably to index the same dictionary entry",Built-in Types,1
 Python’s with statement supports the concept of a runtime context defined by a context manager,Built-in Types,1
"  This is implemented using a pair of methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends: Python defines several context managers to support easy thread synchronisation, prompt closure of files or other objects, and simpler manipulation of the active decimal arithmetic context",Built-in Types,1
 The specific types are not treated specially beyond their implementation of the context management protocol,Built-in Types,1
 See the contextlib module for some examples,Built-in Types,1
 Python’s generators and the contextlib,Built-in Types,1
contextmanager decorator provide a convenient way to implement these protocols,Built-in Types,1
  If a generator function is decorated with the contextlib,Built-in Types,1
"contextmanager decorator, it will return a context manager implementing the necessary __enter__() and __exit__() methods, rather than the iterator produced by an undecorated generator function",Built-in Types,1
 Note that there is no specific slot for any of these methods in the type structure for Python objects in the Python/C API,Built-in Types,1
 Extension types wanting to define these methods must provide them as a normal Python accessible method,Built-in Types,1
" Compared to the overhead of setting up the runtime context, the overhead of a single class dictionary lookup is negligible",Built-in Types,1
 The core built-in types for type annotations are Generic Alias and Union,Built-in Types,1
 The interpreter supports several other kinds of objects,Built-in Types,1
 Most of these support only one or two operations,Built-in Types,1
" The implementation adds a few special read-only attributes to several object types, where they are relevant",Built-in Types,1
  Some of these are not reported by the dir() built-in function,Built-in Types,1
 CPython has a global limit for converting between int and str to mitigate denial of service attacks,Built-in Types,1
 This limit only applies to decimal or other non-power-of-two number bases,Built-in Types,1
" Hexadecimal, octal, and binary conversions are unlimited",Built-in Types,1
 The limit can be configured,Built-in Types,1
 The int type in CPython is an abitrary length number stored in binary form (commonly known as a “bignum”),Built-in Types,1
" There exists no algorithm that can convert a string to a binary integer or a binary integer to a string in linear time, unless the base is a power of 2",Built-in Types,1
 Even the best known algorithms for base 10 have sub-quadratic complexity,Built-in Types,1
 Converting a large value such as int('1' * 500_000) can take over a second on a fast CPU,Built-in Types,1
 Limiting conversion size offers a practical way to avoid CVE-2020-10735,Built-in Types,1
 The limit is applied to the number of digit characters in the input or output string when a non-linear conversion algorithm would be involved,Built-in Types,1
  Underscores and the sign are not counted towards the limit,Built-in Types,1
" When an operation would exceed the limit, a ValueError is raised: The default limit is 4300 digits as provided in sys",Built-in Types,1
int_info,Built-in Types,1
default_max_str_digits,Built-in Types,1
 The lowest limit that can be configured is 640 digits as provided in sys,Built-in Types,1
int_info,Built-in Types,1
str_digits_check_threshold,Built-in Types,1
 Verification:,Built-in Types,1
 The built-in string class provides the ability to do complex variable substitutions and value formatting via the format() method described in PEP 3101,String,2
  The Formatter class in the string module allows you to create and customize your own string formatting behaviors using the same implementation as the built-in format() method,String,2
 The str,String,2
"format() method and the Formatter class share the same syntax for format strings (although in the case of Formatter, subclasses can define their own format string syntax)",String,2
"  The syntax is related to that of formatted string literals, but it is less sophisticated and, in particular, does not support arbitrary expressions",String,2
 Format strings contain replacement fields surrounded by curly braces {},String,2
" Anything that is not contained in braces is considered literal text, which is copied unchanged to the output",String,2
"  If you need to include a brace character in the literal text, it can be escaped by doubling: {{ and }}",String,2
" The grammar for a replacement field is as follows: In less formal terms, the replacement field can start with a field_name that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field",String,2
" The field_name is optionally followed by a  conversion field, which is preceded by an exclamation point '!', and a format_spec, which is preceded by a colon ':'",String,2
  These specify a non-default format for the replacement value,String,2
 See also the Format Specification Mini-Language section,String,2
 The field_name itself begins with an arg_name that is either a number or a keyword,String,2
"  If its a number, it refers to a positional argument, and if its a keyword, it refers to a named keyword argument",String,2
"  If the numerical arg_names in a format string are 0, 1, 2, in sequence, they can all be omitted (not just some) and the numbers 0, 1, 2,  will be automatically inserted in that order",String,2
" Because arg_name is not quote-delimited, it is not possible to specify arbitrary dictionary keys (e",String,2
g,String,2
", the strings '10' or ':-]') within a format string",String,2
 The arg_name can be followed by any number of index or attribute expressions,String,2
 An expression of the form ',String,2
"name' selects the named attribute using getattr(), while an expression of the form '[index]' does an index lookup using __getitem__()",String,2
 Some simple format string examples: The conversion field causes a type coercion before formatting,String,2
"  Normally, the job of formatting a value is done by the __format__() method of the value itself",String,2
"  However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting",String,2
"  By converting the value to a string before calling __format__(), the normal formatting logic is bypassed",String,2
" Three conversion flags are currently supported: '!s' which calls str() on the value, '!r' which calls repr() and '!a' which calls ascii()",String,2
" Some examples: The format_spec field contains a specification of how the value should be presented, including such details as field width, alignment, padding, decimal precision and so on",String,2
  Each value type can define its own formatting mini-language or interpretation of the format_spec,String,2
" Most built-in types support a common formatting mini-language, which is described in the next section",String,2
 A format_spec field can also include nested replacement fields within it,String,2
" These nested replacement fields may contain a field name, conversion flag and format specification, but deeper nesting is not allowed",String,2
  The replacement fields within the format_spec are substituted before the format_spec string is interpreted,String,2
 This allows the formatting of a value to be dynamically specified,String,2
 See the Format examples section for some examples,String,2
 Template strings provide simpler string substitutions as described in PEP 292,String,2
"  A primary use case for template strings is for internationalization (i18n) since in that context, the simpler syntax and functionality makes it easier to translate than other built-in string formatting facilities in Python",String,2
"  As an example of a library built on template strings for i18n, see the flufl",String,2
i18n package,String,2
" Template strings support $-based substitutions, using the following rules: Any other appearance of $ in the string will result in a ValueError being raised",String,2
 The string module provides a Template class that implements these rules,String,2
"  The methods of Template are: Here is an example of how to use a Template: Advanced usage: you can derive subclasses of Template to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings",String,2
"  To do this, you can override these class attributes: Alternatively, you can provide the entire regular expression pattern by overriding the class attribute pattern",String,2
"  If you do this, the value must be a regular expression object with four named capturing groups",String,2
"  The capturing groups correspond to the rules given above, along with the invalid placeholder rule: The methods on this class will raise ValueError if the pattern matches the template without one of these named groups matching",String,2
 Format specifications are used within replacement fields contained within a format string to define how individual values are presented (see Format String Syntax and Formatted string literals),String,2
 They can also be passed directly to the built-in format() function,String,2
  Each formattable type may define how the format specification is to be interpreted,String,2
" Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types",String,2
 A general convention is that an empty format specification produces the same result as if you had called str() on the value,String,2
 A non-empty format specification typically modifies the result,String,2
" The general form of a standard format specifier is: If a valid align value is specified, it can be preceded by a fill character that can be any character and defaults to a space if omitted",String,2
 It is not possible to use a literal curly brace ({ or }) as the fill character in a formatted string literal or when using the str,String,2
format() method,String,2
"  However, it is possible to insert a curly brace with a nested replacement field",String,2
  This limitation doesnt affect the format() function,String,2
" The meaning of the various alignment options is as follows: Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case",String,2
" The sign option is only valid for number types, and can be one of the following: The 'z' option coerces negative zero floating-point values to positive zero after rounding to the format precision",String,2
  This option is only valid for floating-point presentation types,String,2
 The '#' option causes the alternate form to be used for the conversion,String,2
  The alternate form is defined differently for different types,String,2
"  This option is only valid for integer, float and complex types",String,2
" For integers, when binary, octal, or hexadecimal output is used, this option adds the respective prefix '0b', '0o', '0x', or '0X' to the output value",String,2
" For float and complex the alternate form causes the result of the conversion to always contain a decimal-point character, even if no digits follow it",String,2
" Normally, a decimal-point character appears in the result of these conversions only if a digit follows it",String,2
" In addition, for 'g' and 'G' conversions, trailing zeros are not removed from the result",String,2
" The ',' option signals the use of a comma for a thousands separator",String,2
" For a locale aware separator, use the 'n' integer presentation type instead",String,2
 The '_' option signals the use of an underscore for a thousands separator for floating point presentation types and for integer presentation type 'd',String,2
"  For integer presentation types 'b', 'o', 'x', and 'X', underscores will be inserted every 4 digits",String,2
"  For other presentation types, specifying this option is an error",String,2
" width is a decimal integer defining the minimum total field width, including any prefixes, separators, and other formatting characters",String,2
" If not specified, then the field width will be determined by the content",String,2
" When no explicit alignment is given, preceding the width field by a zero ('0') character enables sign-aware zero-padding for numeric types",String,2
  This is equivalent to a fill character of '0' with an alignment type of '=',String,2
" The precision is a decimal integer indicating how many digits should be displayed after the decimal point for presentation types 'f' and 'F', or before and after the decimal point for presentation types 'g' or 'G'",String,2
"  For string presentation types the field indicates the maximum field size - in other words, how many characters will be used from the field content",String,2
  The precision is not allowed for integer presentation types,String,2
" Finally, the type determines how the data should be presented",String,2
" The available string presentation types are: The available integer presentation types are: In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except 'n' and None)",String,2
" When doing so, float() is used to convert the integer to a floating point number before formatting",String,2
 The available presentation types for float and Decimal values are: This section contains examples of the str,String,2
format() syntax and comparison with the old %-formatting,String,2
" In most of the cases the syntax is similar to the old %-formatting, with the addition of the {} and with : used instead of %",String,2
" For example, '%03",String,2
2f' can be translated to '{:03,String,2
2f}',String,2
" The new format syntax also supports new and different options, shown in the following examples",String,2
" Accessing arguments by position: Accessing arguments by name: Accessing arguments attributes: Accessing arguments items: Replacing %s and %r: Aligning the text and specifying a width: Replacing %+f, %-f, and % f and specifying a sign: Replacing %x and %o and converting the value to different bases: Using the comma as a thousands separator: Expressing a percentage: Using type-specific formatting: Nesting arguments and more complex examples:",String,2
" A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression (or if a given regular expression matches a particular string, which comes down to the same thing)",regex,3
" Regular expressions can be concatenated to form new regular expressions; if A and B are both regular expressions, then AB is also a regular expression",regex,3
" In general, if a string p matches A and another string q matches B, the string pq will match AB",regex,3
  This holds unless A or B contain low precedence operations; boundary conditions between A and B; or have numbered group references,regex,3
"  Thus, complex expressions can easily be constructed from simpler primitive expressions like the ones described here",regex,3
"  For details of the theory and implementation of regular expressions, consult the Friedl book [Frie09], or almost any textbook about compiler construction",regex,3
 A brief explanation of the format of regular expressions follows,regex,3
"  For further information and a gentler presentation, consult the Regular Expression HOWTO",regex,3
 Regular expressions can contain both special and ordinary characters,regex,3
" Most ordinary characters, like 'A', 'a', or '0', are the simplest regular expressions; they simply match themselves",regex,3
"  You can concatenate ordinary characters, so last matches the string 'last'",regex,3
"  (In the rest of this section, well write REs in this special style, usually without quotes, and strings to be matched 'in single quotes'",regex,3
") Some characters, like '|' or '(', are special",regex,3
" Special characters either stand for classes of ordinary characters, or affect how the regular expressions around them are interpreted",regex,3
" Repetition operators or quantifiers (*, +, ?, {m,n}, etc) cannot be directly nested",regex,3
" This avoids ambiguity with the non-greedy modifier suffix ?, and with other modifiers in other implementations",regex,3
" To apply a second repetition to an inner repetition, parentheses may be used",regex,3
" For example, the expression (?:a{6})* matches any multiple of six 'a' characters",regex,3
 The special characters are: The special sequences consist of '\' and a character from the list below,regex,3
" If the ordinary character is not an ASCII digit or an ASCII letter, then the resulting RE will match the second character",regex,3
"  For example, \$ matches the character '$'",regex,3
" Most of the standard escapes supported by Python string literals are also accepted by the regular expression parser: (Note that \b is used to represent word boundaries, and means backspace only inside character classes",regex,3
") ' ', '\U', and '\N' escape sequences are only recognized in Unicode patterns",regex,3
  In bytes patterns they are errors,regex,3
  Unknown escapes of ASCII letters are reserved for future use and treated as errors,regex,3
 Octal escapes are included in a limited form,regex,3
"  If the first digit is a 0, or if there are three octal digits, it is considered an octal escape",regex,3
" Otherwise, it is a group reference",regex,3
"  As for string literals, octal escapes are always at most three digits in length",regex,3
" The module defines several functions, constants, and an exception",regex,3
 Some of the functions are simplified versions of the full featured methods for compiled regular expressions,regex,3
  Most non-trivial applications always use the compiled form,regex,3
 Compiled regular expression objects support the following methods and attributes: Match objects always have a boolean value of True,regex,3
" Since match() and search() return None when there is no match, you can test whether there was a match with a simple if statement: Match objects support the following methods and attributes:",regex,3
