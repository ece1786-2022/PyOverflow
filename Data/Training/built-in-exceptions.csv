,content,topic
0,"In Python, all exceptions must be instances of a class that derives from BaseException",Built-in Exceptions
1,"  In a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived)",Built-in Exceptions
2,"  Two exception classes that are not related via subclassing are never equivalent, even if they have the same name",Built-in Exceptions
3, The built-in exceptions listed below can be generated by the interpreter or built-in functions,Built-in Exceptions
4,"  Except where mentioned, they have an “associated value” indicating the detailed cause of the error",Built-in Exceptions
5,  This may be a string or a tuple of several items of information (e,Built-in Exceptions
6,g,Built-in Exceptions
7,", an error code and a string explaining the code)",Built-in Exceptions
8,  The associated value is usually passed as arguments to the exception class’s constructor,Built-in Exceptions
9, User code can raise built-in exceptions,Built-in Exceptions
10,  This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error,Built-in Exceptions
11," The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException",Built-in Exceptions
12,  More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions,Built-in Exceptions
13,,Built-in Exceptions
14," When raising a new exception while another exception is already being handled, the new exception’s __context__ attribute is automatically set to the handled exception",Built-in Exceptions
15,"  An exception may be handled when an except or finally clause, or a with statement, is used",Built-in Exceptions
16, This implicit exception context can be supplemented with an explicit cause by using from with raise: The expression following from must be an exception or None,Built-in Exceptions
17, It will be set as __cause__ on the raised exception,Built-in Exceptions
18," Setting __cause__ also implicitly sets the __suppress_context__ attribute to True, so that using raise new_exc from None effectively replaces the old exception with the new one for display purposes (e",Built-in Exceptions
19,g,Built-in Exceptions
20," converting KeyError to AttributeError), while leaving the old exception available in __context__ for introspection when debugging",Built-in Exceptions
21, The default traceback display code shows these chained exceptions in addition to the traceback for the exception itself,Built-in Exceptions
22, An explicitly chained exception in __cause__ is always shown when present,Built-in Exceptions
23, An implicitly chained exception in __context__ is shown only if __cause__ is None and __suppress_context__ is false,Built-in Exceptions
24," In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised",Built-in Exceptions
25,,Built-in Exceptions
26, User code can create subclasses that inherit from an exception type,Built-in Exceptions
27," It’s recommended to only subclass one exception type at a time to avoid any possible conflicts between how the bases handle the args attribute, as well as due to possible memory layout incompatibilities",Built-in Exceptions
28,,Built-in Exceptions
29, The following exceptions are used mostly as base classes for other exceptions,Built-in Exceptions
30,,Built-in Exceptions
31, The following exceptions are the exceptions that are usually raised,Built-in Exceptions
32, The following exceptions are kept for compatibility with previous versions; starting from Python 3,Built-in Exceptions
33,"3, they are aliases of OSError",Built-in Exceptions
34,,Built-in Exceptions
35, The following exceptions are used as warning categories; see the Warning Categories documentation for more details,Built-in Exceptions
36,,Built-in Exceptions
37, The following are used when it is necessary to raise multiple unrelated exceptions,Built-in Exceptions
38, They are part of the exception hierarchy so they can be handled with except like all other exceptions,Built-in Exceptions
39," In addition, they are recognised by except*, which matches their subgroups based on the types of the contained exceptions",Built-in Exceptions
40,,Built-in Exceptions
41, The class hierarchy for built-in exceptions is:,Built-in Exceptions
