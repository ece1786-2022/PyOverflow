,Topic,content
0,Built-in Exceptions,"['In Python, all exceptions must be instances of a class that derives from BaseException', '  In a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived)', '  Two exception classes that are not related via subclassing are never equivalent, even if they have the same name', ' The built-in exceptions listed below can be generated by the interpreter or built-in functions', '  Except where mentioned, they have an “associated value” indicating the detailed cause of the error', '  This may be a string or a tuple of several items of information (e', 'g', ', an error code and a string explaining the code)', '  The associated value is usually passed as arguments to the exception class’s constructor', ' User code can raise built-in exceptions', '  This can be used to test an exception handler or to report an error condition “just like” the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error', ' The built-in exception classes can be subclassed to define new exceptions; programmers are encouraged to derive new exceptions from the Exception class or one of its subclasses, and not from BaseException', '  More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions', '', ' When raising a new exception while another exception is already being handled, the new exception’s __context__ attribute is automatically set to the handled exception', '  An exception may be handled when an except or finally clause, or a with statement, is used', ' This implicit exception context can be supplemented with an explicit cause by using from with raise: The expression following from must be an exception or None', ' It will be set as __cause__ on the raised exception', ' Setting __cause__ also implicitly sets the __suppress_context__ attribute to True, so that using raise new_exc from None effectively replaces the old exception with the new one for display purposes (e', 'g', ' converting KeyError to AttributeError), while leaving the old exception available in __context__ for introspection when debugging', ' The default traceback display code shows these chained exceptions in addition to the traceback for the exception itself', ' An explicitly chained exception in __cause__ is always shown when present', ' An implicitly chained exception in __context__ is shown only if __cause__ is None and __suppress_context__ is false', ' In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised', '', ' User code can create subclasses that inherit from an exception type', ' It’s recommended to only subclass one exception type at a time to avoid any possible conflicts between how the bases handle the args attribute, as well as due to possible memory layout incompatibilities', '', ' The following exceptions are used mostly as base classes for other exceptions', '', ' The following exceptions are the exceptions that are usually raised', ' The following exceptions are kept for compatibility with previous versions; starting from Python 3', '3, they are aliases of OSError', '', ' The following exceptions are used as warning categories; see the Warning Categories documentation for more details', '', ' The following are used when it is necessary to raise multiple unrelated exceptions', ' They are part of the exception hierarchy so they can be handled with except like all other exceptions', ' In addition, they are recognised by except*, which matches their subgroups based on the types of the contained exceptions', '', ' The class hierarchy for built-in exceptions is:']"
