,Topic,content
0,Built-in Types,"['The following sections describe the standard types that are built into the interpreter', ' The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions', ' Some collection classes are mutable', '  The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but None', ' Some operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the repr() function or the slightly different str() function)', '  The latter function is implicitly used when an object is written by the print() function', '', ' Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below', ' By default, an object is considered true unless its class defines either a __bool__() method that returns False or a __len__() method that returns zero, when called with the object', ' 1  Here are most of the built-in objects considered false: Operations and built-in functions that have a Boolean result always return 0 or False for false and 1 or True for true, unless otherwise stated', ' (Important exception: the Boolean operations or and and always return one of their operands', ')', ' These are the Boolean operations, ordered by ascending priority: Notes: This is a short-circuit operator, so it only evaluates the second argument if the first one is false', ' This is a short-circuit operator, so it only evaluates the second argument if the first one is true', ' not has a lower priority than non-Boolean operators, so not a == b is interpreted as not (a == b), and a == not b is a syntax error', '', ' There are eight comparison operations in Python', '  They all have the same priority (which is higher than that of the Boolean operations)', '  Comparisons can be chained arbitrarily; for example, x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x < y is found to be false)', ' This table summarizes the comparison operations: Objects of different types, except different numeric types, never compare equal', ' The == operator is always defined but for some object types (for example, class objects) is equivalent to is', ' The <, <=, > and >= operators are only defined where they make sense; for example, they raise a TypeError exception when one of the arguments is a complex number', ' Non-identical instances of a class normally compare as non-equal unless the class defines the __eq__() method', ' Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods __lt__(), __le__(), __gt__(), and __ge__() (in general, __lt__() and __eq__() are sufficient, if you want the conventional meanings of the comparison operators)', ' The behavior of the is and is not operators cannot be customized; also they can be applied to any two objects and never raise an exception', ' Two more operations with the same syntactic priority, in and not in, are supported by types that are iterable or implement the __contains__() method', '', ' There are three distinct numeric types: integers, floating point numbers, and complex numbers', '  In addition, Booleans are a subtype of integers', '  Integers have unlimited precision', '  Floating point numbers are usually implemented using double in C; information about the precision and internal representation of floating point numbers for the machine on which your program is running is available in sys', 'float_info', '  Complex numbers have a real and imaginary part, which are each a floating point number', '  To extract these parts from a complex number z, use z', 'real and z', 'imag', ' (The standard library includes the additional numeric types fractions', 'Fraction, for rationals, and decimal', 'Decimal, for floating-point numbers with user-definable precision', ') Numbers are created by numeric literals or as the result of built-in functions and operators', '  Unadorned integer literals (including hex, octal and binary numbers) yield integers', '  Numeric literals containing a decimal point or an exponent sign yield floating point numbers', ""  Appending 'j' or 'J' to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts"", ' Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex', ' A comparison between numbers of different types behaves as though the exact values of those numbers were being compared', ' 2 The constructors int(), float(), and complex() can be used to produce numbers of a specific type', ' All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence): Notes: All numbers', 'Real types (int and float) also include the following operations: For additional numeric operations see the math and cmath modules', ' Also referred to as integer division', '  The resultant value is a whole integer, though the result’s type is not necessarily int', '  The result is always rounded towards minus infinity: 1//2 is 0, (-1)//2 is -1, 1//(-2) is -1, and (-1)//(-2) is 0', ' Not for complex numbers', '  Instead convert to floats using abs() if appropriate', ' Conversion from floating point to integer may round or truncate as in C; see functions math', 'floor() and math', 'ceil() for well-defined conversions', '  float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity', ' Python defines pow(0, 0) and 0 ** 0 to be 1, as is common for programming languages', ' The numeric literals accepted include the digits 0 to 9 or any Unicode equivalent (code points with the Nd property)', ' See https://www', 'unicode', 'org/Public/14', '0', '0/ucd/extracted/DerivedNumericType', 'txt for a complete list of code points with the Nd property', ' ', ' Python supports a concept of iteration over containers', '  This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration', '  Sequences, described below in more detail, always support the iteration methods', ' One method needs to be defined for container objects to provide iterable support: The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: Python defines several iterator objects to support iteration over general and specific sequence types, dictionaries, and other more specialized forms', '  The specific types are not important beyond their implementation of the iterator protocol', ' Once an iterator’s __next__() method raises StopIteration, it must continue to do so on subsequent calls', ' Implementations that do not obey this property are deemed broken', '', ' There are three basic sequence types: lists, tuples, and range objects', ' Additional sequence types tailored for processing of binary data and text strings are described in dedicated sections', '', ' Textual data in Python is handled with str objects, or strings', ' Strings are immutable sequences of Unicode code points', '  String literals are written in a variety of ways: Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal', ' String literals that are part of a single expression and have only whitespace between them will be implicitly converted to a single string literal', ' That is, (""spam "" ""eggs"") == ""spam eggs""', ' See String and Bytes literals for more about the various forms of string literal, including supported escape sequences, and the r (“raw”) prefix that disables most escape sequence processing', ' Strings may also be created from other objects using the str constructor', ' Since there is no separate “character” type, indexing a string produces strings of length 1', ' That is, for a non-empty string s, s[0] == s[0:1]', ' There is also no mutable string type, but str', 'join() or io', 'StringIO can be used to efficiently construct strings from multiple fragments', '', ' The core built-in types for manipulating binary data are bytes and bytearray', ' They are supported by memoryview which uses the buffer protocol to access the memory of other binary objects without needing to make a copy', ' The array module supports efficient storage of basic data types like 32-bit integers and IEEE754 double-precision floating values', '', ' A set object is an unordered collection of distinct hashable objects', ' Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference', ' (For other containers see the built-in dict, list, and tuple classes, and the collections module', ') Like other collections, sets support x in set, len(set), and for x in set', '  Being an unordered collection, sets do not record element position or order of insertion', '  Accordingly, sets do not support indexing, slicing, or other sequence-like behavior', ' There are currently two built-in set types, set and frozenset', ' The set type is mutable — the contents can be changed using methods like add() and remove()', '  Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set', '  The frozenset type is immutable and hashable — its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set', "" Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: {'jack', 'sjoerd'}, in addition to the set constructor"", ' The constructors for both classes work the same:', ' A mapping object maps hashable values to arbitrary objects', ' Mappings are mutable objects', '  There is currently only one standard mapping type, the dictionary', '  (For other containers see the built-in list, set, and tuple classes, and the collections module', ') A dictionary’s keys are almost arbitrary values', '  Values that are not hashable, that is, values containing lists, dictionaries or other mutable types (that are compared by value rather than by object identity) may not be used as keys', ' Values that compare equal (such as 1, 1', '0, and True) can be used interchangeably to index the same dictionary entry', '', ' Python’s with statement supports the concept of a runtime context defined by a context manager', '  This is implemented using a pair of methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends: Python defines several context managers to support easy thread synchronisation, prompt closure of files or other objects, and simpler manipulation of the active decimal arithmetic context', ' The specific types are not treated specially beyond their implementation of the context management protocol', ' See the contextlib module for some examples', ' Python’s generators and the contextlib', 'contextmanager decorator provide a convenient way to implement these protocols', '  If a generator function is decorated with the contextlib', 'contextmanager decorator, it will return a context manager implementing the necessary __enter__() and __exit__() methods, rather than the iterator produced by an undecorated generator function', ' Note that there is no specific slot for any of these methods in the type structure for Python objects in the Python/C API', ' Extension types wanting to define these methods must provide them as a normal Python accessible method', ' Compared to the overhead of setting up the runtime context, the overhead of a single class dictionary lookup is negligible', '', ' The core built-in types for type annotations are Generic Alias and Union', '', ' The interpreter supports several other kinds of objects', ' Most of these support only one or two operations', '', ' The implementation adds a few special read-only attributes to several object types, where they are relevant', '  Some of these are not reported by the dir() built-in function', '', ' CPython has a global limit for converting between int and str to mitigate denial of service attacks', ' This limit only applies to decimal or other non-power-of-two number bases', ' Hexadecimal, octal, and binary conversions are unlimited', ' The limit can be configured', ' The int type in CPython is an abitrary length number stored in binary form (commonly known as a “bignum”)', ' There exists no algorithm that can convert a string to a binary integer or a binary integer to a string in linear time, unless the base is a power of 2', ' Even the best known algorithms for base 10 have sub-quadratic complexity', "" Converting a large value such as int('1' * 500_000) can take over a second on a fast CPU"", ' Limiting conversion size offers a practical way to avoid CVE-2020-10735', ' The limit is applied to the number of digit characters in the input or output string when a non-linear conversion algorithm would be involved', '  Underscores and the sign are not counted towards the limit', ' When an operation would exceed the limit, a ValueError is raised: The default limit is 4300 digits as provided in sys', 'int_info', 'default_max_str_digits', ' The lowest limit that can be configured is 640 digits as provided in sys', 'int_info', 'str_digits_check_threshold', ' Verification:']"
