Id,PostTypeId,AcceptedAnswerId,ParentId,CreationDate,DeletionDate,Score,ViewCount,Body,OwnerUserId,OwnerDisplayName,LastEditorUserId,LastEditorDisplayName,LastEditDate,LastActivityDate,Title,Tags,AnswerCount,CommentCount,FavoriteCount,ClosedDate,CommunityOwnedDate,ContentLicense
"166198","1","166246","","2008-10-03 10:11:16","","6","4442","<p>I'm writing a little debug app for a bit of kit we're developing and I'd like to roll it out to a few users to see if they can provoke any crashes. Does anyone know a way of effectively wrapping a wxPython app to catch any and all unhandled exceptions that would cause the app to crash?</p>

<p>Ideally I'd want to capture all output (not just errors) and log it to a file. Any unhandled exceptions ought to log to the current file and then allow the exception to pass on as per usual (i.e. the logging process ought to be transparent).</p>

<p>I'm sure someone must have done something along these lines before, but I've not managed to turn up anything that looks useful via google.</p>
","15369","Jon Cage","15369","Jon Cage","2008-12-28 10:09:09","2008-12-28 10:09:09","How can I capture all exceptions from a wxPython application?","<python><exception><error-handling><wxwidgets><error-reporting>","4","0","0","","","CC BY-SA 2.5"
"1291438","1","1291463","","2009-08-18 02:08:47","","7","505","<p>From <a href=""https://stackoverflow.com/questions/1278705/python-when-i-catch-an-exception-how-do-i-get-the-type-file-and-line-number/1278740#1278740"">this question</a>, I'm now doing error handling one level down. That is, I call a function which calls another larger function, and I want where it failed in that larger function, not in the smaller function. Specific example. Code is:</p>

<pre><code>import sys, os

def workerFunc():
    return 4/0

def runTest():
    try:
        print workerFunc()
    except:
        ty,val,tb = sys.exc_info()
        print ""Error: %s,%s,%s"" % (
            ty.__name__,
            os.path.split(tb.tb_frame.f_code.co_filename)[1],
            tb.tb_lineno)

runTest()
</code></pre>

<p>Output is:</p>

<pre><code>Error: ZeroDivisionError,tmp2.py,8
</code></pre>

<p>but line 8 is ""print workerFunc()"" - I know that line failed, but I want the line before:</p>

<pre><code>Error: ZeroDivisionError,tmp2.py,4
</code></pre>
","15055","","-1","","2017-05-23 11:44:08","2009-08-18 02:26:16","When I catch an exception, how do I get the type, file, and line number of the previous frame?","<python><exception><exception-handling><error-handling>","3","0","","","","CC BY-SA 2.5"
"1350671","1","1350981","","2009-08-29 06:35:17","","168","53449","<p>My background is in C# and I've just recently started programming in Python. When an exception is thrown I typically want to wrap it in another exception that adds more information, while still showing the full stack trace. It's quite easy in C#, but how do I do it in Python?</p>

<p>Eg. in C# I would do something like this:</p>

<pre><code>try
{
  ProcessFile(filePath);
}
catch (Exception ex)
{
  throw new ApplicationException(""Failed to process file "" + filePath, ex);
}
</code></pre>

<p>In Python I can do something similar:</p>

<pre><code>try:
  ProcessFile(filePath)
except Exception as e:
  raise Exception('Failed to process file ' + filePath, e)
</code></pre>

<p>...but this loses the traceback of the inner exception!</p>

<p><strong>Edit:</strong> I'd like to see both exception messages and both stack traces and correlate the two. That is, I want to see in the output that exception X occurred here and then exception Y there - same as I would in C#. Is this possible in Python 2.6? Looks like the best I can do so far (based on Glenn Maynard's answer) is:</p>

<pre><code>try:
  ProcessFile(filePath)
except Exception as e:
  raise Exception('Failed to process file' + filePath, e), None, sys.exc_info()[2]
</code></pre>

<p>This includes both the messages and both the tracebacks, but it doesn't show which exception occurred where in the traceback.</p>
","20336","","20336","","2009-08-31 00:16:30","2020-08-27 21:49:32","""Inner exception"" (with traceback) in Python?","<python><exception><error-handling>","9","2","0","","","CC BY-SA 2.5"
"1483429","1","1483488","","2009-09-27 11:48:19","","1239","1557636","<p>How do I print the error/exception in the <code>except:</code> block?</p>
<pre><code>try:
    ...
except:
    print(exception)
</code></pre>
","179736","","365102","","2022-06-20 06:52:27","2022-09-22 16:48:37","How do I print an exception in Python?","<python><exception><error-handling>","11","1","0","","","CC BY-SA 4.0"
"1508467","1","1508761","","2009-10-02 09:07:15","","216","202692","<p>How can I log my Python exceptions?</p>
<pre><code>try:
    do_something()
except:
    # How can I log my exception here, complete with its traceback?
</code></pre>
","179736","","10669875","","2022-10-02 14:42:00","2022-11-17 21:34:51","Log exception with traceback in Python","<python><exception><logging><error-handling>","12","0","0","","","CC BY-SA 4.0"
"2739582","1","2739767","","2010-04-29 17:53:19","","18","4650","<p>When is exception handling more preferable than condition checking? There are many situations where I can choose using one or the other.</p>

<p>For example, this is a summing function which uses a custom exception:</p>

<pre><code># module mylibrary 
class WrongSummand(Exception):
    pass

def sum_(a, b):
    """""" returns the sum of two summands of the same type """"""
    if type(a) != type(b):
        raise WrongSummand(""given arguments are not of the same type"")
    return a + b


# module application using mylibrary
from mylibrary import sum_, WrongSummand

try:
    print sum_(""A"", 5)
except WrongSummand:
    print ""wrong arguments""
</code></pre>

<p>And this is the same function, which avoids using exceptions</p>

<pre><code># module mylibrary
def sum_(a, b):
    """""" returns the sum of two summands if they are both of the same type """"""
    if type(a) == type(b):
        return a + b


# module application using mylibrary
from mylibrary import sum_

c = sum_(""A"", 5)
if c is not None:
    print c
else:
    print ""wrong arguments""
</code></pre>

<p>I think that using conditions is always more readable and manageable. Or am I wrong? What are the proper cases for defining APIs which raise exceptions and why?</p>
","322818","","20984","","2011-11-03 15:38:56","2013-12-16 23:40:57","Condition checking vs. Exception handling","<python><exception><error-handling><conditional-statements>","7","1","0","2016-07-29 05:21:00","","CC BY-SA 2.5"
"3891804","1","3891852","","2010-10-08 15:01:59","","313","241292","<p>I am trying to raise a Warning in Python without making the program crash / stop / interrupt.</p>

<p>I use the following simple function to check if the user passed a non-zero number to it. If so, the program should warn them, but continue as per normal. It should work like the code below, but should use class <code>Warning()</code>, <code>Error()</code> or <code>Exception()</code> instead of printing the warning out manually.</p>

<pre><code>def is_zero(i):
   if i != 0:
     print ""OK""
   else:
     print ""WARNING: the input is 0!""
   return i
</code></pre>

<p>If I use the code below and pass 0 to the function, the program crashes and the value is never returned. Instead, I want the program to continue normally and just inform the user that he passed 0 to the function.</p>

<pre><code>def is_zero(i):
   if i != 0:
     print ""OK""
   else:
     raise Warning(""the input is 0!"")
   return i
</code></pre>

<p>I want to be able to test that a warning has been thrown testing it by unittest. If I simply print the message out, I am not able to test it with assertRaises in unittest.</p>
","377313","","6118556","","2020-05-29 21:52:53","2022-05-18 08:50:01","Raise warning in Python without interrupting program","<python><exception><error-handling><warnings>","4","3","0","","","CC BY-SA 4.0"
"4096087","1","4096453","","2010-11-04 11:18:54","","18","11527","<p>There is a list <a href=""http://docs.python.org/library/exceptions.html#exception-hierarchy"" rel=""noreferrer"">standard python exceptions</a> that we should watch out, but I don't think these are the ones we should raise ourselves, cause they are rarely applicable.</p>

<p>I'm curious if there exists a list within standard python library, with exceptions similar to .NET's <a href=""http://msdn.microsoft.com/en-us/library/system.applicationexception.aspx"" rel=""noreferrer"">ApplicationException</a>, <a href=""http://msdn.microsoft.com/en-us/library/system.argumentnullexception.aspx"" rel=""noreferrer"">ArgumentNullException</a>, <a href=""http://msdn.microsoft.com/en-us/library/system.argumentoutofrangeexception.aspx"" rel=""noreferrer"">ArgumentOutOfRangeException</a>, <a href=""http://msdn.microsoft.com/en-us/library/system.invalidoperationexception.aspx"" rel=""noreferrer"">InvalidOperationException</a> — exceptions that we can raise ourselves?</p>

<p>Or is there different, more pythonic way to handle common error cases, than raising standard exceptions? </p>

<p>EDIT: I'm not asking on how to handle exceptions but what types I can and should raise where needed.</p>
","260480","","260480","","2012-04-22 12:30:58","2012-11-14 12:14:00","Where's the standard python exception list for programmes to raise?","<python><exception><error-handling>","4","0","0","","","CC BY-SA 3.0"
"4572362","1","4572378","","2010-12-31 21:22:35","","10","14015","<p>I'm trying to call a function.  One of the parameters is a variable with attributes (which I know because of the AttributeError exception I got).  I don't know the exact attributes this variable is supposed to have, so I was wondering if there was some way I can see some extra details about the exception, for example, which attribute it couldn't find.  Thanks.</p>
","559495","","","","","2010-12-31 21:54:02","Is there someway I can get specific details about an AttributeError exception in Python?","<python><exception><attributes><error-handling>","3","5","0","","","CC BY-SA 2.5"
"4676957","1","","","2011-01-13 05:03:38","","5","220","<p>When do you use each? I find that I'm using if's a lot more than exceptions. It seems like I'm catching the exceptions using my ""ifs"", before I even get them.  There are ifs all over my code.</p>
","179736","","","","","2011-01-13 06:37:17","When should you check for errors using ""if"" , and when should you use exceptions?","<python><exception><error-handling><conditional>","4","1","","2016-07-29 05:20:37","","CC BY-SA 2.5"
"6828160","1","6828204","","2011-07-26 09:46:05","","8","5553","<p>I've implemented a little validation library which is used like this:</p>

<pre><code>domain_object.validate()

# handle validation errors in some way ...
if domain_object.errors:
    for error in domain_object.errors:
        print(error)
</code></pre>

<p><code>validate()</code> performs the checks and populates a list called <code>errors</code>.</p>

<p>I know from other validation libraries that they throw exception when validation is performed unsuccessfully. Error messages would be passed as an exception property.</p>

<p>What approach is better? Is it advantageous to throw validation exceptions?</p>
","238134","","238134","","2011-07-26 11:28:48","2011-07-26 12:52:54","Should a validate method throw an exception?","<python><validation><exception><error-handling>","2","2","0","","","CC BY-SA 3.0"
"7375492","1","7376895","","2011-09-11 00:12:05","","9","1651","<p>I'm aware that the <a href=""http://docs.python.org/library/sys.html#sys.exc_info"" rel=""nofollow noreferrer"">sys.exc_info</a> documentation says to take care when dealing with traceback objects, but am still uncertain of how safe or unsafe some cases are.  Additionally, the documentation says ""Warning: Don't do this!"", followed immediately by ""Note: Actually, its ok"", which further confuses me.</p>

<p>In any case, the docs and ""<a href=""https://stackoverflow.com/questions/1658293/why-is-there-a-need-to-explicitly-delete-the-sys-exc-info-traceback-in-python"">Why is there a need to explicitly delete the sys.exc_info() traceback in Python?</a>"" (Alex Martelli's answer), seem to imply its only local variables that reference the traceback value assigned to them that cause a problem.</p>

<p>This leaves me with a few questions:</p>

<ol>
<li>What, exactly, does ""local variable"" mean in this context?  I'm struggling for terminology, but: does this mean only variables created in the function, or also variable created by the function parameters?  What about other variables in scope, e.g, globals or self?</li>
<li>How do closures affect the potential circular references of the traceback?  The general thought being: a closure can reference everything its enclosing function can, so a traceback with a reference to a closure can end up referencing quite a bit.  I'm struggling to come up with a more concrete example, but some combination of: an inner function, code that returns sys.exc_info(), with expensive-short-lived-objects in scope somewhere.</li>
</ol>

<p>Feel free to tell me where my conclusions or assumptions are wrong, as I've reasoned myself into belief and non-belief of my own statements several times as I've written this :).</p>

<p>While I'd like answers to my specific examples, I'm also asking for general advice, knowledge, or war stories on how to safely deal with tracebacks in more esoteric situations (e.g, you have to run a loop and want to accumulate any raised exceptions, you have to spawn a new thread and need to report any of its raised exceptions, you have to create closures and callbacks and have to communicate back raised exceptions, etc).</p>

<p><strong>Example 1: an inner function that does error handling</strong></p>

<pre><code>def DoWebRequest():
  thread, error_queue = CreateThread(ErrorRaisingFunc)
  thread.start()
  thread.join()
  if not error_queue.empty():
    # Purposefully not calling error_queue.get() for illustrative purposes
    print 'error!'

def CreateThread(func):
  error_queue = Queue.Queue()
  def Handled():
    try:
      func()
    except Exception:
      error_queue.put(sys.exc_info())
  thread = threading.Thread(target=Handled)
  return thread, error_queue
</code></pre>

<p>Does the <code>Handled()</code> closure cause any raised exception to reference <code>error_queue</code> and result in a circular reference because <code>error_queue</code> also contains the traceback?  Is removing the traceback from <code>error_queue</code> (i.e., calling <code>.get()</code>) enough to eliminate the circular-reference?</p>

<p><strong>Example 2: a long lived object in scope of exc_info, or returning exc_info</strong></p>

<pre><code>long_lived_cache = {}

def Alpha(key):
  expensive_object = long_lived_cache.get(key)
  if not expensive_object:
    expensive_object = ComputeExpensiveObject()
    long_lived_cache[key] = expensive_object

  exc_info = AlphaSub(expensive_object)
  if exc_info:
    print 'error!', exc_info

def AlphaSub(expensive_object):
  try:
    ErrorRaisingFunc(expensive_object)
    return None
  except Exception:
    return sys.exc_info()
</code></pre>

<p>Does the raised exception of <code>AlphaSub()</code> have a reference to <code>expensive_object</code>, and, because <code>expensive_object</code> is cached, the traceback never goes away?  If so, how does one break such a cycle?</p>

<p>Alternatively, <code>exc_info</code> contains the <code>Alpha</code> stack frame, and the <code>Alpha</code> stack frame contains the reference to <code>exc_info</code>, resulting in a circular reference.  If so, how does one break such a cycle?</p>
","36805","","355230","","2017-06-21 17:56:36","2017-06-21 17:56:36","Proper care and safety when dealing with traceback objects from sys.exc_info()","<python><exception><error-handling><circular-reference>","1","0","0","","","CC BY-SA 3.0"
"8491194","1","8491237","","2011-12-13 14:52:38","","2","14372","<p>I want to return an error code when the following error gets raised:</p>

<pre><code>Traceback (most recent call last):
 File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
 File ""UserManagementRemote.py"", line 202, in create_group
  ssh.connect(hostname, username=user, password=remotepass)
 File ""/usr/lib/python2.6/site-packages/paramiko/client.py"", line 290, in connect
   sock.connect(addr)
 File ""&lt;string&gt;"", line 1, in connect
socket.error: [Errno 113] No route to host
&gt;&gt;&gt;
</code></pre>

<p>But I'm currently having trouble catching the error raised.</p>

<pre><code>try:
   ssh = paramiko.SSHClient()
   ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
   ssh.connect(hostname, username=user, password=remotepass)
except paramiko.AuthenticationException:
   return 259
except socket.error:
   return 261
chan = ssh.get_transport().open_session()
chan.exec_command(command)
codest = chan.recv_exit_status()
ssh.close()
return codest
</code></pre>

<p>Resulting on this:</p>

<pre><code>Traceback (most recent call last):
File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
File ""UserManagementRemote.py"", line 207, in create_group
  except socket.error:
NameError: global name 'socket' is not defined
&gt;&gt;&gt;
</code></pre>

<p>Any ideas?</p>
","1095953","","","","","2013-01-29 16:49:04","how to handle socket errors as exceptions in python + paramiko?","<python><exception><error-handling><paramiko>","1","2","0","","","CC BY-SA 3.0"
"10103296","1","","","2012-04-11 09:30:21","","6","1007","<p>I am writing some code which can generate Exceptions deep in the stack, and I have a layer nearer the top which catches these exceptions and sends them off for processing by an error handling module.  What I would like is for the error handling module to be able to print the stack trace into its error log, but I'm finding it difficult to work out what the way to do this is.</p>

<p>Some notes on the background:</p>

<ul>
<li><p>The code is multi-threaded, so I'm not certain of the behaviour of sys.last_traceback</p></li>
<li><p>I have tried capturing the stack in the constructor of the exception itself.  sys.last_traceback is sometimes None in this case (since it only exists in the case of unhandled exceptions), and not always correct.  I am currently toying with using</p>

<p>self.stack = traceback.format_stack()[:-2]</p></li>
</ul>

<p>in the constructor of the exception, and while this looks promising in terms of information, it doesn't feel like the ""right"" way to do it</p>

<ul>
<li><p>All examples of how to do this that I've been able to find show how to print the stack trace in the except block, not in some later error handling module, and this appears to be different in behaviour from what I want.  (see, for example, <a href=""https://stackoverflow.com/questions/1156023/print-current-call-stack-in-python"">Print current call stack from a method in Python code</a>)</p></li>
<li><p>I've mined the traceback module in the python docs (<a href=""http://docs.python.org/library/traceback.html"" rel=""nofollow noreferrer"">http://docs.python.org/library/traceback.html</a>), and haven't been able to figure out whether this even does what I want.  It seems mostly concerned with formatting tracebacks as you might retrieve from sys.last_traceback.  It has some examples of usage, and none of them line up with what I'm trying to do.</p></li>
</ul>

<p>I don't believe that I'm the first person to ever want to do this, so I must be missing something.  Any pointers in the right direction much appreciated.</p>
","416340","","-1","","2017-05-23 12:16:21","2012-04-11 13:38:06","Correct way to handle Exception Stack Traces in Python","<python><exception><error-handling><stack-trace><printstacktrace>","3","3","0","","","CC BY-SA 3.0"
"11173945","1","","","2012-06-23 23:56:25","","0","124","<p>I've created new exception class and I like to give it representation of errors like in OSError class. Here is what I want:</p>

<pre><code>&gt;&gt;&gt; raise(MyError(1, 'info'))
MyError: [Errno 1] predefined text: info
</code></pre>

<p>What should I do? Can I do this if I inherit from base Exception class? Here is what I've tried (example from module for work with gnulib):</p>

<pre><code>class GNULibError(Exception):
  '''Exception handler for GNULib classes.'''

  def __init__(self, errno, errinfo=None):
    '''Each error has following parameters:
    errno: code of error; used to catch error type
      1: destination directory does not exist: &lt;destdir&gt;
      2: configure file does not exist: &lt;configure.ac&gt;
      3: selected module does not exist: &lt;module&gt;
      4: &lt;cache&gt; is expected to contain gl_M4_BASE([m4base])
      5: missing sourcebase argument
      6: missing docbase argument
      7: missing testsbase argument
      8: missing libname argument
    errinfo: additional info'''
    self.errno = errno; self.errinfo = errinfo
    self.args = (self.errno, self.errinfo)

  def __str__(self):
    errors = \
    [ # Begin list of errors
      ""destination directory does not exist: %s"" % self.errinfo,
      ""configure file does not exist: %s"" % self.errinfo,
      ""selected module does not exist: %s"" % self.errinfo,
      ""%s is expected to contain gl_M4_BASE([%s])"" % \
        (os.path.join(self.errinfo, 'gnulib-comp.m4'), self.errinfo),
      ""missing sourcebase argument; cache file doesn't contain it,""
        +"" so you might have to set this argument"",
      ""missing docbase argument; you might have to create GNULibImport"" \
        +"" instance with mode 0 and docbase argument"",
      ""missing testsbase argument; cache file doesn't contain it,""
        +"" so you might have to set this argument""
      ""missing libname argument; cache file doesn't contain it,""
        +"" so you might have to set this argument"",
      ""dependencies and testflag 'default' cannot be used together"",
    ] # Complete list of errors
    if not PYTHON3:
      self.message = (b'[Errno %d] %s' % \
        (self.errno, errors[self.errno -1].encode(ENCS['default'])))
    else: # if PYTHON3
      self.message = ('[Errno %d] %s' % \
        (self.errno, errors[self.errno -1]))
    return(self.message)
</code></pre>

<p>It works wrong and returns just error name for Python 2 and empty string for Python 3. How can I get such behaviour as I want? Thanks!</p>
","974296","","","","","2012-06-24 00:55:41","Python: Exception in the separated module works wrong","<python><exception><exception-handling><error-handling><python-3.x>","1","0","","","","CC BY-SA 3.0"
"11865685","1","11865993","","2012-08-08 13:33:10","","39","164086","<p>I am trying to figure out how to use the <em>try</em> and <em>except</em> to handle a socket timeout.</p>
<pre><code>from socket import *

def main():
    client_socket = socket(AF_INET,SOCK_DGRAM)
    client_socket.settimeout(1)
    server_host = 'localhost'
    server_port = 1234
    while(True):
        client_socket.sendto('Message',(server_host,server_port))
        try:
            reply, server_address_info = client_socket.recvfrom(1024)
            print reply
        except socket.Timeouterror:
            # More code
</code></pre>
<p>The way I added the socket module was to import everything, but how do I handle exceptions?</p>
<p>In the documentation it says you can use socket.timeouterror, but that doesn't work for me.  Also, how would I write the try exception block if I did <code>import socket</code>? What is the difference in the imports?</p>
","779969","","63550","","2022-04-27 19:49:22","2022-04-27 20:00:27","Handling a timeout error in Python sockets","<python><sockets><exception><error-handling>","4","0","0","","","CC BY-SA 4.0"
"12283377","1","12283450","","2012-09-05 14:08:54","","5","1609","<p>I want to move a file, but in the case it is not found I should just ignore it. In all other cases the exception should be propagated. I have the following piece of Python code:</p>

<pre><code>try:
    shutil.move(old_path, new_path)
except IOError as e:
    if e.errno != 2: raise e
</code></pre>

<p>errno == 2 is the one, that has 'No such file or directory' description. I wonder if this is stable across Python versions and platforms, and etc.</p>
","18775","","1267329","","2012-09-05 14:46:06","2012-09-05 14:46:06","Are Python error numbers associated with IOError stable?","<python><api><exception><error-handling><errno>","1","0","","","","CC BY-SA 3.0"
"12488822","1","12488860","","2012-09-19 04:58:12","","0","876","<p>Codes like this:</p>

<pre><code>import socket, sys

try:
    address = ('127.0.0.1', 31500)  
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
    s.connect(address)  
except Exception:
    errType, errValue, errTraceback = sys.exc_info()
    # or
    # handle the Exception it throw out ?
</code></pre>

<p>What I want to get is the errcode like <code>10060</code> which means <code>connection time out</code>, thanks for any help :)</p>
","1068676","","","","","2012-09-19 05:02:00","When a socket error occur, how to get its errorcode from the exception?","<python><sockets><exception><error-handling><error-code>","1","1","","","","CC BY-SA 3.0"
"12550379","1","12550499","","2012-09-23 06:59:31","","3","168","<p>As far as I know, most of the errnos returned by python's exceptions are the same with the errnos in ""linux/errno.h"". But at sometimes, things are not like what I expect:</p>

<p>For example, when a socket connection throw a socket.timeout exception, the errno it returned should be 110, however, it's errno is always <code>None</code>:</p>

<pre><code>try:
    address = ('8.8.8.8', 12345)  
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    s.settimeout(1)
    s.connect(address)  
except EnvironmentError as e:
    print e.errno      # None
    print e.strerror   # ""time out""
</code></pre>

<p>Secondly, when a address-related exception is throwed, the errno will be negative, but the errnos in linux/errno.h are between 1 and 133:</p>

<pre><code>try:
    address = ('xxxxxxx', 12345)
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(address)
except socket.gaierror, v:
    print v[0]     # -5
</code></pre>

<p>In this case, will print -5.</p>

<p>I'm so confused of all of these errnos. :(</p>
","1068676","","","","","2012-09-23 07:27:13","Are errnos contained by python's exceptions the same with the errnos in ""linux/errno.h""?","<python><linux><sockets><exception><error-handling>","1","0","","","","CC BY-SA 3.0"
"14625405","1","14625448","","2013-01-31 12:06:01","","0","159","<p>I'm very new to python so I have very simple doubt. Here is my code:</p>

<pre><code>a=sri

try:
    print a
except Exception:
    print 'you have not put quotes for string'
else:
    print 'dont know what error it is'
</code></pre>

<p>How to write a manual exception/error handling for this?</p>
","1659450","","183791","","2013-01-31 12:06:51","2013-01-31 12:14:29","Exception in python","<python><exception><exception-handling><error-handling>","1","0","","","","CC BY-SA 3.0"
"15056187","1","","","2013-02-24 20:19:02","","0","952","<p>I'm new to programming and trying to work out the error handling at the moment.
But i keep running into the same problem. When I find an error i want to rerun the script again. The problem is, if you enter a good input after the first mistake, it still sees it as a bad input. please help me out.</p>

<pre><code>def new_user_name()
    print ""Choose a Username""
    username = input_str()

    try: 
        data = lite.connect(database)
        dat = data.cursor()
        dat.execute(""INSERT INTO Users('User_Name') VALUES(?)"", username);
        dat.rollback()
        return username
    except: 
        print ""The username %s is already in use"" % username
        time.sleep(2)
        new_user_name()
</code></pre>

<p>Can someone help me out, or link a nice tutorial about errorhandling?
It would me help out alot</p>
","2088173","","2610249","","2014-06-04 11:41:13","2014-06-04 11:41:13","Python problems with error handling (try, except)","<python><exception><exception-handling><error-handling><try-catch>","3","1","","","","CC BY-SA 3.0"
"15451472","1","","","2013-03-16 16:09:16","","10","5855","<p>Say I want to compare 2 variables with different data types: string and int. I have tested it both in Python 2.7.3 and Python 3.2.3 and neither throws exception. The result of comparison is <code>False</code>. Can I configure or run Python with different options to throw exception in this case?</p>

<pre><code>ks@ks-P35-DS3P:~$ python2
Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; a=""123""
&gt;&gt;&gt; b=123
&gt;&gt;&gt; a==b
False
&gt;&gt;&gt; 
ks@ks-P35-DS3P:~$ python3
Python 3.2.3 (default, Apr 12 2012, 19:08:59) 
[GCC 4.6.3] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; a=""123""
&gt;&gt;&gt; b=123
&gt;&gt;&gt; a==b
False
&gt;&gt;&gt; 
ks@ks-P35-DS3P:~$ 
</code></pre>
","72178","","","","","2013-03-16 17:19:58","Can I make Python throw exception when equal comparing different data types?","<python><exception><types><error-handling>","3","7","","","","CC BY-SA 3.0"
"15887038","1","","","2013-04-08 19:12:52","","31","60107","<p>I have to open &amp; write to about 10 different files all within the same loop.
e.g:</p>

<pre><code>for i in range(0,10):
    try:
        a=5
        file1 = open(""file1.txt"",'w+')
        file2 = open(""file2.txt"",'w+')
        #... etc

        print(str(a),file=file1)
        print(str(a)+""hi"",file=file2)
        # ... etc
    except: 
        #error handling
</code></pre>

<p>Now what I'd like to do is be able to get specific exception information such as what file was being opened/written to within the general exception. From my current understanding, I'd have to do something like this to achieve what I want:</p>

<pre><code>for i in range(0,5):
    a=5
    try:
        file1 = open(""file1.txt"",'w+')
        print(str(a),file=file1)
    except: 
        #error handling for file1
    try:
        file2 = open(""file2.txt"",'w+')
        print(str(a)+""hi"",file=file2)
    except: 
        #error handling for file2
</code></pre>

<p>...Which is going to get extremely clunky and unattractive when I have to do this for about 10 different files. Is there any way to get (for example) the filename info out of a general exception like in my first example? Basically so the exception could report things like ""error when writing to file1"" without a try/except specifically for file1 operations.</p>

<p>edit: This is a massive over-simplification of the data being written to the file. str(a) and str(a)+""hi"" are not really good representations of the data actually being written; file1 may need a hardcoded integer, where file2 may need a string formatted with multiple variables. to generalize the opening/writing process into a loop isn't going to work very nicely.</p>
","891876","","1252759","","2013-04-08 19:42:12","2018-01-15 10:01:28","Getting exception details in Python","<python><exception><error-handling><python-3.3>","4","0","0","","","CC BY-SA 3.0"
"15909709","1","15909871","","2013-04-09 18:28:13","","7","37009","<p>So, I've created a custom exception that I want to call in 2 different ways (a if/else statement, and a try/except statement). Here is the custom exception:</p>

<pre><code>class CustomException(Exception):   
   def __init__(self, value=None, *args, **kwargs):
     self.parameter = value
     for key, value in kwargs.items():
         setattr(self, key, value)

     for key, value in self.__dict__.items():
         print ""%s =&gt; %s"" % ( key, value ) 

   def __str__(self):
     return repr(self.parameter)
</code></pre>

<p>Here is how I am wanting to implement the custom exception:</p>

<pre><code>try:
   if something:
       #make an error
       ;lsdfj
   else:
       raise CustomException('this is my custom message', file='somefile.txt', var2='something')
except Exception, e:
   raise CustomException(e)
</code></pre>

<p>My issues, I believe, are two fold:</p>

<p>1: When the standard <code>NameError</code> that is thrown in the <code>try/except</code> block (due to <code>;lsdfj</code>), I want to pass <code>CustomExceptions</code> some extra parameters like 'file', just like the <code>if/else</code> implementation; how would I do that?</p>

<p>2: When the custom exception is raised (from the if/else statement being false), the CustomExceptions class ends up being called twice, because I raise it in the if/else block then it gets raised again within the <code>except:</code> section.  I don't know how to get around this. </p>

<p>So, in the above case, I want to call CustomException when the <code>if-statement</code> is not true, and I want to call it when there is a standard exception thrown inside the code block... but currently, <code>if something:</code> evaluates to false then the <code>CustomException</code> will be raised twice...</p>

<p>So I want the custom exception to be used unilaterally throughout my code for <code>if/else</code> conditions, and standard python exceptions... </p>

<p>I know this explanation was convoluted but I'm not sure how else to explain what I'm after... Any help would be much appreciated!  Thanks in advance!</p>
","281488","","","","","2013-04-09 21:11:12","python calling custom exceptions from if-statement and try-except","<python><exception><if-statement><error-handling><custom-exceptions>","2","0","0","","","CC BY-SA 3.0"
"16123529","1","16123643","","2013-04-20 18:03:46","","48","19637","<p>How to handle all but one exception?</p>

<pre><code>try:
    something
except &lt;any Exception except for a NoChildException&gt;:
    # handling
</code></pre>

<p>Something like this, except without destroying the original traceback:</p>

<pre><code>try:
    something
except NoChildException:
    raise NoChildException
except Exception:
    # handling
</code></pre>
","2277576","","674039","","2018-03-15 22:52:06","2022-09-15 07:48:02","Handling all but one exception","<python><exception><exception-handling><error-handling>","5","4","0","","","CC BY-SA 3.0"
"16777082","1","16777131","","2013-05-27 16:20:08","","6","4023","<p>I don't receive mails from errors happened in commands.</p>

<pre><code>python deebate\manage.py test_logging_errors --settings=deebate.settings.local --traceback
</code></pre>

<p>the command:</p>

<pre><code># -*- coding: utf-8 -*-
from django.core.management.base import BaseCommand, CommandError

import logging
logger = logging.getLogger(__name__)

    class Command(BaseCommand):
        help = ""test unicode and logging""

        def handle(self, *args, **options):
            print(u""|`»|Ð"".encode('ascii'))
</code></pre>

<p>Obviously this throws </p>

<pre><code>UnicodeEncodeError: 'ascii' codec can't encode character u'\xbb' in position 2: ordinal not in range(128)
</code></pre>

<p>I have <code>DEBUG = False</code></p>

<p>LOGGING setting is</p>

<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
       # I always add this handler to facilitate separating loggings
        'debug_log_file':{
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(ROOT_PROJECT_INTERNAL, 'logs', 'debug.log'),
            'maxBytes': '16777216', # 16megabytes
            'backupCount': 10,
            'formatter': 'verbose'
        },
        'warning_log_file':{
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(ROOT_PROJECT_INTERNAL, 'logs', 'warning.log'),
            'maxBytes': '16777216', # 16megabytes
            'backupCount': 10,
            'formatter': 'verbose'
        },
        'django_log_file':{
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(ROOT_PROJECT_INTERNAL, 'logs', 'django.log'),
            'maxBytes': '16777216', # 16megabytes
            'backupCount': 10,
            'formatter': 'verbose'
        },

    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins', 'django_log_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'core': {
            'handlers': ['mail_admins', 'debug_log_file', 'warning_log_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
</code></pre>

<p>and then i have Sentry too.</p>

<p><code>debug.log</code> and <code>warning.log</code> are regularly filled by the app.</p>

<p>How do i catch that exception? Why Django doesn't catch that?</p>
","72489","","","","","2016-03-30 12:02:06","Django: how to log exceptions from management commands?","<python><django><exception><error-handling><command>","2","5","0","","","CC BY-SA 3.0"
"16943404","1","16945699","","2013-06-05 15:06:12","","14","14955","<p>I use python multiprocessing library for an algorithm in which I have many workers processing certain data and returning result to the parent process. I use multiprocessing.Queue for passing jobs to workers, and second to collect results.</p>

<p>It all works pretty well, until worker fails to process some chunk of data. In the simplified example below each worker has two phases:</p>

<ul>
<li>initialization - can fail, in this case worker should be destroyed</li>
<li>data processing - processing a chunk of data can fail, in this case worker should skip this chunk and continue with next data.</li>
</ul>

<p>When either of this phases fails I get a deadlock after script completion. This code simulates my problem:</p>

<pre><code>import multiprocessing as mp
import random

workers_count = 5
# Probability of failure, change to simulate failures
fail_init_p = 0.2
fail_job_p = 0.3


#========= Worker =========
def do_work(job_state, arg):
    if random.random() &lt; fail_job_p:
        raise Exception(""Job failed"")
    return ""job %d processed %d"" % (job_state, arg)

def init(args):
    if random.random() &lt; fail_init_p:
        raise Exception(""Worker init failed"")
    return args

def worker_function(args, jobs_queue, result_queue):
    # INIT
    # What to do when init() fails?
    try:
        state = init(args)
    except:
        print ""!Worker %d init fail"" % args
        return
    # DO WORK
    # Process data in the jobs queue
    for job in iter(jobs_queue.get, None):
        try:
            # Can throw an exception!
            result = do_work(state, job)
            result_queue.put(result)
        except:
            print ""!Job %d failed, skip..."" % job
        finally:
            jobs_queue.task_done()
    # Telling that we are done with processing stop token
    jobs_queue.task_done()



#========= Parent =========
jobs = mp.JoinableQueue()
results = mp.Queue()
for i in range(workers_count):
    mp.Process(target=worker_function, args=(i, jobs, results)).start()

# Populate jobs queue
results_to_expect = 0
for j in range(30):
    jobs.put(j)
    results_to_expect += 1

# Collecting the results
# What if some workers failed to process the job and we have
# less results than expected
for r in range(results_to_expect):
    result = results.get()
    print result

#Signal all workers to finish
for i in range(workers_count):
    jobs.put(None)

#Wait for them to finish
jobs.join()
</code></pre>

<p>I have two question about this code:</p>

<ol>
<li>When <code>init()</code> fails, how to detect that worker is invalid and not to wait for it to finish?</li>
<li>When <code>do_work()</code> fails, how to notify parent process that less results should be expected in the results queue? </li>
</ol>

<p>Thank you for help!</p>
","186962","","","","","2015-01-16 15:09:27","Python multiprocessing and handling exceptions in workers","<python><exception><error-handling><parallel-processing><multiprocessing>","1","0","0","","","CC BY-SA 3.0"
"16986931","1","16987724","","2013-06-07 14:46:17","","0","347","<p>I recently switched from urlib2 to requests and I'm not sure how to deal with exceptions. What is best practice? My current code looks like this, but is not doing any good:</p>

<pre><code>try:
    response = requests.get(url)
except requests.ConnectionError , e:
    logging.error('ConnectionError = ' + str(e.code))
    return False
except requests.HTTPError , e:
    logging.error('HTTPError = ' + str(e.reason))
    return False
except requests.Timeout, e:
    logging.error('Timeout')
    return False
except requests.TooManyRedirects:
    logging.error('TooManyRedirects')
    return False
except Exception:
    import traceback
    logging.error('generic exception: ' + traceback.format_exc())
    return False
</code></pre>
","2139452","","","","","2013-06-07 15:27:13","Python: Handling requests exceptions the right way","<python><django><exception><error-handling><request>","1","2","0","","","CC BY-SA 3.0"
"18000985","1","18000986","","2013-08-01 17:42:14","","1","1461","<p>If I'm using the built-in python logging mechanism and I make a mistake, such as:</p>

<pre><code>logger.debug(""The result is"", result)
</code></pre>

<p>Then I get an unhelpful error message:</p>

<pre><code>Traceback (most recent call last):
File ""/usr/lib/python2.6/logging/__init__.py"", line 760, in emit
msg = self.format(record)
File ""/usr/lib/python2.6/logging/__init__.py"", line 644, in format
return fmt.format(record)
File ""/usr/lib/python2.6/logging/__init__.py"", line 432, in format
record.message = record.getMessage()
File ""/usr/lib/python2.6/logging/__init__.py"", line 302, in getMessage
msg = msg % self.args
TypeError: not all arguments converted during string formatting
</code></pre>

<p>Given I have a very large number of logging statements, is there any way to get a more helpful error message - one showing the line number where the mistake was made?</p>
","15055","","15055","","2013-08-01 17:53:45","2013-08-01 20:39:57","How do I get the line number for a logging TypeError of ""not all arguments converted during string formatting""?","<python><exception><logging><error-handling><error-logging>","2","0","0","","","CC BY-SA 3.0"
"18218697","1","18218823","","2013-08-13 20:33:15","","0","49","<p>I'm having some issues with a simple bit of code not working correctly and I'm totally baffled as to why...</p>

<pre><code>errors = open('ERROR(S).txt', 'w')

try: 
    execfile(""AEAPER.py"")
except Exception as e:
    errors.write(e)

errors.close()
</code></pre>

<p>I get the following error:</p>

<pre><code>Traceback (most recent call last):
  File ""C:\Sator.py"", line 45, in &lt;module&gt;
    periodically(2, -1, +1, callscripts)
  File ""C:\Sator.py"", line 27, in periodically
    s.run()
  File ""C:\Python27\lib\sched.py"", line 117, in run
    action(*argument)
  File ""C:\Sator.py"", line 36, in callscripts
    errors.write(e)
TypeError: expected a character buffer object
</code></pre>

<p>What is so wrong with my code and why is it doing that?</p>
","2487602","","","","","2013-08-13 20:46:00","Saving an error exceptions to file erroring out","<python><exception><python-2.7><exception-handling><error-handling>","3","0","","","","CC BY-SA 3.0"
"19060821","1","19060843","","2013-09-27 22:04:36","","0","837","<p>This is what I got:</p>

<pre><code>class E2Exception(Exception):
    pass


class E2OddException(E2Exception):
    pass


def raiser(x):
    if x == ""So sue me!"":
        raise E2Exception
    elif x != ""So sue me!"" and x not int:
        raise ValueError
    elif int(x) % 2 != 0:
        raise E2OddException()
    else:
        return None
</code></pre>

<p>How do we say if x is not convertible to an int, do this?</p>

<p>Also, I'm getting this error:</p>

<p>builtins.TypeError: exceptions must derive from BaseException</p>

<p>What does this mean?</p>

<p>Instructions below</p>

<hr>

<p><code>E2Exception</code>: an exception class that is a subclass of <code>Exception</code>.</p>

<p><code>E2OddException</code>: an exception class that is a subclass of <code>E2Exception</code>.</p>

<p><code>raiser</code>, a function that takes one parameter <code>x</code>, with the following behaviour:</p>

<ul>
<li><p>If <code>x == 'So sue me!'</code>, then <code>raiser(x)</code> raises <code>E2Exception</code> with the exception
message <code>""New Yorker""</code>.</p></li>
<li><p>If <code>x != 'So sue me!'</code>, but <code>x</code> is still not convertible 
to an int (by calling <code>int(x)</code>), then <code>raiser(x)</code> raises a <code>ValueError</code>, without any 
requirement on the exception message</p></li>
<li><p>If <code>x</code> converts to an odd <code>int</code>, <code>raiser(x)</code> raises an 
<code>E2OddException</code>, without any requirement on the exception message.</p></li>
<li><p>Otherwise, <code>raiser(x)</code> does nothing (no return, no print, nothing at all).</p></li>
</ul>
","2465068","","2465068","","2013-09-27 22:26:27","2013-09-27 22:26:27","Exception class code not working","<python><class><exception><error-handling><subclass>","2","1","","","","CC BY-SA 3.0"
"19192345","1","19192661","","2013-10-04 23:38:57","","1","1010","<p>From <a href=""http://docs.python.org/2/howto/sockets.html"" rel=""nofollow"">http://docs.python.org/2/howto/sockets.html</a></p>

<blockquote>
  <p>if a socket send or recv returns after handling 0 bytes, the
  connection has been broken.</p>
</blockquote>

<p>On the other hand, if the remote end of the TCP connection closes (or is killed), and socket.send() is called subsequently, one can see the following socket.error exception</p>

<blockquote>
  <p>socket.error: [Errno 104] Connection reset by peer</p>
</blockquote>

<p>Now my question is, what is the difference between ""<strong>connection has been broken</strong>"" and ""<strong>Connection reset by peer</strong>"". And exactly what is meant by ""connection has been broken"" == socket.send() returns zero. To me, not being able to send even a single character is as bad as a socket.error exception. Whatever event that causes socket.send to return zero, should have ideally raised a socket.error exception, so that the application does not have to deal with two different things (exception and return value zero).</p>
","1237287","","","","","2013-10-05 00:23:04","Python 2.7 TCP Sockets: socket.send() that returns zero versus socket.send() that raises socket.error exception?","<python><sockets><exception><python-2.7><error-handling>","1","0","","","","CC BY-SA 3.0"
"19579926","1","","","2013-10-25 02:03:39","","0","236","<pre><code>print(""Welcome to Hangman! Guess the mystery word with less than 6 mistakes!"")

words= ['utopian','fairy','tree','monday','blue'] 

while True:
        try:
                i=int(input(""Please enter an integer number (0&lt;=number&lt;10) to choose the word in the list: ""))
        except ValueError:
                print(""Empty input!"")
        break
if(words[i]):
        print(""The length of the word is: "" , len(words[i]))
</code></pre>

<p>So I was able to catch the value error for my Hangman program that I'm doing so far but then it occurred to me. It doesn't just catch the value error of an empty input but it also catches the value error if someone were to input a non-integer character like an alphabetical letter. I want it to do both, so how can I set up another exception that will print(""Please enter an integer!"")?</p>

<p>Dammit,I tried fixing the program by adding a few other lines that I came up with for the program and I added a ""break"" in but when I do that I can't an error stating that ""i"" is not defined. Now if I take it out and run the program, the loop continues even if the user enters an integer as their input.</p>
","","user2901609","","","","2013-10-25 02:36:48","Error exception handling python program","<python><exception><error-handling><try-catch>","1","5","","","","CC BY-SA 3.0"
"19736188","1","","","2013-11-01 22:07:36","","0","390","<p>I need to manage python errors. For example when I type:</p>

<pre><code>&gt;&gt;&gt; 1/0
</code></pre>

<p>I give back:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;pyshell#14&gt;"", line 1, in &lt;module&gt;
    1/0
ZeroDivisionError: division by zero
</code></pre>

<p>but I need to save this error in a variable.
I use try..except for this:</p>

<pre><code>&gt;&gt;&gt; try:
    f(0)
except Exception as err:
    print(err)
</code></pre>

<p>and see in output:</p>

<pre><code>division by zero
</code></pre>

<p>It's not enough for me. I need to error lines numbers like to IDLE (or other IDE)
(I use python 3.3 and can't use python 2.7)</p>
","2946523","","100297","","2013-11-01 22:08:43","2013-11-01 22:19:31","manage errors in python","<python><exception><python-3.x><error-handling>","2","1","0","2013-11-03 10:06:36","","CC BY-SA 3.0"
"19935597","1","19936154","","2013-11-12 17:13:37","","2","3039","<p>Me: I am running Python 2.3.3 without possibility to upgrade and i don't have much experience with Python. My method for learning is googling and reading tons of stackoverflow.</p>

<p>Background: I am creating a python script whose purpose is to take two directories as arguments and then perform comparisons/diff of all the files found within the two directories. The directories have sub-directories that also have to be included in the diff.
Each directory is a List and sub-directories are nested Lists and so on...</p>

<pre><code>the two directories:
oldfiles/
    a_tar_ball.tar
    a_text_file.txt
    nest1/
        file_in_nest
        nest1a/
            file_in_nest

newfiles/
    a_tar_ball.tar
    a_text_file.txt
    nest1/
        file_in_nest
        nest1a/
</code></pre>

<p>Problem: Normally all should go fine as all files in oldfiles should exist in newfiles but in the above example one of the 'file_in_nest' is missing in 'newfiles/'.
I wish to print an error message telling me which file that is missing but when i'm using the code structure below the current instance of my 'compare' function doesn't know any other directories but the closest one. I wonder if there is a built in error handling that can send information about files and directory up in the recursion ladder adding info to it as we go. If i would just print the filename of the missing file i would not know which one of them it might be as there are two 'file_in_nest' in 'oldfiles'</p>

<pre><code>def compare(file_tree)
    for counter, entry in enumerate(file_tree[0][1:]):
        if not entry in file_tree[1]
            # raise ""some"" error and send information about file back to the 
            # function calling this compare, might be another compare.
        elif not isinstance(entry, basestring):
            os.chdir(entry[0])
            compare(entry)
            os.chdir('..')
        else:
            # perform comparison (not relevant to the problem)

        # detect if ""some"" error has been raised
            # prepend current directory found in entry[0] to file information
            break

def main()
    file_tree = [['/oldfiles', 'a_tar_ball.tar', 'a_text_file.txt', \
                [/nest1', 'file_in_nest', [/nest1a', 'file_in_nest']], \
                'yet_another_file'], \
                ['/newfiles', 'a_tar_ball.tar', 'a_text_file.txt', \
                [/nest1', 'file_in_nest', [/nest1a']], \
                'yet_another_file']]

    compare(file_tree)

    # detect if ""some"" error has been raised and print error message
</code></pre>

<p>This is my first activity on stackoverflow other than reading som please tell me if i should improve on the question!</p>

<p>// Stefan</p>
","2837591","","2610249","","2014-06-04 12:08:46","2014-06-04 12:08:46","Python: error handling in recursive functions","<python><exception><recursion><exception-handling><error-handling>","1","3","","","","CC BY-SA 3.0"
"20030576","1","","","2013-11-17 12:18:10","","-2","573","<p>There are many at times we write code inside try: and except: block in Django. But my confusion is what to write inside exception: block or how to know what is the exact error and raise it.</p>

<p>For ex: In this particular case I am invoking an utility function from my views.py, and I have written like this.</p>

<pre><code>try:
    res = process_my_data(request, name, email)
except:
    import sys
    print sys.exc_value
</code></pre>

<p>Inside the process_my_data() definition I am doing some kind of DB operations. If it fails, and comes to except block what should I write here. I am not sure what to write that is why written <code>print sys.exc_value</code></p>
","1144868","","","","","2013-11-17 17:05:49","How to know and raise exact exception in Django views","<python><django><exception><error-handling>","1","4","","","","CC BY-SA 3.0"
"20582750","1","20582776","","2013-12-14 11:32:11","","4","2030","<p>I am just being curious about the syntax of python exceptions as I can't seem to understand when you are suppossed to use the syntax below to catch an exception.  </p>

<pre><code>try:
    """"""
      Code that can raise an exception...
    """"""
 except Exception as e:
     pass
</code></pre>

<p>and </p>

<pre><code>try:
    """"""
      Code that can raise an exception...
    """"""
 except Exception, e:
     pass
</code></pre>

<p>What is the difference?</p>
","898472","","606294","","2013-12-14 11:32:49","2016-10-31 20:04:27","Python exception syntax difference?","<python><exception><syntax><error-handling>","2","1","","2013-12-16 09:41:47","","CC BY-SA 3.0"
"21553327","1","21553825","","2014-02-04 13:02:51","","400","280827","<p>I often see comments on other Stack Overflow questions about how the use of <code>except: pass</code> is discouraged. Why is this bad? Sometimes I just don't care what the errors are and I want to just continue with the code.</p>
<pre><code>try:
    something
except:
    pass
</code></pre>
<p>Why is using an <code>except: pass</code> block bad? What makes it bad? Is it the fact that I <code>pass</code> on an error or that I <code>except</code> any error?</p>
","2911408","","1534017","","2020-07-05 10:00:05","2022-03-09 21:00:52","Why is ""except: pass"" a bad programming practice?","<python><exception><error-handling><try-catch>","19","4","0","","","CC BY-SA 4.0"
"24643648","1","24644183","","2014-07-09 00:28:25","","0","953","<p>I'd like to create a new exception for my Python module: RangeError. I would return this error when a value is out of an expected range.</p>

<p>My question is: should I derive the new error from the Exception class (as is suggested by the Python documentation) or should I derive it from the ValueError class (which makes more sense to me)?</p>

<p>What are the benefits and downsides to one option or the other? Will I be crippling future development if I derive it from the ValueError class?</p>

<p>(Note that this would not be for index out-of-range, as that's already handled by IndexError.)</p>

<p>Thanks,</p>
","1354930","","","","","2014-07-09 01:45:16","Python: Should a new RangeError exception be derived from the Exception class or from the ValueError class?","<python><exception><exception-handling><error-handling>","1","1","","2014-07-09 05:12:59","","CC BY-SA 3.0"
"25257932","1","25258097","","2014-08-12 06:53:04","","1","807","<p>I wrote a python script like this:</p>

<pre><code>#!/usr/bin/python
import sys
import requests

if len(sys.argv) != 2:
        print ""Usage: python %s &lt;IP-LIST&gt;"" % (sys.argv[0])
        sys.exit();

InputFile = sys.argv[1]
try:
    File = open(InputFile)
    for ip in File:
        IP = ip.rstrip()
        out = requests.get(""http://"" + IP, timeout=5)
        out.status_code

except (KeyboardInterrupt, SystemExit):
    print ""\nKeyboardInterruption with Ctrl+c signal""
except IOError as e:
    print ""The file \""%s\"" does not exist!"" % (sys.argv[1])
</code></pre>

<p>When url has nothing to respond the following output appears for me:</p>

<pre><code>The file ""list.txt"" does not exist!
</code></pre>

<p>Why? </p>
","2515498","","","","","2014-08-12 07:02:15","Python requests exceptions timeout","<python><exception><error-handling><timeout>","1","0","","","","CC BY-SA 3.0"
"25405327","1","25405972","","2014-08-20 12:55:42","","2","94","<p>let's say I have the following 3 scripts:</p>

<pre><code>script1.py
script2.py
script3.py
</code></pre>

<p>Lets say I get a traceback like this:</p>

<pre><code>Traceback (most recent call last):
File ""script1.py"", line xyz, in ...
...
File ""script2.py"", line xyz, in ...
...
File ""script3.py"", line xyz, in ...
...
AttributeError: 'NoneType' object has no attribute 'CoolAttribute'
</code></pre>

<p>I have several different exceptions that occur in script3.py. Is there a way to handle ANY of these exceptions in line xyz in script1.py without handling the exceptions in script2.py? I just want to handle the exceptions that stem from script3.py in one line in script1.py.</p>
","2177047","","","","","2014-08-20 13:26:09","Python exception handling and raising","<python><exception><error-handling><nested><raise>","1","4","","","","CC BY-SA 3.0"
"26059424","1","26059587","","2014-09-26 12:18:59","","18","35693","<h3>Snippet 1</h3>

<pre><code>do_magic() # Throws exception, doesn't execute do_foo and do_bar
do_foo()
do_bar()
</code></pre>

<h3>Snippet 2</h3>

<pre><code>try:
    do_magic() # Doesn't throw exception, doesn't execute do_foo and do_bar
    do_foo() 
    do_bar()
except:
    pass
</code></pre>

<h3>Snippet 3</h3>

<pre><code>try: do_magic(); except: pass
try: do_foo()  ; except: pass
try: do_bar()  ; except: pass
</code></pre>

<p>Is there a way to write code snippet 3 elegantly?</p>

<ul>
<li>if <code>do_magic()</code> fails or not, <code>do_foo()</code> and <code>do_bar()</code> should be executed.</li>
<li>if <code>do_foo()</code> fails or not, <code>do_bar()</code> should be executed.</li>
</ul>

<p>In Basic/Visual Basic/VBS, there's a statement called <code>On Error Resume Next</code> which does this.</p>
","864101","","864101","","2014-09-26 12:33:45","2022-04-27 10:20:20","On Error Resume Next in Python","<python><exception><error-handling>","7","4","0","","","CC BY-SA 3.0"
"26062054","1","","","2014-09-26 14:33:02","","1","3999","<p>I am trying to understand if I can handle the following error in python. </p>

<p>So I have a program which repeatedly calls the following line:</p>

<pre><code>candidate = urllib2.urlopen(absolute_path)
</code></pre>

<p>After running my program for some seconds, I turned off my <code>wifi</code> connection, and got the following error:</p>

<pre><code>File ""crawler.py"", line 28, in urlQuery
  candidate = urllib2.urlopen(absolute_path)
File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 127, in urlopen
  return _opener.open(url, data, timeout)
File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 404, in open
  response = self._open(req, data)
File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 422, in _open
'_open', req)
File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 382, in _call_chain
  result = func(*args)
File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 1214, in http_open
  return self.do_open(httplib.HTTPConnection, req)
File ""/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/urllib2.py"", line 1184, in do_open
  raise URLError(err)
urllib2.URLError: &lt;urlopen error [Errno 65] No route to host&gt;
</code></pre>

<p>Is there any way I can handle this error?</p>
","2809667","","","","","2014-09-27 05:46:28","URLError in Python","<python><exception><exception-handling><error-handling>","1","0","","","","CC BY-SA 3.0"
"27662707","1","","","2014-12-26 22:41:21","","3","1226","<p>Python's <code>try...except</code> construct allows one to catch more than one exception and do the same thing to each one (<code>except (Exception1, Exception2, ...):</code>), to do the same thing whether an Exception is raised or not (<code>finally:</code>) and to do something only if an exception is <em>not</em> raised (<code>else:</code>). Is there a way to handle each Exception separately, but then do the same thing (e.g. <code>sys.exit()</code>) if any of them occured? At the moment I am using this call separately for each <code>except</code>:</p>

<pre><code>try:
    np.loadtxt(filename, ...)
except ValueError as e:
     # Handle the ValueError with a custom message here
     sys.exit(1)
except FileNotFoundError as e:
     # Handle missing file here
     sys.exit(1)
except SomeOtherErrorThatMightConceivablyBeRaised:
     # Handle it
     sys.exit(1)
</code></pre>
","293594","","293594","","2014-12-26 23:17:23","2014-12-26 23:17:23","Python: do something for every Exception raised","<python><exception><error-handling>","1","1","","","","CC BY-SA 3.0"
"27978889","1","27979393","","2015-01-16 07:06:19","","3","9752","<p>If a file already exists how do I get rid of the error 17 and make a warning message instead?</p>

<pre><code>import os, sys

# Path to be created
path = ""/tmp/home/monthly/daily""

try:
   os.makedirs(path)
except OSError as e:
  if e.errno == 17:
     //do something

os.makedirs( path, 0755 );

print ""Path is created""
</code></pre>

<p>However it still shows the ERRNO 17 message. What can I do?</p>
","4460585","","2225682","","2015-01-16 07:52:58","2015-01-17 01:54:32","Python 2.6 File exists errno 17,","<python><python-2.7><exception><error-handling><path>","3","0","0","","","CC BY-SA 3.0"
"28144052","1","32411603","","2015-01-26 02:35:32","","0","2442","<p>I have recently installed predictionio for recommendations on vagrant box. I'm fairly new to it. When I try to run its python sample file import_eventserver, I run into the following error:</p>

<pre><code>C:\HashiCorp\Vagrant\PredictionIO-Vagrant-0.8.2\MyRecommendation&gt;python data/imp
ort_eventserver.py --access_key some_access_key
Namespace(access_key='some_access_key', file='./data/sample_movielens_data.txt', url='http://localhost:7070')
</code></pre>

<p>Importing data...</p>

<pre><code>Traceback (most recent call last):
  File ""data/import_eventserver.py"", line 76, in &lt;module&gt;
    import_events(client, args.file)
  File ""data/import_eventserver.py"", line 45, in import_events
    target_entity_id=data[1]
  File ""C:\Anaconda\lib\site-packages\predictionio-0.8.3-py2.7.egg\predictionio\
__init__.py"", line 243, in create_event
    event_time).get_response()
  File ""C:\Anaconda\lib\site-packages\predictionio-0.8.3-py2.7.egg\predictionio\
connection.py"", line 113, in get_response
    self._response = self.rfunc(tmp_response)
  File ""C:\Anaconda\lib\site-packages\predictionio-0.8.3-py2.7.egg\predictionio\
__init__.py"", line 120, in _acreate_resp
    (response.error, response.request))
predictionio.NotCreatedError: Exception happened: [Errno 10054] An existing conn
ection was forcibly closed by the remote host for request POST /events.json?acce
ssKey=some_access_key {'eventTime': '2015-01-26T02:16:36.285+0000', 'entityType': 'user', 'targetEntityType': '
item', 'targetEntityId': '2', 'entityId': '0', 'event': 'buy'} /events.json?acce
ssKey=enFymhjuV3ighOz9R3u3FuiWSHNgWch241WbaTaXpdXyNJbKp5tYWO5IplkxUvR7?eventTime
=2015-01-26T02%3A16%3A36.285%2B0000&amp;entityType=user&amp;targetEntityType=item&amp;target
EntityId=2&amp;entityId=0&amp;event=buy
</code></pre>

<p>Any ideas on how to know whats wrong here? Any help is appreciated. </p>
","2855827","","3270800","","2015-01-26 02:37:14","2015-09-05 09:37:51","Python exception: error: [Errno 10054] An existing connection was forcibly closed by the remote host","<python><exception><error-handling><prediction>","2","0","","","","CC BY-SA 3.0"
"28201043","1","29111439","","2015-01-28 19:46:27","","8","1739","<p><strong>Context</strong>: I have Flask routes defined for different API endpoints and each endpoint calls a controller class with certain parameters (uid, project_id, etc.). </p>

<pre><code>@app.route('/sample/route', methods=['POST'])
@require_json_payload
@require_fields({
    'pid',
    'params'
})
def route_handler(arg1, arg2):
    #input filtering
    ...

    try:
        proj_cntr.sample_method(
            pid         = pid,
            ...         = ...
        )
    except ProjCntrException:
        #handle error

    #response generation
    ...
</code></pre>

<p>The controller (proj_cntr) is responsible for determining, say, if the given PID is valid, wether the given user is allowed to perform the action, and other business logic validation. </p>

<p>I noticed that I am c/pasting a lot of code like this in different controllers:</p>

<pre><code>if not project_object:
    sys_logger.info('...')
    raise ProjCntrException('PID %d does not exist' % pid)
</code></pre>

<p>Putting these checks (validations) in decorators seems like the best thing to do. But I am not sure which error handling pattern is best practice should the validation not pass. </p>

<p><strong>1)</strong> Should I create specific custom exceptions (InvalidProjException, PermissionsException, etc.) for each decorator to raise? </p>

<p><strong>Concerns</strong>: The catch block of the caller method will look bloated. Also, is it good to make the assumption that the caller knows what exceptions the decorators of the callee raise?</p>

<p><strong>2)</strong> The decorator passes an extra error argument to the method and the method decides what exception to raise. This way the caller method is aware what exception type to expect and handle.</p>

<p><strong>Concerns</strong>: Approach seems a little over-engineered and messy.</p>

<p>Sorry for the verbose question. Any thoughts/ideas are greatly appreciated.</p>
","2509821","","2509821","","2015-01-28 20:07:06","2015-03-17 23:12:18","Is it a good pattern to raise exceptions in a python decorator?","<python><exception><error-handling><flask>","2","0","0","","","CC BY-SA 3.0"
"29453733","1","29454042","","2015-04-05 03:13:41","","6","10043","<p>I'm writing a program that writes data to an Excel file using the <code>xlsxwriter</code> module.</p>

<p>The code that opens the workbook is:</p>

<pre><code>excel = xlsxwriter.Workbook('stock.xlsx')
</code></pre>

<p>This used to work. Then I changed some stuff around in the bottom of the program (waaaaay after that line) and now it doesn't work, saying this:</p>

<pre><code>Exception ignored in: &lt;bound method Workbook.__del__ of &lt;xlsxwriter.workbook.Workbook object at 0x02C702B0&gt;&gt;
Traceback (most recent call last):
  File ""c:\python34\lib\site-packages\xlsxwriter\workbook.py"", line 147, in __del__
    raise Exception(""Exception caught in workbook destructor. ""
Exception: Exception caught in workbook destructor. Explicit close() may be required for workbook.
</code></pre>

<p>This has happened when I forget to close the file before running it again (as it is trying to write to a file that's open in Excel which won't work), but I don't even have Excel open and it does this.</p>

<p>How can I fix this? Do I need to restart or something?</p>

<p>Also, I tried to have a <code>try...except</code> loop to stop the program if the initialization doesn't work. Even with <code>except:</code> only, without a specific exception, it still completes the program unless I kill it manually. The script basically opens the Excel file, spends a long time downloading data from the Internet, and then writing that to the Excel file. I want it to stop if the initialization doesn't work so I don't have to wait for the script to complete (it can take up to 15 minutes). I'm pretty sure that it has something to do with the fact that it says ""<code>Exception ignored</code>"", but I'm not familiar with all the error-fu in Python.</p>

<p><strong>EDIT:</strong></p>

<p>I added an <code>excel.close()</code> command right at the end and now it doesn't give me the first error, but a second (and much larger and scarier) one:</p>

<pre><code>Traceback (most recent call last):
  File ""C:\Users\carte_000\Python\stock_get_rev8.py"", line 161, in &lt;module&gt;
    excel.close()
  File ""c:\python34\lib\site-packages\xlsxwriter\workbook.py"", line 287, in close
    self._store_workbook()
  File ""c:\python34\lib\site-packages\xlsxwriter\workbook.py"", line 510, in _store_workbook
    xml_files = packager._create_package()
  File ""c:\python34\lib\site-packages\xlsxwriter\packager.py"", line 132, in _create_package
    self._write_worksheet_files()
  File ""c:\python34\lib\site-packages\xlsxwriter\packager.py"", line 189, in _write_worksheet_files
    worksheet._assemble_xml_file()
  File ""c:\python34\lib\site-packages\xlsxwriter\worksheet.py"", line 3395, in _assemble_xml_file
    self._write_sheet_data()
  File ""c:\python34\lib\site-packages\xlsxwriter\worksheet.py"", line 4802, in _write_sheet_data
    self._write_rows()
  File ""c:\python34\lib\site-packages\xlsxwriter\worksheet.py"", line 4988, in _write_rows
    self._write_cell(row_num, col_num, col_ref)
  File ""c:\python34\lib\site-packages\xlsxwriter\worksheet.py"", line 5148, in _write_cell
    xf_index = cell.format._get_xf_index()
AttributeError: type object 'str' has no attribute '_get_xf_index'
</code></pre>

<p><strong>EDIT 2:</strong></p>

<p>The part of the code that actually <em>writes</em> to the file is this:</p>

<pre><code>for r, row in enumerate(data):
    for c, cell in enumerate(row):
        if 'percent' in formats[c]:
            sheet.write(r + r_offset, c + c_offset, cell, eval(formats[c].replace('_f', '')))
        elif '_f' in formats[c]:
            sheet.write(r + r_offset, c + c_offset, cell.format(n=str(r + r_offset)), eval(formats[c].replace('_f', '')))
        else:
            sheet.write(r + r_offset, c + c_offset, cell, eval(formats[c][0] + formats[c].replace('_f', '')[-1]))
</code></pre>

<p>If I replace all the fancy <code>if...else</code> stuff with a single</p>

<pre><code>sheet.write(r + r_offset, c + c_offset, cell)
</code></pre>

<p>it doesn't give me the error, and seems to work fine.</p>

<p>This doesn't provide the functionality I need, as some columns need to be formulas whose numbers change based on the row. What in the above code is causing the <code>excel.close()</code> line to bug out?</p>
","4172051","","4172051","","2015-04-05 03:57:07","2017-09-19 06:54:54","xlsxwriter module won't open/close Excel file correctly","<python><exception><error-handling><exception-handling><xlsxwriter>","4","0","","","","CC BY-SA 3.0"
"30477150","1","30477474","","2015-05-27 08:33:26","","0","854","<p>I am working on an othello game for class and am trying to raise an exception when the player makes a valid move but this exception is making my program crash and im not sure why.  I get the error:</p>

<pre><code>Traceback (most recent call last):
  File ""C:\Users\chapp_000\Desktop\Othello\OthelloUI.py"", line 46, in &lt;module&gt;
    s.makeMove(move[0],move[-1])
  File ""C:\Users\chapp_000\Desktop\Othello\OthelloGL.py"", line 73, in makeMove
    raise InvalidMoveError()
OthelloGL.InvalidMoveError
</code></pre>

<p>Here is my exception class:</p>

<pre><code>class InvalidMoveError(Exception):
'''for handling bad moves'''
pass
</code></pre>

<p>And here is where the exception is being raised:</p>

<pre><code>if self.checkCell(r,c) == 0:
        if self.turn ==1:
            self.board[r][c] = 2
            self.turn =2
        else:
            self.board[r][c] = 1
            self.turn =1
elif self.checkCell(r,c) !=0:
        raise InvalidMoveError()
</code></pre>

<p>EDIT: to answer some comments I am tying to us my exception to stop my program from crashing by saying pass and check cell looks on my board and returns 0 if no piece is their and 1 or 2 if that player has a piece their line 46 of the code is s.makeMove(move[0],move[-1]) where s is a game bored object and move is a list of 2 numbers from the player saying the x and y location they would like to move to</p>
","2127883","","2127883","","2015-05-27 08:41:30","2015-05-27 08:48:29","python raising an error exception","<python><exception><error-handling><exception-handling>","1","7","","","","CC BY-SA 3.0"
"30633209","1","","","2015-06-04 00:47:45","","0","55","<p>Can anyone let me know why the exception class I created cannot run in the raiser function?</p>

<pre><code>class E3Exception(Exception):
  pass

class E3OddException(E3Exception):
  pass

def raiser (x):
  if (int(x)%2==1):
    raise E3OodException
  elif (int(x)%2==0):
    raise E3Exception
  elif x=='CSC148':
    e.message=+'Hi,Brian'
  elif (x==str &amp; int(x)!=int):
    raise ValueError
  elif (x!=str &amp; x!=int):
    raise TypeError    
</code></pre>

<p>Thanks</p>
","4923058","","67579","","2015-06-04 00:53:32","2015-06-04 00:53:32","Why the exception class created cannot run in the raiser function","<python><class><exception><error-handling><raise>","0","12","","","","CC BY-SA 3.0"
"30878079","1","","","2015-06-16 20:58:53","","5","2493","<p>I have a very simple question as described in the title. I searched a bit online and find the answers are not easy to for me to catch. A minimum example is, I have a python script python_script.py:</p>

<pre><code>#!/us/bin/python                                                           

import sys                                                                  

number = int(sys.argv[1])                                                        

if number &lt;= 10:                                                            
    pass                                                                    
else:                                                                       
    raise ValueError('Number is higher than 10!')                           
    sys.exit(1)                                                                                     
</code></pre>

<p>Then I have a bash script bash_script.sh which calls above python script. </p>

<pre><code>#!/bin/bash                                                                 

for num in {1..100}                                                         
do                                                                          
  python python_script.py ${num}                                            
done          
</code></pre>

<p>What I tried to do is: After the exception is raised in python script, I want to the bash script to stop immediately (i.e., when num>10 in this example). But now with these two scripts, all num loops from 1 to 100 are executed in bash script, but only after 10 the exception is printed on screen. I guess this should be quite easy so thank you in advance for the help.</p>
","758677","","758677","","2015-06-17 10:11:29","2015-06-17 10:11:29","How to stop a bash script when the python script that is called within bash encounters an error?","<python><bash><shell><exception><error-handling>","1","0","","","","CC BY-SA 3.0"
"31618848","1","","","2015-07-24 19:59:33","","2","635","<p>I'm trying to do a simple error reporting system within my Django classes, but I cannot get to save a new object (from another class) if I raise a ValidationError.</p>

<p>Here is an example of what I want to do:</p>

<pre><code>from django.db import models
from django.core.exceptions import ValidationError

class History(models.Model):
    data = models.CharField(max_length=255)
    timestamp = models.DateTimeField(auto_now_add=True)

class PositiveNumber(models.Model):
    number = models.IntegerField()

    def save(self, *args, **kwargs):
        if self.number &lt; 0:
            h = History(data=""Error writing %d into 'Positive Numbers'"" % (self.number,))
            h.save()         # Here is the problem: h doesn't get saved
            raise ValidationError('Positive numbers only')
        else:
            h = History(data=""Saved %d into 'Positive Numbers'"" % (self.number,))
            h.save()
        return super(PositiveNumber, self).save(*args, **kwargs)
</code></pre>

<p>The problem is that if I raise an exception, even if it is risen after I do the <strong>h.save()</strong>, h doesn't get saved.</p>

<p>This makes all the sense because Django is <em>so intelligent</em> that shouldn't let you commit to the database if there is an error, but I can't find anywhere in the documentation where I can override this to deal with this specific situation.</p>

<p>... or maybe I'm simply conceptually wrong and I have to deal with this elsewhere (I'm trying to do a robust system where others can write code for it so it should be <em>fail-safe</em>).</p>
","4581597","","","","","2015-07-25 04:35:03","Django: save other object before raising exception","<python><django><exception><error-handling><exception-handling>","0","5","","","","CC BY-SA 3.0"
"32601996","1","","","2015-09-16 07:13:57","","0","254","<p>I have a problem with identifying an exception.</p>

<p>Im writing a scraper that scrapes a lot of different websites, and some errors I want to handle and some I only want to ignore.</p>

<p>I except my exceptions like this:</p>

<pre><code>except Exception as e:
</code></pre>

<p>most of the exceptions I can identify like this:</p>

<pre><code>type(e).__name__ == ""IOError""
</code></pre>

<p>But I have one exception ""[Errno 10054] An existing connection was forcibly closed by the remote host""</p>

<p>that has the name ""error"" which is too vague and Im guessing other errors also have that name. Im guessing I can somehow get the errno number from my exception and thus identify it. But I don't know how.</p>
","2129336","","795990","","2015-09-16 07:15:59","2015-09-16 12:12:07","Identify a specific exception in python","<python><exception><error-handling><exception-handling><web-scraping>","1","0","","","","CC BY-SA 3.0"
"33284609","1","33300649","","2015-10-22 15:19:08","","2","1870","<p>I'm developing a Jinja extension that performs a few potentially harmful operations, which on failure will raise an Exception that holds some information on what went wrong.</p>

<p>When this occurs, of course the Exception will prevent Jinja from completing its render process and return <code>None</code> rather than a render result. This problem is easily mitigated using a try/catch statement and returning an empty string or whatever is suitable.</p>

<p>However, that effectively throws away the Exception and the debugging info, which I would rather pass on to my error log. The system responsible for setting up the Jinja environment has it's own logging service, which I would prefer to keep decoupled from the extension. I am aware though, that Jinja has an <a href=""http://jinja.pocoo.org/docs/dev/api/#undefined-types"" rel=""nofollow""><code>Undefined</code> class</a> which I have successfully used to intercept access of undefined variables in another project.</p>

<p>Is there any way I could raise a special type of exception (<code>UndefinedException</code> did not work), or tell the Jinja environment to log a warning, when an error occurs in my extension, while still allowing it to continue its execution?</p>

<p>What I have in mind is something along the lines of this example:</p>

<pre><code>def _render(*args, **kwrags):
    # ...
    try:
        self.potentially_harmful_operation()
    except Exception as e:
        self.environment.warning(e)
        return Markup("""")
    # ...
    return Markup('&lt;img src""{}""&gt;'.format(img_path))
</code></pre>

<p>So, to clarify, as I wrote in a comment below:</p>

<blockquote>
  <p>Fundamentally I guess my question boils down to ""how can I make Jinja produce a warning, as it does for e.g. missing variables"".</p>
</blockquote>
","222245","","222245","","2015-10-23 07:16:51","2015-10-23 10:55:45","Graceful error handling and logging in Jinja extension","<python><exception><logging><error-handling><jinja2>","1","5","0","","","CC BY-SA 3.0"
"33716330","1","33716385","","2015-11-15 04:13:49","","4","1065","<p>E.g. If I am trying to open a file, can I not simply check if <code>os.path.exists(myfile)</code> instead of using <code>try/except</code> . I think the answer to why I should not rely on <code>os.path.exists(myfile)</code> is that there may be a number of other reasons why the file may not open.</p>
<blockquote>
<p>Is that the logic behind why error handling using <code>try/except</code> should be used?</p>
<p>Is there a general guideline on when to use Exceptions in Python.</p>
</blockquote>
","2156601","","-1","","2020-06-20 09:12:55","2015-11-15 04:48:11","When Should I Use a Try-Except statement in Python?","<python><exception><error-handling>","2","0","","","","CC BY-SA 3.0"
"34712812","1","34712849","","2016-01-11 01:22:26","","1","1152","<p>I am currently writing a banking application, and below you can see my code:</p>

<pre><code>from customer import Customer
from exceptions import KeyError

class Bank(object):
    """""" All the bank operations are contained in this class e.g customer Registration """"""

    def __init__(self, name):
        self.name = str(name)
        self.customers = dict()
        self.registration_customer(name)

    def registration_customer(self, name):
        """""" Registration of a new user to the bank
        Args:
            name (str): name of the customer
        """"""
        name = str(name)
        if not self.customers.get(name, None):
            self.customers[name] = Customer(name)

    def close_customer_account(self, name, account_type):
        """""" close an account of a customer by name and account_type
        Args:
            name (str) : name of the account holder
            account_type (str) : type of account
        """"""
        name = str(name)
        account_type = str(account_type)
        customer = self.customers.get(name, None)
        if customer:
            customer.close_account(account_type)

    def get_customer_info(self, name):
        """""" get customer info
        Args:
            name (str) : name of the customer
        """"""

        if not self.customers[name]:
            raise KeyError('I am sorry! Customer does not exist')

        return self.customers[name]
</code></pre>

<p><strong>Raising an error</strong></p>

<p>If you see <code>get_customer_info</code> function, if the <code>name</code> is not present, then I am raising an <code>error</code>. Is this the best way I can raise an <code>error</code> in Python assuming banking application are super critical ? You can also assume that this is a production level code. </p>

<pre><code> def get_customer_info(self, name):
        """""" get customer info
        Args:
            name (str) : name of the customer
        """"""

        if not self.customers[name]:
            raise KeyError('I am sorry! Customer does not exist')

        return self.customers[name]
</code></pre>
","4593743","","","","","2016-01-11 01:54:09","What will be a very elegant way to raise an error in Python","<python><exception><error-handling><raise><raiserror>","2","2","0","","","CC BY-SA 3.0"
"35851013","1","","","2016-03-07 18:19:35","","1","285","<p>I'm trying to check to see wether or not an input is an integer but I keep on getting a syntax error. The code is as follows, thanks!</p>

<pre><code>try:
    offset=int(input(""How Much Would You Like To Offset By?\n""))
    except ValueError:
        while offset!=int:
            print(""Please Enter An Integer!"")
            offset=int(input(""How Much Would You Like To Offset By?\m""))
            except ValueError
</code></pre>
","4039432","","","","","2016-03-07 18:58:27","Python - Syntax Error With 'Exception'","<python><validation><exception><error-handling><exception-handling>","2","2","","","","CC BY-SA 3.0"
"35851782","1","36236179","","2016-03-07 19:00:25","","16","4597","<p>Consider the following example:</p>

<pre><code>def main_list(error_type):

    try:
        if error_type == 'runtime':
            raise RuntimeError(""list error"")
        if error_type == 'valueerror':
            raise ValueError(""list error"")

    except [RuntimeError, ValueError] as e:
        print str(e)

def main_tuple(error_type):

    try:
        if error_type == 'runtime':
            raise RuntimeError(""tuple error"")
        if error_type == 'valueerror':
            raise ValueError(""tuple error"")

    except (RuntimeError, ValueError) as e:
        print str(e)


main_tuple('runtime')
main_tuple('valueerror')

main_list('runtime')
main_list('valueerror')
</code></pre>

<p>The tuple is the correct way to handle multiple exception types. Using a list for the multiple exception types causes neither to be handled.</p>

<p>I am wondering why Python syntax <em>requires</em> a tuple for multiple exception types.  The <a href=""https://docs.python.org/2/tutorial/errors.html#handling-exceptions"">docs</a> say that it uses a tuple, so perhaps it is just ""never was implemented using a list instead of a tuple.""</p>

<p>It seems reasonable to me that a list could also be used in this situation, conceptually at least.</p>

<p>Is there any reason why Python uses a tuple instead of a list for this situation?</p>
","1048539","","7758804","","2019-09-20 15:58:09","2019-09-20 15:58:09","Why does handling multiple exceptions require a tuple, but not a list?","<python><python-2.7><exception><error-handling>","2","0","0","","","CC BY-SA 4.0"
"36157995","1","36158079","","2016-03-22 15:04:44","","96","48996","<p>Evaluating,</p>

<pre><code>max_val = max(a)
</code></pre>

<p>will cause the error,</p>

<pre><code>ValueError: max() arg is an empty sequence
</code></pre>

<p>Is there a better way of safeguarding against this error other than a <code>try</code>, <code>except</code> catch?</p>

<pre><code>a = []
try:
    max_val = max(a)
except ValueError:
    max_val = default 
</code></pre>
","4013571","","4279","","2016-03-22 22:06:59","2019-11-20 02:57:00","A safe max() function for empty lists","<python><list><exception><error-handling><max>","7","1","0","","","CC BY-SA 3.0"
"36653914","1","","","2016-04-15 17:58:31","","2","1164","<p>I'd like to get detailed info about each variable treatment error.</p>

<p>Example 1:</p>

<pre><code>user = User()
print(user.name)
...
AttributeError: variable 'user' (class User) doesn't have field 'name', there are only: full_name, address, telephone, email
</code></pre>

<p>Example 2:</p>

<pre><code>some_nums = [1, 2, 3]
print(some_nums[3])
...
IndexError: attempt to get #4 'some_nums' list's elem; it has only 3 elems
</code></pre>

<p>I known i can wrap each method in my program in individual try-expect block and  print such message in the except clause in each of them.</p>

<p>But it there any way to <em>collect local variables data</em>, automatically pass it to top <em>single</em> try-except block and print such messages there?</p>

<p>I saw something like in py.test library. It overrides builtin python assert's and prints detailed message in stack trace when assert falls
<a href=""https://pytest.org/latest/assert.html"" rel=""nofollow"">https://pytest.org/latest/assert.html</a></p>
","1251169","","","","","2016-04-15 19:05:43","Python: how to print detailed error messages about errors?","<python><debugging><exception><error-handling>","1","0","0","","","CC BY-SA 3.0"
"36662174","1","36662416","","2016-04-16 08:58:43","","2","4317","<p>There's something weird happening with my code, I have a first function that goes like this :</p>

<pre><code>def function1():
    try : #1
        #try to open a file
        #read file
        #return info variable from the file
    except : #1
        try : #2
            #try to open a web page
            #read web page
            if directory1 not in directorylist :
                #create directory1
                #change working directory to directory1
            else :
                #change working directory to directory1
            #write web page content in a file
            #return info variable from the file
        except : #2
            try : #3
                #try to open a second web page
                #print error message 1
            except : #3
                #print error message 2
        #set info variable to None
        #return info variable
</code></pre>

<p>So this function works perfectly when called in the main program, but when I try to call function1 in another function2, both try#2 and except#2 are executed ! Cause directory1 is created and error message 1 is printed, also my info variable equals None.</p>

<p>How can calling function1 in a second function mess try and except clauses ?</p>

<p>Thank you !</p>
","5892101","","","","","2016-04-16 09:27:07","Try and except both executed when called by another function","<python><python-3.x><exception><error-handling>","2","2","0","","","CC BY-SA 3.0"
"36747362","1","49208523","","2016-04-20 14:42:57","","2","2693","<p>I am trying to query objects in <code>Salesforce</code> using the library <code>simple_salesforce</code>. If the query is not valid, I get a <code>traceback</code> error, which I've been able to isolate with a <code>try, except</code> statement. In this example, Contactd is not a real table to query. I would really like to just isolate the error message itself, but e is a class instance so I'm not sure how to isolate.</p>

<p>My Code:</p>

<pre><code>from simple_salesforce import Salesforce

sf = Salesforce(username='',
                password='',
                security_token='',
                sandbox='')

try:

    print sf.query_all(""SELECT Id FROM Contactd"")
except Exception as e:
    print type(e)
    print e
</code></pre>

<p>Output:</p>

<pre><code>&lt;class 'simple_salesforce.api.SalesforceMalformedRequest'&gt;
Malformed request https://cs42.salesforce.com/services/data/v29.0/query/?q=SELECT+Id+FROM+Contactd. Response content: [{u'errorCode': u'INVALID_TYPE', u'message': u""\nSELECT Id FROM Contactd\n               ^\nERROR at Row:1:Column:16\nsObject type 'Contactd' is not supported. If you are attempting to use a custom object, be sure to append the '__c' after the entity name. Please reference your WSDL or the describe call for the appropriate names.""}]
</code></pre>

<p>Desired Output:</p>

<pre><code>\nSELECT Id FROM Contactd\n               ^\nERROR at Row:1:Column:16\nsObject type 'Contactd' is not supported. If you are attempting to use a custom object, be sure to append the '__c' after the entity name. Please reference your WSDL or the describe call for the appropriate names.""
</code></pre>

<p>Also included is the <code>simple_salesforce</code> error handling code:</p>

<pre><code>def _exception_handler(result, name=""""):
    """"""Exception router. Determines which error to raise for bad results""""""
    try:
        response_content = result.json()
    except Exception:
        response_content = result.text

    exc_map = {
        300: SalesforceMoreThanOneRecord,
        400: SalesforceMalformedRequest,
        401: SalesforceExpiredSession,
        403: SalesforceRefusedRequest,
        404: SalesforceResourceNotFound,
    }
    exc_cls = exc_map.get(result.status_code, SalesforceGeneralError)

    raise exc_cls(result.url, result.status_code, name, response_content)
</code></pre>
","2242044","","","","","2018-03-10 11:27:42","Isolating the error message in error handling from Salesforce API","<python><python-2.7><exception><error-handling><salesforce>","2","0","","","","CC BY-SA 3.0"
"37224773","1","","","2016-05-14 09:05:48","","0","604","<p>i need a little bit of help understanding a problem that i have with user defined exceptions in python 2.7.11. </p>

<p>I have two files <strong>main.py</strong> and <strong>myErrors.py</strong> .in <strong>main</strong> i post data and receive a response and and in <strong>myErrors</strong> i handle the errors. </p>

<p>What i'm trying to do is execute the version error in the try:except statement, but it doesn't get executed even thought it should be. what i'm doing is that i pass the response to myErrors and update that data to a dictionary in the errors file.-</p>

<p>my question was badly phrased. What I want to do is, is pass the response to the error handler, but i don't want to execute it, until we get to the Try:except clause in on_response method. So when we get the response and if it's not successful, then check the error code and raise the exception. Now what i'm doing is checking first for errors and then executing the check for success (error code)</p>

<p>Here is the <strong>main</strong></p>

<pre><code>def send_messages(self):
  response = cm.postData(url=simulateSasServer, jsondata=json_data)
  self.on_response(response)

def on_response(self, response):
myERRORS.myERRORS(response)
    # if registration is succesful change state to REGISTERED.
    if 'registrationResponse' in response:
        try:
            responseObjects = response['registrationResponse']
            for responseObject in responseObjects:
                if responseObject['error']['errorCode'] == 0:
                    do_action
        except myErrors.Version():
            raise (""version_message"")
</code></pre>

<p>Here is the <strong>myErrors</strong></p>

<pre><code>class myERRORS(Exception):

error_code = {'SUCCESS': 0,
              'VERSION': 100,
              }

response_data = {}

def __init__(self, response):
    self.response_data.update(response)



class Version(myERRORS):

def __init__(self):
    self.name = ""VERSION""
    self.err_code = self.error_code['VERSION']
    self.msg = ""SAS protocol version used by CBSD is not supported by SAS""
    self.version_error()
    if self.version_error() is True:
        print (self.name, self.err_code, self.msg)
        raise Exception(self.name, self.err_code, self.msg)

def version_error(self):
    response_objects = self.response_data.values()[0]
    if 'registrationResponse' in self.response_data:
        for r_object in response_objects:
            if r_object['error']['errorCode'] == self.error_code['VERSION']:
                return True
</code></pre>

<p>Any help is much appreciated.</p>
","4065705","","4065705","","2016-05-14 09:45:59","2016-05-14 09:45:59","Python user defined exception handling","<python-2.7><exception><error-handling>","1","0","","","","CC BY-SA 3.0"
"38463194","1","","","2016-07-19 15:48:54","","1","75","<p>I am trying to insert multiple rows with the <code>executemany</code> function. My complete code is given at the end.</p>

<p>The exception I get is </p>

<pre><code>sqlite3.IntegrityError: column carname is not unique
</code></pre>

<p>I wish I could a more detailed error report giving the offending values that caused the error. Is it possible to get a more detailed error report (in an exception) from <code>sqlite3</code> so that it gives back the offending values that caused the error?
For example, in my code, the following values are offending:</p>

<pre><code>(0, 'Audi', 52642),
(1, 'Audi', 52642),
</code></pre>

<p>The <code>carname</code> should be unique.</p>

<p>Or do I have to insert the values one-by-one only and observe the exceptions?</p>

<p>My code: based on <a href=""http://zetcode.com/db/sqlitepythontutorial/"" rel=""nofollow"">this tutorial</a>, I have added the <code>UNIQUE</code> constraint on the column carname.</p>

<pre><code>import sqlite3 as lite
import sys

cars = (
    (0, 'Audi', 52642),
    (1, 'Audi', 52642),
    (2, 'Mercedes', 57127),
    (3, 'Skoda', 9000),
    (4, 'Volvo', 29000),
    (5, 'Bentley', 350000),
    (6, 'Hummer', 41400),
    (7, 'Volkswagen', 21600)
)

tblstr = """"""CREATE TABLE cars (
  carid integer PRIMARY KEY,
  carname NVARCHAR(50) UNIQUE,
  price integer NOT NULL
);""""""


con = lite.connect('test.db')

with con:

    cur = con.cursor()    

    cur.execute(""DROP TABLE IF EXISTS Cars"")
    cur.execute(tblstr)
    cur.executemany(""INSERT INTO Cars VALUES(?, ?, ?)"", cars)
</code></pre>
","4725700","","","","","2016-07-21 14:58:30","sqlite3 python 2.7 how to enable more detailed error reporting (exceptions) from sqlite3?","<python-2.7><exception><error-handling><sqlite>","1","0","0","","","CC BY-SA 3.0"
"41381360","1","41381494","","2016-12-29 14:10:03","","7","5105","<p>Is there a way to propagate an exception in a try/except block from one except to the next?</p>

<p>I want to catch a specific error and then do a general error handling as well.</p>

<p>""raise"" is letting the exception ""bubble up"" to an outside try/except, but not inside the try/except block that raised the error.</p>

<p>It should be ideally something like this:</p>

<pre><code>import logging

def getList():
    try:
        newList = [""just"", ""some"", ""place"", ""holders""]
        # Maybe from something like: newList = untrustedGetList()

        # Faulty List now throws IndexError
        someitem = newList[100]

        return newList

    except IndexError:
        # For debugging purposes the content of newList should get logged.
        logging.error(""IndexError occured with newList containing: \n%s"",   str(newList))

    except:
        # General errors should be handled and include the IndexError as well!
        logging.error(""A general error occured, substituting newList with backup"")
        newList = [""We"", ""can"", ""work"", ""with"", ""this"", ""backup""]
        return newList
</code></pre>

<p>The problem I have is that when the IndexError gets catched with the first except, my general error handling in the second except block is not applied.</p>

<p>The only workaround I have for now is to include the general error handling code in the first block as well. Even if i wrap it in it's own functionblock it still seems less than elegant...</p>
","7354223","","4082217","","2016-12-29 14:16:13","2016-12-29 14:44:58","Python: Propagate an exception through a Try/Except Block with multiple Excepts","<python><exception><error-handling><exception-handling>","1","2","","","","CC BY-SA 3.0"
"41996128","1","","","2017-02-02 07:10:20","","0","83","<p>I have a statement like this.</p>

<p>I just want to know which of the two assert statement has thrown the exception.</p>

<pre><code>try:
    assert re.search(""xyz"", statement)
    assert re.search(""abc"", statement)
except AssertionError:
    print ""AssertionError : Expected Error message not found""
</code></pre>

<p>Thanks for the answer.</p>
","1127494","","","","","2017-02-02 08:30:35","How to check which statement has thrown exception?","<python><exception><error-handling><exception-handling>","4","3","","","","CC BY-SA 3.0"
"43605512","1","43605619","","2017-04-25 08:33:36","","22","59248","<p>I am trying to understand what is a difference between raising a ValueError and an Exception. I have tried both in the same code (even in the same branch) and the result was the same - I got an error message.</p>

<p>I have made a research on this question on SO, but found no discussion on this. Then I read the documentation of exceptions, and found the following <a href=""https://docs.python.org/2/library/exceptions.html"" rel=""noreferrer"">definition</a> of ValueError: </p>

<blockquote>
  <p>Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as <code>IndexError</code>.</p>
</blockquote>

<p>So as I understand, an Exception is a more general term, and ValueError can be applied in some specific cases. But since the results of raising both things are the same, I want to understand, what is the practical meaning of differentiating between a ValueError and an Exception. Python version should be here not relevant. Thank you!</p>

<p><strong>EDIT</strong>:
Thanks to your answers I got it, what is the difference between both terms in try-exception construct. But how do they differ in case of just raising them, not excepting?</p>

<pre><code>raise Exception('blah') 
</code></pre>

<p>and </p>

<pre><code>raise ValueError('blah') 
</code></pre>

<p>Answering to @PeterWood: in both cases I just got the error message ""blah"", but in one case it was ""Exception: blah"", and in the second: ""ValueError: blah"". And I see in this case no practical difference between them both.</p>
","6699735","","6699735","","2017-04-25 09:02:17","2021-07-28 19:24:32","Python: difference between ValueError and Exception?","<python><exception><error-handling>","3","0","0","","","CC BY-SA 3.0"
"43617092","1","43617283","","2017-04-25 17:15:41","","1","40","<p>I'm trying to write a while loop to check for errors during an automated login. I want it to run through the login and if there is an error then refresh the page and start again. When I try to use the exception <code>InvalidSelectorException:</code> I get an undefined error. Is there another way I should write this? Or a different exception I should use? </p>

<pre><code>while True:
    try:
        loginButton = browser.find_element_by_xpath('//*[@id=""global-header""]/div[2]/ul/li[2]/a')
        loginButton.click()
        time.sleep(3) 

        iframe = browser.switch_to.frame('disneyid-iframe') 
        Username = browser.find_element_by_xpath('//*[@id=""did-ui""]/div/div/section/section/form/section/')
        Username.send_keys(usernameStr)
        time.sleep(3)


        password = browser.find_element_by_xpath('//*[@id=""did-ui""]/div/div/section/section/form/section/div[2]/div/label/span[2]/input')
        password.send_keys(passwordStr)
        time.sleep(3)


        nextButton = browser.find_element_by_xpath('//*[@id=""did-ui""]/div/div/section/section/form/section/div[3]/button[2]')
        nextButton.click()
        break 
    except:
        browser.refresh()
</code></pre>

<p>the exception clause with no exception fixed it. </p>
","11866885","","11866885","","2017-04-25 17:28:00","2017-04-25 17:28:00","Exception Handling","<python><exception><error-handling><while-loop>","1","2","","","","CC BY-SA 3.0"
"44773345","1","","","2017-06-27 06:12:39","","0","1297","<p>I have this line of code in my main.py:</p>

<pre><code>if __name__ == ""__main__"":
    tf.app.run() 
</code></pre>

<p>But it throws out the exception:</p>

<pre><code>ValueError: Iteration of zero-sized operands is not enabled
</code></pre>

<p>Why is this?</p>

<p>This is the entire code:</p>

<pre><code>import tensorflow as tf
import config
import os
from urllib.request import urlretrieve
from zipfile import ZipFile
from dataset.dataset import Dataset
from network.eval import Learning

FLAGS = tf.app.flags.FLAGS
data_dir = config.data_dir
tmp_zip_adr = config.tmp_zip_adr
dataset_urls = config.dataset_urls


def download_dataset_if_needed():
    def download_and_unzip(zipurls):
        for url in zipurls:
            print(""Downloading {}"".format(url))
            fpath, _ = urlretrieve(url, tmp_zip_adr)
            zf = ZipFile(fpath)
            zf.extractall(data_dir)
            zf.close()
            os.remove(fpath)
        print(""Dataset downloaded into 'dataset/data' folder"")

    if not os.path.exists(data_dir) or FLAGS.download:
        os.makedirs(data_dir)
        print(""Downloading dataset"")
        download_and_unzip(dataset_urls)


def main(argv=None):
    download_dataset_if_needed()
    if FLAGS.update or not os.path.exists(data_dir + 'segmented_set1'):
        print(""Starting processing binary dataset"")
        Dataset().create_dataset(data_dir + ""segmented_set?/*.avi"")
    Learning()


if __name__ == '__main__':
    tf.app.run()
</code></pre>

<p>And this is the entire error:</p>

<pre><code>Traceback (most recent call last):   File
""C:\Users\asus\Desktop\cnn-rnn-master\cnn-rnn-master\main.py"", line
41, in &lt;module&gt;
 tf.app.run()   File ""C:\Users\asus\AppData\Local\Programs\Python\Python35\lib\site-packages\tensorflow\python\platform\app.py"",
line 48, in run
 _sys.exit(main(_sys.argv[:1] + flags_passthrough))   File ""C:\Users\asus\Desktop\cnn-rnn-master\cnn-rnn-master\main.py"", line
37, in main
 Learning()   File ""C:\Users\asus\Desktop\cnn-rnn-master\cnn-rnn-master\network\eval.py"",
line 12, in __init__
 self.train_reader = Reader.Reader(""dataset/data/segmented_set1/*.tfr"")   File
""C:\Users\asus\Desktop\cnn-rnn-master\cnn-rnn-master\dataset\Reader.py"",
line 13, in __init__
 self.init_dataset()   File ""C:\Users\asus\Desktop\cnn-rnn-master\cnn-rnn-master\dataset\Reader.py"",
line 53, in init_dataset
 self.iterator = np.nditer(self.files) ValueError: Iteration of zero-sized operands is not enabled
</code></pre>

<p>I have gone through tf.app.run() line by line using the code found in <a href=""https://github.com/tensorflow/tensorflow/blob/9dc6c17797c065796603d9259b2aa57b3c07ff71/tensorflow/python/platform/app.py#L22"" rel=""nofollow noreferrer"">https://github.com/tensorflow/tensorflow/blob/9dc6c17797c065796603d9259b2aa57b3c07ff71/tensorflow/python/platform/app.py#L22</a>, and this line in <code>run(main=None, argv=None)</code></p>

<pre><code>_sys.exit(main(_sys.argv[:1] + flags_passthrough))
</code></pre>

<p>gives out the error</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;pyshell#48&gt;"", line 1, in &lt;module&gt;
    _sys.exit(main(_sys.argv[:1] + flags_passthrough))
TypeError: 'NoneType' object is not callable
</code></pre>
","7994456","","7994456","","2017-06-27 07:47:58","2017-06-27 07:47:58","tf.app.run() error","<python><exception><error-handling><tensorflow>","0","8","","","","CC BY-SA 3.0"
"45449635","1","45449921","","2017-08-02 00:34:29","","0","103","<pre><code>for i in range(1,1000):
    try:
        x = some_crazy_function(my_parm(i))
        if x in massive:
            raise Exception()
        massive.append(x)
        x = dict(qnother_crazy_functionsl(x.replace('X','Y')))
        x = new_func(x['constant'])[0]
        next.append(x)
    except:
        break
</code></pre>

<p>I'm fairly new to python and I ran cross this fragment  while maintaining someone else's code</p>

<p>To me that looks like a horrible way to exit a loop. 
Is it the accepted way to code in python and I'll get used to it or is it as bad as it looks?</p>
","8402505","","4909087","","2017-08-02 02:16:18","2017-08-02 02:16:54","Is this the correct way to raise an Exception? (Python)","<python><exception><error-handling><runtime-error>","1","2","","","","CC BY-SA 3.0"
"45621722","1","45621723","","2017-08-10 19:06:51","","52","61755","<p>I have a Python script:</p>
<pre><code>if True:
    if False:
        print('foo')
   print('bar')
</code></pre>
<p>However, when I attempt to run my script, Python raises an <code>IndentationError</code>:</p>
<pre class=""lang-none prettyprint-override""><code>  File &quot;script.py&quot;, line 4
    print('bar')
               ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>I kept playing around with my program, and I was able to produce four errors in total:</p>
<ul>
<li><code>IndentationError: unexpected indent</code></li>
<li><code>IndentationError: expected an indented block</code></li>
<li><code>TabError: inconsistent use of tabs and spaces in indentation</code></li>
<li><code>IndentationError: unindent does not match any outer indentation level</code></li>
</ul>
<p>What do these errors mean? What am I doing wrong? How can I fix my code?</p>
<hr />
<p><sub><strong>Note:</strong> This is an attempt at a <a href=""https://meta.stackoverflow.com/questions/291992/what-is-a-canonical-question-answer-and-what-is-their-purpose"">canonical question</a> because I see many similar posts every month. This is not a duplicate of existing questions about <a href=""https://stackoverflow.com/questions/492387/indentationerror-unindent-does-not-match-any-outer-indentation-level"">unindents</a> or <a href=""https://stackoverflow.com/questions/1016814/what-to-do-with-unexpected-indent-in-python"">unexpected indents</a> because they only deal with one type of indentation error each, and I'm looking to cover them all in one place.</sub></p>
<p><sub>It's also possible to have <em>logically</em> incorrect indentation that <em>does not</em> cause an error message. One common form of this is attaching <code>else:</code> to a <code>for</code> or <code>while</code> loop rather than (as intended) the corresponding <code>if:</code>. See <a href=""https://stackoverflow.com/questions/3295938"">Else clause on Python while statement</a> if you need to close questions where OP did that.</sub></p>
","6640099","","523612","","2022-08-12 05:30:15","2022-09-07 01:45:57","I'm getting an IndentationError. How do I fix it?","<python><exception><error-handling><indentation><code-formatting>","5","2","0","","","CC BY-SA 4.0"
"46090079","1","","","2017-09-07 07:14:16","","0","621","<p>I am working with Twilio's API to return information about phone numbers. Some of the phone numbers are invalid and return an error such as </p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""test_twilio.py"", line 17, in &lt;module&gt;
    number = client.lookups.phone_numbers(""(4154) 693-
6078"").fetch(type=""carrier"")
  File ""/Users/jawnsano/anaconda/lib/python2.7/site-
packages/twilio/rest/lookups/v1/phone_number.py"", line 158, in fetch
    params=params,
  File ""/Users/jawnsano/anaconda/lib/python2.7/site-
packages/twilio/base/version.py"", line 82, in fetch
    raise self.exception(method, uri, response, 'Unable to fetch 
record')
twilio.base.exceptions.TwilioRestException: 
HTTP Error Your request was:

GET /PhoneNumbers/(4154) 693-6078

Twilio returned the following information:

Unable to fetch record: The requested resource /PhoneNumbers/(4154) 
693-6078 was not found

More information may be available here:

https://www.twilio.com/docs/errors/20404
</code></pre>

<p>If an error like the one shown above is returned, I want to print 'There is an error.' However, for my if statement, is there a way to make Python print that for when there is a traceback error/error in general? I think there is probably a better way than setting making it like</p>

<pre><code>if returned_value = (super long error message):
    etc...
</code></pre>
","7468566","","3714940","","2017-09-07 07:25:15","2019-02-01 15:30:31","How do I write if-else statements in Python that work with exceptions/errors?","<python><exception><error-handling>","2","2","","","","CC BY-SA 3.0"
"46632494","1","46632580","","2017-10-08 14:58:21","","0","19","<p>This is my code.</p>

<pre><code>print(""Welcome to the quiz"")

print(""Would you like to login with an existing account or register for a new account?"")

class validation(Exception):

    def __init__(self, error):
        self.error = error

    def printError(self):
        print (""Error: {} "".format(self.error))

def mainError():
    try:
        raise validation('Please enter a valid input')
    except validation as e:
        e.printError()

def login():
    print (""yet to be made"")

def register():
    print (""yet to be made"")

while True:
    options = [""Login"", ""Register""]
    print(""Please, choose one of the following options"")
    num_of_options = len(options)

    for i in range(num_of_options):
        print(""press "" + str(i + 1) + "" to "" + options[i])
    uchoice = int(input(""? ""))
    print(""You chose to "" + options[uchoice - 1])

    if uchoice == 1:
        login()
        break
    elif uchoice == 2:
        register()
        break
    else:
        mainError()
</code></pre>

<p>If I enter 'a', it comes up with this error:</p>

<pre><code>line 35, in &lt;module&gt;
uchoice = int(input(""? ""))
ValueError: invalid literal for int() with base 10: 'a'
</code></pre>

<p>If I enter a number above 2 like '3':</p>

<pre><code>line 36, in &lt;module&gt;
print(""You chose to "" + options[uchoice - 1])
IndexError: list index out of range
</code></pre>

<p>How can I make sure that if a user enters anything other than 1 or 2, it executes my else commands where it calls my mainError() method which contains my exception that the program would display to my user.</p>
","7717447","","","","","2017-10-08 15:15:59","Why is my 'else: mainError()' not executing when a user inputs anything other than 1 or 2? E.g. @ or a or any number above 3","<python><python-3.x><exception><error-handling>","2","0","0","","","CC BY-SA 3.0"
"46890646","1","46896215","","2017-10-23 13:31:34","","27","40559","<p>Lets assume I have a simple code:</p>

<pre><code>import asyncio


async def exc():
    print(1 / 0)


loop = asyncio.get_event_loop()

loop.create_task(exc())

try:
    loop.run_forever()
except KeyboardInterrupt:
    loop.stop()
    loop.close()
</code></pre>

<p>If I run it, I get error message immediately </p>

<pre><code>Task exception was never retrieved
future: &lt;Task finished coro=&lt;exc() done, defined at qq.py:4&gt; exception=ZeroDivisionError('division by zero',)&gt;
Traceback (most recent call last):
  File ""qq.py"", line 5, in exc
    print(1 / 0)
ZeroDivisionError: division by zero
</code></pre>

<p>But, if I change <code>loop.create_task(exc())</code> to <code>task = loop.create_task(exc())</code> </p>

<p>I'll get the same error message after click ctrl+c</p>

<p>Why does task assignment change the time of output of error?</p>
","8819476","","","","","2021-03-28 08:59:48","Asyncio: Weirdness of Task exception was never retrieved","<python><exception><error-handling><python-asyncio>","1","1","0","","","CC BY-SA 3.0"
"47041472","1","47041560","","2017-10-31 17:41:44","","5","783","<p>When looking at Stackoverflow-Questions about when to raise Exceptions and when to simply return <code>None</code> in Python functions, the emerging picture is that you should use Exceptions for unexpected behaviour and return <code>None</code> otherwise.</p>

<p>However, for-loops over iterables are realized via the <code>StopIteration</code> Exception raised by the <code>next()</code> method, although eventually reaching the ""end"" of an iterable usually isn't unexpected. Why is the for-loop over iterables implemented the way it is?</p>
","1217284","","1217284","","2019-01-21 15:00:30","2019-01-21 15:00:30","Why is the end of an iteration realized with a StopIteration Exception","<python><exception><error-handling><iterator>","1","1","0","","","CC BY-SA 4.0"
"47103557","1","47103649","","2017-11-03 19:55:58","","0","1530","<p>I'm trying to detect foreign languages in a dataframe using 'langdetect' library for Python.</p>
<pre><code>for e in food['product_name'].dropna():
    if detect(e) == 'zh':
        print e
</code></pre>
<p>Here im trying to print every chinese word found in a specific column.</p>
<p>However, at some point I get this error message:</p>
<pre><code>LangDetectException: No features in text.
</code></pre>
<p>I understand this happens when a number, a blank space or a string that is not a word (reference code, mail address...) is found.</p>
<p>All I want is to catch an exception and handle the situation accordingly BUT i don't know how to do it. Here's my attempt:</p>
<pre><code>for e in food['product_name'].dropna():
    if detect(e) == 'zh':
        try:
            print e
        except LangDetectException:
            pass
</code></pre>
<p>Can someone please help me fix this poorly written snippet ? Obviously there's something wrong with it but I don't know what exactly !</p>
","8452243","","523612","","2022-09-12 09:18:24","2022-09-12 09:18:24","Why can't I catch the exception in this code?","<python><exception><error-handling>","1","5","","","","CC BY-SA 4.0"
"47637955","1","47638448","","2017-12-04 16:39:04","","2","388","<p>What is the recommended way of separately handling exceptions of <em>the same type</em> based on differences in what caused the exception?</p>

<p>Let's say one desire to handle the following two instances of <code>AttributeError</code> differently:</p>

<ul>
<li><code>'str' object has no attribute 'append'</code> </li>
<li><code>'float' object has no attribute 'append'</code></li>
</ul>

<p>At the same time, we don't want to handle other attribute errors.</p>

<p>Are there any generalizable answers that work for all exception types? Can I interrogate the exception object for details using some method or function on the exception object?</p>

<pre><code>Try:
    blah
Except AttributeError as exc:
    if exc.baz('foo') is bar:
         handle 'str' object has no attribute 'append'
    elif plugh(exc):
         handle 'float' object has no attribute 'append'
    else:
         raise exc
</code></pre>

<p>I assume that the obvious answer is to refactor. My question specifically regards the cases where that would be inefficient or simply not possible (if there are any such cases at all). </p>
","6292000","","6292000","","2018-10-03 13:24:24","2018-10-03 13:24:24","Exception handling: Differentiating between instances of the same error in Python","<python><python-3.x><exception><error-handling><exception-handling>","1","0","0","","","CC BY-SA 4.0"
"47954784","1","47956482","","2017-12-23 18:06:28","","3","495","<p>I'm in the midst of building a Django app and am hoping to get some advice on the proper way to handle errors and bugs in my code.</p>

<p>Here's a common situation exemplary of the problems I have: a user purchases a product. To process the purchase, my views need to perform a number of actions:</p>

<ol>
<li>First, the view should create a <code>User</code> object in the database.</li>
<li>If that is successful, the view should create an <code>Order</code> object and    assign it to the newly-created User.</li>
<li>If that is successful, my code should create a <code>Product</code> object and add it to the newly created Order.</li>
</ol>

<p>This is all well and good when no errors occur - but I find that the occasional error is inevitable in my code, and I want my app to deal with errors gracefully, rather than crashing outright. For example, if, for any reason, an <code>Order</code> object cannot be created, the view should show the user an error and remove the <code>User</code> object that was previously created. And, it should throw a graceful error message rather than crashing outright and serving the user a Http 500 error.</p>

<p>The only way I can think of to do this is an extremely complex series of nested try / except clauses, like below. But designing my code this way is extremely messy and time-consuming, and it doesn't feel like the right way to do things. I know there must be a better way to design for proper error handling in Django and Python, but I'm not quite sure what it is.</p>

<p>I would greatly appreciate any advice on how to better structure my code in this situation.</p>

<p><strong>Example code:</strong></p>

<pre><code>try:

    # Create a new user
    u = User(email='test@test.com')
    u.save()

    try:

        # Create a new order
        o = Order(user=u, name='Order name')
        o.save()

        try:

            # Create a new product
            p = Product(order=o, name='Product name')
            p.save()

        # If a product cannot be created, print an error message and try deleting the user and order that were previously created
        except:

            messages.add_message(request, messages.ERROR, 'Product could not be created')

            # If deleting the order doesn't work for any reason (for example, o.save() didn't properly save the user), 'pass' to ensure my application doesn't crash
            try:
                o.delete()

            # I use these 'except: pass' clauses to ensure that if an error occurs, my app doesn't serve a Http 500 error and instead shows the user a graceful error
            except:
                pass

            # If deleting the user doesn't work for any reason (for example, u.save() didn't properly save the user), 'pass' to ensure my application doesn't crash
            try:
                u.delete()
            except:
                pass

    # If an order cannot be created, print an error message and try deleting the user that was previously created
    except:
        messages.add_message(request, messages.ERROR, 'Order could not be created')

        # If deleting the user doesn't work for any reason (for example, u.save() didn't properly save the user), 'pass' to ensure my application doesn't crash
        try:
            u.delete()
        except:
            pass

# If the user cannot be created, throw an error
except:
    messages.add_message(request, messages.ERROR, 'User could not be created')
</code></pre>
","4666004","","","","","2017-12-23 22:21:26","Designing code for proper error handling in a Django / Python app?","<python><django><exception><error-handling><exception-handling>","2","0","0","","","CC BY-SA 3.0"
"48029399","1","","","2017-12-29 23:08:32","","3","497","<p>Python's errors only show what line errors occur on.</p>
<p>Example of a runtime error where knowing where in the line caused the error would save time:</p>
<pre><code>Traceback (most recent call last):
  File &quot;/Users/clickbait/Projects/Python Projects/detail-processing.py&quot;, line 34, in &lt;module&gt;
    samples = [oldMatrix[x + pixel[0], y + pixel[1]][2] for pixel in pixelsToSample]
IndexError: image index out of range
</code></pre>
<p>It would be useful if errors also showed what column or character causes the error. Like in the example, I wouldn't need to check all 3 list indexes if the error pointed to where the problem was on the line.</p>
<p>Another of a runtime error where knowing where in the line caused the error would save time:</p>
<pre><code>Traceback (most recent call last):
  File &quot;/Users/clickbait/Projects/stackpromo/main.py&quot;, line 482, in get
    postSlogan=tagLines[int(randomAd.tagLine)][JSON['post_type']].format(site=adSiteNames[randomAd.site]),
TypeError: string indices must be integers, not unicode
</code></pre>
<p>This line has a lot of indecies (<code>[xxx]</code>). I'd like to know which index causes the problem!</p>
<p><strong>Is there a setting (maybe a command-line flag) to make Python errors display the column/character as well as the line number that raises an exception?</strong></p>
<hr />
<p>Syntax errors point do to the invalid syntax with a <code>^</code> symbol, but runtime errors don't point to which variable(s) cause(s) the errors.</p>
","4356188","","4356188","","2021-12-18 05:01:29","2021-12-18 05:01:29","Can I make Python tell me on exactly which character causes an error?","<python><python-3.x><exception><error-handling><runtime-error>","3","5","0","","","CC BY-SA 4.0"
"48884531","1","","","2018-02-20 11:41:35","","5","943","<p>I can raise an exception <code>from</code> another exception in order to provide additional information, e.g.:</p>

<pre><code>try:
    age = int(x)
except Exception as ex:
    raise ValueError(""{} is not a valid age."".format(x)) from ex
</code></pre>

<p>Is there any way to source from <strong>multiple</strong> exceptions? e.g.</p>

<pre><code>try:
    age = int(x)
except Exception as ex1:
    try:
        age = date_now().year - parse_date(x).year
    except Exception as ex2:
        raise ValueError(""{} is not a valid age or date."".format(x)) from ex1 + ex2
</code></pre>
","3601660","","","","","2018-02-20 11:41:35","Python. Raise exception from multiple exceptions","<python><python-3.x><exception><error-handling><raise>","0","3","0","","","CC BY-SA 3.0"
"49309446","1","49309522","","2018-03-15 21:20:56","","1","2168","<p>So I have a function like:</p>

<pre><code>def my_code(arg1, *args):
    ....
</code></pre>

<p>And I want this function to only be able to take either 2 or 3 arguments (that means *args can only be 1 or 2 arguments). How do I throw an error message if the number of arguments is wrong? If I use a try/exception, is there a specific exception type for this?</p>
","8716950","","","","","2022-10-15 15:31:03","Python - Wrong number of arguments exception?","<python><python-3.x><exception><error-handling><try-catch>","4","3","0","","","CC BY-SA 3.0"
"50129644","1","50129722","","2018-05-02 07:55:21","","5","3066","<p>Hi I'm pretty new to Python and I've just started to learn about errors and exceptions.I have this function in a class that inserts a line at a given index called num.I know python will raise an error if no num is given but I want to raise my own error.How do I do that?This is what I tried. But the error raised is still the default error?</p>

<pre><code> def insertNum(self, num, line):
    if num== None:
        raise Exception(""Num not specified."")
    else:
        self.list.insert(num, line)
    return self.list
</code></pre>
","8224215","","","","","2018-05-02 08:06:40","How to raise own error when one argument is missing?","<python><exception><error-handling>","4","0","0","","","CC BY-SA 4.0"
"50247650","1","","","2018-05-09 07:21:25","","1","1044","<p>Running my script, I get the following error for some files:</p>

<pre><code>COMError: (-2146822496, None, ('The file appears to be corrupted.', 
'Microsoft Word', 'wdmain11.chm', 25272, None))
</code></pre>

<p>I have imported <strong>comtypes</strong>, and I wish to do an exception when this error occurs, so I do the following:</p>

<pre><code>try:
    code...
except comtypes.COMError:
    pass
</code></pre>

<p>But it seems that Python does not recognize the exception, as it produces the same COMError as before.</p>

<p>Any suggestions on how to solve this problem? Thanks.</p>
","8500794","","","","","2018-10-14 08:09:56","Handling COMError in Python?","<python-3.x><exception><error-handling><exception-handling><try-except>","1","0","","","","CC BY-SA 4.0"
"51741992","1","51742108","","2018-08-08 08:26:23","","0","1602","<p>I am using multiple try/except blocks to assign values of a dataframe (say data) to 3 variables(say b,c,d) I want to handle <strong>IndexErrors</strong> if positional indexer is out-of-bounds. What I am currently doing is shown below:</p>

<pre><code>b,c,d=None,None,None
try:
    b=data.iloc[1,1]
except:
    pass
try:
    c=data.iloc[2,1]
except:
    pass
try:
    d=data.iloc[0,2]
except:
    pass
</code></pre>

<p>I want to know if there is a better of doing this like a function try_except() or something so that I can use it as shown below:</p>

<pre><code>try_except(b=data.iloc[1,1])
try_except(c=data.iloc[2,1])
try_except(d=data.iloc[0,2])
</code></pre>
","9912855","","","","","2018-08-08 08:36:46","Handling multiple Try/Except statements","<python><exception><error-handling><exception-handling>","1","0","","","","CC BY-SA 4.0"
"51757305","1","51757322","","2018-08-09 00:24:30","","4","4223","<p><strong>So I am building a Python script to download images from a list of urls.</strong> The script works to an extent. I don't want it to download images that have urls that don't exist. I take care of a few images with some usage of status code but still get bad images. <strong>I still get many images that I don't want.</strong> Like these:</p>

<p><a href=""https://i.stack.imgur.com/gNiva.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/gNiva.png"" alt=""bad image""></a>
<a href=""https://i.stack.imgur.com/2gQkO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/2gQkO.png"" alt=""enter image description here""></a></p>

<p><strong>Here is my code:</strong></p>

<pre><code>import os
import requests
import shutil
import random
import urllib.request

def sendRequest(url):
    try:
        page = requests.get(url, stream = True, timeout = 1)

    except Exception:
        print('error exception')
        pass

    else:
        #HERE IS WHERE I DO THE STATUS CODE
        print(page.status_code)
        if (page.status_code == 200):
            return page

    return False

def downloadImage(imageUrl: str, filePath: str):
    img = sendRequest(imageUrl)

    if (img == False):
        return False

    with open(filePath, ""wb"") as f:
        img.raw.decode_content = True

        try:
            shutil.copyfileobj(img.raw, f)
        except Exception:
            return False

    return True

os.chdir('/Users/nikolasioannou/Desktop')
os.mkdir('folder')

fileURL = 'http://www.image-net.org/api/text/imagenet.synset.geturls?wnid=n04122825'
data = urllib.request.urlopen(fileURL)

output_directory = '/Users/nikolasioannou/Desktop/folder'

line_count = 0

for line in data:
    img_name = str(random.randrange(0, 10000)) + '.jpg'
    image_path = os.path.join(output_directory, img_name)
    downloadImage(line.decode('utf-8'), image_path)
    line_count = line_count + 1
#print(line_count)
</code></pre>

<p>Thanks for your time. Any ideas are appreciated.</p>

<p>Sincerely,
Nikolas</p>
","","user9245495","","","","2018-08-09 01:09:58","Check If Image URL Leads To Real Image in Python","<python><exception><error-handling><httprequest><urlrequest>","1","4","0","","","CC BY-SA 4.0"
"52307055","1","","","2018-09-13 05:16:22","","0","1458","<p>I have two functions. function ""main"" is calling to function ""submain"". ""submain"" function contains try-catch block and return some value.</p>

<p>If ""submain"" executes successfully then it returns some value which i will display to end user directly. </p>

<p>If i get an exception then i have to prepare one user friendly message and print that. But to do that i need to know whether returned value is exception or not. </p>

<p>How can i check that returned value in exception or valid result?</p>

<pre><code>Here is my pseudo code:
def submain():
    try:
        result = call to external API
        return result
    excepion, e:
        _logger(e)

def main(value):
    for x in value:
        submain()
        # if return is exception then break loop and give msg to end user.
</code></pre>
","5820696","","5820696","","2018-09-13 05:56:18","2018-09-13 05:56:18","python: How to check that returned value is exception or not","<python><exception><error-handling><return><try-catch>","1","4","0","","","CC BY-SA 4.0"
"52354405","1","","","2018-09-16 13:01:22","","0","57","<p>I was trying to catch a specific exception:</p>

<pre><code>username = 'myuser'
try:
    user = User.objects.get(username=username)
    print(user)
except Exception as e:
    if type(e)=='django.contrib.auth.models.User.DoesNotExist':
        print('No such user')

    print (type(e))
</code></pre>

<p>But instead of going into the if loop, I am getting:</p>

<pre><code>&lt;class 'django.contrib.auth.models.User.DoesNotExist'&gt;
</code></pre>

<p>Why is this happening? How can I catch a specific exception?</p>
","1305947","","","","","2018-09-16 13:19:02","Catch specific errors in python","<python><django><python-3.x><exception><error-handling>","1","1","","","","CC BY-SA 4.0"
"52674581","1","","","2018-10-06 00:03:31","","1","3540","<p>When implementing a try/except block, VS Code does not recognize the specified exception or any exception for that matter. Ex:</p>

<pre><code>try:
    x = 1/0
except ZeroDivisionError:
    print(""You cannot divide by zero "")
</code></pre>

<p>throws an exception error and does not print ""You cannot divide by zero"" when executed through the terminal. VS Code doesn't seem to be recognizing any exceptions. I've tried using the same code in IDLE and Sublime and it prints the correct message. Does anyone have any suggestions for fixing this? </p>

<p>Other information: I'm using the python extension from Microsoft and have no other extensions in VS Code. </p>

<p>Thanks!</p>
","10464075","","10464075","","2018-10-06 01:21:33","2019-06-20 08:28:33","why is try except block not working in visual studio code for python 3.7?","<python><exception><error-handling><exception-handling><visual-studio-code>","1","9","","","","CC BY-SA 4.0"
"52696172","1","52696312","","2018-10-08 05:58:17","","2","5639","<p>I have been trying to improve my guessing game in Python by limiting the guess input
between 2 numbers(1 and 100) and asking if the guess input is a number or not. I have been trying to do this both at the same time. Is there anyway I can do this by minimum coding?</p>
","9514459","","","","","2022-09-17 19:25:54","Limiting an input between Two Numbers and checking if the input is a number or not at the same time","<python><exception><error-handling><limiting>","2","1","","","","CC BY-SA 4.0"
"53235877","1","","","2018-11-10 03:56:23","","0","156","<p>I am trying to search a webpage for a link text and I'm trying to make the program respond without an error if the item is not found and move onto something else.</p>

<pre><code>from selenium.common.exceptions import NoSuchElementException

hasElementQ = True
while True:
    try:
        elem = browser.find_element_by_link_text('pant')
        break
        except NoSuchElementException:
            print ('it doesnt exist')
</code></pre>

<p>This is the error I receive:</p>

<pre><code>except NoSuchElementException:
         ^
SyntaxError: invalid syntax
</code></pre>
","10631763","","4076315","","2018-11-10 06:35:07","2018-11-10 19:32:11","how to raise error and move on to different function when item not found in selenium","<python><selenium><exception><selenium-webdriver><error-handling>","1","2","","","","CC BY-SA 4.0"
"53250543","1","53250544","","2018-11-11 16:02:51","","0","1256","<p>I have a tiny web-server written in Python 3 using <a href=""https://docs.python.org/3/library/http.server.html"" rel=""nofollow noreferrer"">http.server</a> which calls the function <code>translate()</code> in method <code>do_GET()</code> like this:</p>

<pre><code>class httpd(BaseHTTPRequestHandler):
    def do_GET(self):
        self.wfile.write(bytes(f'{translate(var[0])}', 'utf-8'))
</code></pre>

<p>Now in this <code>translate()</code> function I have several conditional statements and <code>try</code> and <code>except</code> blocks roughly like this:</p>

<pre><code>def translate(param):
    try:
        # do something
    except SomeError as some_err:
        print(""Error: "" % some_err)
        return """"

    if True:
        try:
            # do something
        except SomeOtherError as some_other_err:
            print(""Error: "" % some_other_err)
            return """"
        except SomeThirdError as some_third_err:
            print(""Third error: "" % some_third_err)
            return """"
    else:
        # additional try and except blocks which print an error and
        # return an empty string
</code></pre>

<p>The code above is simplified, but in principle I return an empty string if an exception happens and thus my web server returns nothing to client if an exception happens.</p>

<p>Is there a more manageable way to handle this? Specifically, I'm looking to:</p>

<ul>
<li>Avoid catching each error via a separate <code>except</code> section, while still supporting an error message dependent on error type.</li>
<li>Avoid writing multiple <code>try</code> / <code>except</code> statements, often nested, within my function.</li>
</ul>

<hr>

<p><strong>Note:</strong> This is a copy of <a href=""https://stackoverflow.com/questions/52901075/pythonic-way-to-handle-exceptions-in-functions"">this now deleted question</a>. The solution from that post is included below, but other answers are welcome.</p>
","9209546","","","","","2018-11-15 21:16:01","Handling multiple exceptions in functions","<python><python-3.x><exception><error-handling><exception-handling>","3","2","0","2018-11-17 17:30:30","","CC BY-SA 4.0"
"54593320","1","54594234","","2019-02-08 13:20:03","","2","19315","<p>I am quite a newbie understanding of how to catch exceptions in python. I have a question regarding those two types of ways of catching exceptions. I only found useful information about ValidationError regarding <a href=""https://stackoverflow.com/questions/18781492/forms-validationerror-and-error-code"">here</a>  </p>

<p>But I did not quite understand if it can be used besides django or what are the error messages that I can expect about it. I saw this code sample regarding the validation of types. </p>

<pre><code>except (TypeError, ValueError) as error:
            LOGGER.error('Error e.g.', exc_info=True)

except ValidationError:
            LOGGER.error('Error e.g', exc_info=True)
</code></pre>

<p>So for <code>TypeError</code> and <code>ValueError</code> for me, it is clear:</p>

<p><strong>exception ValueError</strong></p>

<p>Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.</p>

<p><strong>exception TypeError</strong></p>

<p>Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.</p>

<p><strong>In conclusion,</strong>
I am trying to understanding what would be the advantage of the second code with <code>ValidationError</code>, but it could be tricky as I did not find good documentation about. If someone could share knowledge about ValidationError, I would highly appreciate,</p>

<p>I am raising this question because I am going to use related library and I have not seen the exceptions being treated like this.</p>

<p><a href=""https://pypi.org/project/related/"" rel=""nofollow noreferrer"">https://pypi.org/project/related/</a></p>

<p><strong>Thank you community!</strong></p>
","8826524","","8826524","","2019-02-08 14:42:48","2021-04-11 15:47:40","ValidationError or TypeError, ValueError - Exceptions","<python><django><exception><error-handling><django-validation>","2","5","0","","","CC BY-SA 4.0"
"56008537","1","","","2019-05-06 15:48:16","","0","21","<p>Unfortunately, some of the code base I have to work with and unable to change right now looks something like this:</p>

<pre><code>while True:
    try:
        do_stuff()
    except:
        time.sleep(0.005)
</code></pre>

<p>Which means, any exceptions gets caught, silently.</p>

<p>How can I bypass this horror?</p>

<p>I am using the simplest test code, and I can't easily know when it fails.</p>

<p>I can't raise anything, and I can't use exit()</p>

<p>What is the standard thing to do in this case?</p>
","913098","","","","","2019-05-06 15:48:16","How to announce failure when inside a catch-all statement?","<python><exception><error-handling>","0","2","","","","CC BY-SA 4.0"
"56049481","1","56067572","","2019-05-08 21:47:05","","6","4706","<p>I am trying to create a custom error handler in Flask 1.0.2 and Flask-RESTful 0.3.7, using the guidelines on the ""<a href=""http://flask.pocoo.org/docs/1.0/patterns/apierrors/"" rel=""noreferrer"">Implementing API Exceptions</a>"" page.  (Flask-RESTful has its own way of <a href=""https://flask-restful.readthedocs.io/en/latest/extending.html#define-custom-error-messages"" rel=""noreferrer"">creating custom error messages</a>, but since it doesn't seem to have a way to accept a customized error message at the time of the exception, I am trying to use the vanilla Flask method instead.)</p>

<pre><code>from flask import Flask, jsonify
from flask_restful import Resource, Api

app = Flask(__name__)
api = Api(app)

#########################################

class MyGenericException(Exception):
    status_code = 500
    def __init__(self, message, status_code=None, payload=None):
        Exception.__init__(self)
        self.message = message
        if status_code is not None:
            self.status_code = status_code
        self.payload = payload
    def to_dict(self):
        rv = dict(self.payload or ())
        rv['message'] = self.message
        return rv

@app.errorhandler(MyGenericException)
def handle_generic_error(error):
    response = jsonify(error.to_dict())
    response.status_code = error.status_code
    return response

#########################################

class TestMe(Resource):
    def get(self):
        raise MyGenericException('A generic error', status_code=501)
api.add_resource(TestMe, '/testme', endpoint='TestMe')

#########################################

if __name__ == '__main__':
    app.run(debug=False)
</code></pre>

<p>Calling <a href=""http://127.0.0.1:5000/testme"" rel=""noreferrer"">http://127.0.0.1:5000/testme</a> only returns a generic ""500 Internal Server Error"" message, however, not a 501 error with my custom error text.  It appears that <code>MyGenericException</code> is being raised properly, but Flask seems to ignore it.</p>

<pre><code>[2019-05-08 17:09:18,409] ERROR in app: Exception on /testme [GET]
Traceback (most recent call last):
  File ""C:\Users\testuser\Envs\testenv\lib\site-packages\flask\app.py"", line 1813, in full_dispatch_request
    rv = self.dispatch_request()
  File ""C:\Users\testuser\Envs\testenv\lib\site-packages\flask\app.py"", line 1799, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File ""C:\Users\testuser\Envs\testenv\lib\site-packages\flask_restful\__init__.py"", line 458, in wrapper
    resp = resource(*args, **kwargs)
  File ""C:\Users\testuser\Envs\testenv\lib\site-packages\flask\views.py"", line 88, in view
    return self.dispatch_request(*args, **kwargs)
  File ""C:\Users\testuser\Envs\testenv\lib\site-packages\flask_restful\__init__.py"", line 573, in dispatch_request
    resp = meth(*args, **kwargs)
  File ""C:/Users/testuser/Documents/PyCharm Projects/TestApp/testapp.py"", line 32, in get
    raise MyGenericException('A generic error', status_code=505)
MyGenericException
</code></pre>

<p>The <code>@app.errorhandler</code> decorator seems to be properly set for the custom <code>MyGenericException</code> Exception.  Why is it not being handled by Flask?  </p>

<p>Thanks to anyone who can help.</p>
","5578714","","","","","2019-05-10 16:06:50","Why is my Flask error handler not being called?","<python><exception><flask><error-handling><flask-restful>","2","6","0","","","CC BY-SA 4.0"
"56521799","1","","","2019-06-10 06:54:57","","1","108","<p>I am trying to design a package which has <strong>init</strong>.py and multiple sub modules and each module has multiple classes defined in it. 
I used python's logging library to create logs. 
I want to log any uncaught error to my log file, that may arise when program executes.
I understand overriding sys.excepthook is used to achieve this. So I inserted the following code into all my sub modules at the top after logger definition for that module </p>

<pre><code>def handle_exception(exc_type,exc_value,exc_traceback,logger=logger):
     logger.error(""Uncaught exception"", exc_info=(exc_type, exc_value, 
</code></pre>

<p><code>sys.excepthook = handle_exception</code></p>

<p>But this seems to not solve the problem because RuntimeErrors are still being displayed to console and not logged into the file. </p>

<p>What am I doing wrong here ?</p>
","8307723","","","","","2019-06-10 06:54:57","Over riding sys.excepthook","<python><exception><error-handling>","0","0","","","","CC BY-SA 4.0"
"56524802","1","","","2019-06-10 10:40:05","","2","381","<p>I'm quite happy with this delete view:</p>

<pre><code>def price_unit_delete(request, pk):
    pu = PriceUnit.objects.get(pk=pk)
    template = 'includes/modal/modal_form.html'
    if request.POST:
        pu.delete()
        template = 'dashboard_staff/settings/includes/priceunits.html'
    ctx = {'action': reverse(""dashboard_staff:settings_delete_priceunit"", args=(pu.pk, )),
           'title': 'do you really want to delete me ?',
           'form': PriceUnitDeleteForm(),
           'priceunits': PriceUnit.objects.all()}
    return TemplateResponse(request, template, ctx)
</code></pre>

<p>When an item is referenced somewhere else as a foreign key, it fails. I thought to catch this integrity error (firstly raised by psycopg2 and secondly by django.db itself) using a <code>try</code> block.</p>

<p>Indeed you can do in python console:</p>

<pre><code># in case of ```o``` being referenced somewhere else, returns False

def delete(o):
    try:
        o.delete()
    except:
        return False
</code></pre>

<p>I naively thought to include such a block in the view like this:</p>

<pre><code>   if request.POST:
        try:
            pu.delete()
        except:
            return JsonResponse({'data': _(
                ""You can't delete this object as it is used somewhere else.""
            )}, status=400)
</code></pre>

<p>But in this case the exception is not caught. I wrote this view as a CBV as well, it fails to catch the exception too.</p>

<p>I tried this code in an other project and it works.</p>

<p><strong>Why this doesn't work in case of Integrity exception? and how could I debug it?</strong></p>

<p>Here is the traceback of the exception I want to catch:</p>

<pre><code>  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/db/backends/base/base.py"", line 240, in _commit
    return self.connection.commit()
psycopg2.IntegrityError: update or delete on table ""prices_priceunit"" violates foreign key constraint ""prices_prestationtyp_default_price_unit_i_c6ec94f9_fk_prices_pr"" on table ""prices_prestationtype""
DETAIL:  Key (id)=(1) is still referenced from table ""prices_prestationtype"".


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/core/handlers/exception.py"", line 34, in inner
    response = get_response(request)
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/core/handlers/base.py"", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/core/handlers/base.py"", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File ""/usr/lib/python3.7/contextlib.py"", line 74, in inner
    return func(*args, **kwds)
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/db/transaction.py"", line 240, in __exit__
    connection.commit()
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/db/backends/base/base.py"", line 262, in commit
    self._commit()
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/db/backends/base/base.py"", line 240, in _commit
    return self.connection.commit()
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/db/utils.py"", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File ""/home/emilio/.virtualenvs/rdt_2.0/lib/python3.7/site-packages/django/db/backends/base/base.py"", line 240, in _commit
    return self.connection.commit()
django.db.utils.IntegrityError: update or delete on table ""prices_priceunit"" violates foreign key constraint ""prices_prestationtyp_default_price_unit_i_c6ec94f9_fk_prices_pr"" on table ""prices_prestationtype""
DETAIL:  Key (id)=(1) is still referenced from table ""prices_prestationtype"".
</code></pre>
","1918919","","1918919","","2019-06-15 10:29:58","2019-06-15 10:29:58","Why an exception can't be caught in Django view and how to debug","<python><django><exception><error-handling>","0","3","","","","CC BY-SA 4.0"
"56580217","1","","","2019-06-13 12:11:45","","0","370","<p>I am trying to catch the error that stops the execution of my python script. But I don't want to catch all the errors or exception because some of them are not affecting the success of my scripts they are just guidance or console Info. I only want to catch and stock in a variable the error that cause my python script to stop.
Thanks by advance</p>
","10496347","","","","","2019-06-13 12:24:20","Catch the error which stops the execution of my Python script","<python><python-3.x><exception><error-handling>","2","3","","","","CC BY-SA 4.0"
"56588339","1","","","2019-06-13 20:45:15","","0","51","<p>I have created a tkinter program for calculating gpa, the only part I have left is the error handling part and I just couldn't find a way to write the infinite error handling loop. I am trying to write the loop so when you give a different value to the number of classes other than (1,2,3,4,5,6,7,8) the program doesn't continue until you give number of classes the right value.</p>

<pre><code>from tkinter import *
import math

master = Tk()

master.title('Gpa Calculator')  
master.geometry(""400x400"")
master.resizable(width=False, height=False)  #Makes the window size           fixed, so you can't make it bigger or smaller by hand.

def Print_Entry():
    global print_command
    global Entry_int

    Entry = n_of_classes_entry.get()
    Entry_int = int(Entry)

    Create_Classes()

#A function to destroy and recreate the program
def restart():
    classentries.clear()
    classintegers.clear()
    classintegers_gpa.clear()

    list = master.grid_slaves()
    for l in list:
        l.destroy()
        start_program()

textlist = ['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth',     'Seventh', 'Eight']
classentries = []
classintegers = []
classintegers_gpa = []

#Creates the entry, text, and entry boxes for the classes
def Create_Classes():

    for i in range (0, Entry_int): 
        classentries.append(Entry(master))

    for i in range (0, Entry_int):
        classentries[i].grid(row=1 + i, column=1)

    for i in range (0, Entry_int):
        Label(master, text=textlist[i] + ' grade:').grid(row=i + 1,   sticky=E)

    calculate_button = Button(master, bg=""red"", text=""Calculate"", command=Calculate).grid(row=9, column=1, sticky=W, pady=4)


def Calculate():
    for i in range (0, Entry_int):
        classintegers.append(round(float(classentries[i].get())))

        if classintegers[i] in range(0,50):
            classintegers[i] = 0

        if classintegers[i] in range(50,55):
            classintegers[i] = 1.0

        if classintegers[i] in range(55,60):
            classintegers[i] = 2.0

        if classintegers[i] in range(60,65):
            classintegers[i] = 2.3

        if classintegers[i] in range(65,70):
            classintegers[i] = 2.7

        if classintegers[i] in range(70,75):
            classintegers[i] = 3.0

        if classintegers[i] in range(75,80):
            classintegers[i] = 3.3

        if classintegers[i] in range(80,85):
            classintegers[i] = 3.7

        if classintegers[i] in range(85,110):
            classintegers[i] = 4.0

        classintegers_gpa.append(classintegers[i])

        last_calculate = True


    #  This while loop is for the program to print the   gpa_calculation once.
    if last_calculate == True:
        global gpa_calculation
        gpa_calculation =     round(sum(classintegers_gpa))/len(classintegers_gpa)
        gpa_rounded = float(""{0:.2f}"".format(gpa_calculation))
        printgpa = Label(master, text=""Your Gpa is: "" +     str(gpa_rounded)).grid(row=10,column=1)
        Button(master,text='Restart',command=restart).grid(row=11)
        Print_Entry()


def start_program():
    global n_of_classes
    global n_of_classes_entry
    global n_of_classes_button

    n_of_classes = Label(master, text=""Number of Classes 1-8:"").grid(row=0, sticky=E)
    n_of_classes_entry = Entry(master)
    n_of_classes_entry.grid(row=0, column=1)
    n_of_classes_button = Button(master, bg=""green"", command=Print_Entry,height=1, width=2).grid(row=0, column=2)

start_program()
</code></pre>
","11449782","","11563220","","2019-06-13 20:55:21","2019-06-13 21:12:07","Setting up a error handling loop in tkinter","<python><exception><tkinter><error-handling><valueerror>","1","0","","","","CC BY-SA 4.0"
"56800989","1","","","2019-06-28 04:40:21","","0","39","<p>I am trying to run a file (asana_get_user.py) in C:\Users\WilsonNg\Documents\Internship via python. </p>

<p>However, when I run it, I get an attribute error:</p>

<p><strong>error message</strong></p>

<p><a href=""https://i.stack.imgur.com/pMhlq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/pMhlq.png"" alt=""enter image description here""></a></p>

<p>However, there is another exception error happening after this code is finished for some reason:</p>

<p><strong>exception error</strong></p>

<p><a href=""https://i.stack.imgur.com/eoCQb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eoCQb.png"" alt=""enter image description here""></a></p>

<p>So it opened another file (email.py) within the same folder and created an exception error. </p>

<p>Any idea on why it referenced my email.py file? </p>

<p>asana_get_user.py </p>

<pre><code>import asana

# replace with your personal access token. 
personal_access_token = '0/2c...'

# Construct an Asana client
client = asana.Client.access_token(personal_access_token)
# Set things up to send the name of this script to us to show that you succeeded! This is optional.
client.options['client_name'] = ""hello_world_python""

# Get your user info
me = client.users.me()

# Print out your information
print (""Hello world! "" + ""My name is "" + me['name'] + "" and I my primary Asana workspace is "" + me['workspaces'][0]['name'] + ""."")
</code></pre>

<p>email.py</p>

<pre><code>def create_message(sender, to, subject, message_text):
  """"""Create a message for an email.

  Args:
    sender: Email address of the sender.
    to: Email address of the receiver.
    subject: The subject of the email message.
    message_text: The text of the email message.

  Returns:
    An object containing a base64url encoded email object.
  """"""
  message = MIMEText(message_text)
  message['to'] = to
  message['from'] = sender
  message['subject'] = subject
  return {'raw': base64.urlsafe_b64encode(message.as_string())}

def send_message(service, user_id, message):
  """"""Send an email message.

  Args:
    service: Authorized Gmail API service instance.
    user_id: User's email address. The special value ""me""
    can be used to indicate the authenticated user.
    message: Message to be sent.

  Returns:
    Sent Message.
  """"""
  try:
    message = (service.users().messages().send(userId=user_id, body=message)
               .execute())
    print ('Message Id: %s' % message['id'])
    return message
  except (errors.HttpError, error):
    print ('An error occurred: %s' % error)


subject = ""This is a test subject""
message = ""This is a test content""
sent_to = ""test@test.com""
sender = ""test@test.com""

sending_msg = create_message(sender,sent_to,subject,message)

send_message()
</code></pre>
","11711621","","6053198","","2019-06-28 06:22:38","2019-06-28 07:31:33","Why is my code opening another file and handling error exceptions?","<python><exception><error-handling>","1","0","","","","CC BY-SA 4.0"
"56904459","1","56904575","","2019-07-05 13:55:59","","0","548","<p>I have a script which uses the package pygsheets to upload a dataframe to Google sheets. If the dataframe is empty, the following error appears:</p>

<pre><code>InvalidArgumentValue: provide either cells or values, not both
</code></pre>

<p>So, I have been trying to use a try-except structure to pass when the dataframe is empty, but raising an exception if any other error happens. The code is the following:</p>

<pre><code>try:
    pygsheets code
except InvalidArgumentValue:
    pass
except:
    raise Exception
</code></pre>

<p>However, when I try to execute the lines above, it throws me the following errors:</p>

<pre><code>NameError: name 'InvalidArgumentValue' is not defined
</code></pre>

<p>How could I solve it?</p>
","9621172","","","","","2019-07-05 14:04:00","How to use custom exceptions from packages in your excepts clauses?","<python><exception><error-handling><pygsheets>","1","0","","","","CC BY-SA 4.0"
"57108162","1","","","2019-07-19 08:08:32","","1","299","<p>I am loading multiple csv files daily to a database table.
Source files are in Source folder
Once loading is completed, move to Archieve folder.
Code is working fine.
I am struggle to write exception error handling in this code.
Please help.
Thanks in advance.</p>

<p>My Code in simple format:</p>

<pre><code>Try:
Code to load
Except:
Logger.exception
Else:
Code to move file
</code></pre>

<p>My Original Code:</p>

<pre><code>import logging
import logger
import glob
import os
import pandas as pd
import time
import numpy as np
import shutil
import os
source = ""C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37-32\\Scripts\\SourceFiles\\""
file_titles = ['C1','C2']
all_files = glob.glob(source + ""/*Sales*.csv"")
li = []
for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=None,delimiter=',',names=file_titles,na_filter=False,skiprows=1,low_memory=False)
    li.append(df)
frame = pd.concat(li, axis=0, ignore_index=True)
Reporting_Date = time.strftime(""%Y-%m-%d"")
todaysdate = time.strftime(""%Y%m%d"")

df['CreatedDate'], df['CreatedBy'], df['LastModifiedDate'], df['LastModifiedBy'] = [todaysdate, 'User',todaysdate,'User']

try:
    import pyodbc
    sql_conn = pyodbc.connect(
        ""Driver={SQL Server};""
        ""Server=Server1;""
        ""Database=DB;""
        ""Trusted_Connection=yes;"")
    cursor = sql_conn.cursor()
    for index,row in df1.iterrows():
        cursor.execute(""INSERT INTO Table_Name ('C1','C2') Values (?,?)"", 
                       row['C1'],
                       row['C2']
                      )
        sql_conn.commit()
        cursor.close()
        sql_conn.close()
        print('Data Loading into table Table_Name is successful...')
except:  # something else went wrong
    #set different formats for logging output
    console_logging_format = '%(levelname)s:&amp;amp;nbsp; %(message)s'
    file_logging_format = '%(levelname)s: %(asctime)s: %(message)s'
    # configure logger
    logging.basicConfig(level=logging.DEBUG, format=console_logging_format)
    logger = logging.getLogger()
    # create a file handler for output file
    handler = logging.FileHandler('console_and_file.log')
    # set the logging level for log file
    handler.setLevel(logging.INFO)
    # create a logging format
    formatter = logging.Formatter(file_logging_format)
    handler.setFormatter(formatter)
    # add the handlers to the logger
    logger.addHandler(handler)
    # output logging messages
    logger.info(""save this to the log - info logger"")
    logger.debug(""save this to the log - debug logger"")
    logger.error(""save this to the log - error - logger"")
    logger.warning(""save this to the log - warning - logger"")
    logger.critical(""save this to the log - critical - logger"")
else:
    dest1 = ""C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37-32\\Scripts\\Archieve\\""
    files = os.listdir(source)
    for f in files:
        shutil.move(source+f, dest1)
</code></pre>
","10808871","","","","","2019-07-19 08:08:32","How to handling error loading csv files in python pandas","<python-3.x><pandas><exception><error-handling>","0","0","0","","","CC BY-SA 4.0"
"57160064","1","57160149","","2019-07-23 08:41:06","","0","38","<p>Which if the better practice, if we're not going to do anything with the exception <code>e</code>:</p>

<pre><code>except Exception:
    pass
</code></pre>

<p>OR</p>

<pre><code>except Exception as e:
    pass
</code></pre>

<p>I'm just curious as to whether it's best practice to write <code>except Exception as e:</code> even if we're not accessing the <code>e</code> object afterward.</p>
","4490630","","9835872","","2019-07-23 15:19:08","2019-07-23 15:19:08","Is defining an exception as a variable (except Exception as e) best practice even if you're not accessing e at any point?","<python-3.x><exception><error-handling>","1","0","","","","CC BY-SA 4.0"
"57615537","1","57615976","","2019-08-22 18:53:38","","1","24","<p>I have to define an attribute in a class and I would like to manage error in the most pythonic way.</p>

<p>Here is the code I have tried so far. I can't figure out why I can not ""reach"" the exception in the following code.</p>

<pre class=""lang-py prettyprint-override""><code># global variable to be used in the example

my_dict = {""key1"": {""property"": 10}, ""key2"": {}}

class Test(object):
    @property
    def my_attribute(self):
        try:
            return self._my_attribute
        except AttributeError:
            self._my_attribute = {}
            for key, value in my_dict.items():
                print(key)
                self._my_attribute[key] = value['property']
        except Exception:
            print('error')
            # I would like to manage my error here with a log or something
            print(""I am not reaching here"")
        finally:
            return self._my_attribute


if __name__ == '__main__':
    Test().my_attribute

</code></pre>

<p>I expected to reach the Exception case in the second iteration of the for loop since it is a KeyError (""key2"" has no ""property""). But it just passes by it. In this example, if the script is run, it does not print ""I am not reaching here"". Could anyone explain why I am seeing this wrong? Thanks!</p>
","6623080","","6623080","","2019-08-22 19:05:14","2019-08-22 19:30:22","Python3 missing exception when looping","<python-3.x><exception><error-handling>","1","3","","","","CC BY-SA 4.0"
"58173048","1","58173138","","2019-09-30 18:05:16","","1","124","<p>I am using openCV's cv2 for this, and i am not satisfied with the errors it produces. So I want to catch the error, and then raise a more appropriate error so the programmer gains better perspective of what went wrong:</p>

<pre><code>try:
    cv2.imwrite(out_fn, img_arr, [jpg_q, 100, png_c, 9])
except:
    raise UnsupportedFileFormatError(out_fn)
</code></pre>

<p>However this just throws both exceptions:</p>

<pre><code>Traceback (most recent call last):
  File ""/Users/admin/Documents/Studie/IN3110/assignment4/Blur/blur/funcs/blur.py"", line 25, in blur_image
    cv2.imwrite(out_fn, img_arr, [jpg_q, 100, png_c, 9])
cv2.error: OpenCV(4.1.1) /Users/travis/build/skvark/opencv-python/opencv/modules/imgcodecs/src/loadsave.cpp:662: error: (-2:Unspecified error) could not find a writer for the specified extension in function 'imwrite_'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/Users/admin/Documents/Studie/IN3110/assignment4/Blur/blur/funcs/blur.py"", line 27, in blur_image
    raise UnsupportedFileFormatError(out_fn)
blur.errors.errors.UnsupportedFileFormatError: Unsupported file ending: ""kyk.jp""
</code></pre>

<p>I want to do something like:</p>

<pre><code>if cv2.error as e:
    e.ignoreError()
    throw new appropriateError()
</code></pre>

<p>Thats my way of illustrating something in a totally made-up pseudo programming language, but you get the point. How should I go about doing this? Thanks :))</p>
","9283284","","","","","2019-09-30 18:36:01","Raising more appropriate error after try statement in Python?","<python><exception><error-handling><try-catch><raise>","1","0","","","","CC BY-SA 4.0"
"59046676","1","","","2019-11-26 08:31:22","","2","102","<p>I have one third-party API-kit module (bitmex). I have many calls to this module in my code. The problem is that this API-kit often gives me an error:</p>

<pre><code>HTTPServiceUnavailable
</code></pre>

<p>I understand that this error is due to unstable BitMEX servers. 
But if it occurs during a trading session, it completely destroys my trading. </p>

<p>Here is an example of calling the bitmex module in my code:</p>

<pre><code>balance = bitmex.User.User_getMargin(currency='XBt').result()
</code></pre>

<p>Of course, I tried to solve the problem. 
Here is the function I came up with:</p>

<pre><code>def bitmex_error_protection(request):
    retries = 0
    while True:
        try:
            result = eval(request)
        except bravado.exception.HTTPServiceUnavailable:
            time.sleep(5)
            retries += 1
            if retries &gt; 5:
                raise Exception(""The servers are overloaded, the max number of attempts has been reached"")
        else:
            return result
</code></pre>

<p>As you understand, the meaning of this function is that I pass it a request in a packed form (in a string object). 
After that, there will be ""While True"" until the request is executed without this error. </p>

<p>Here is an example of how I am now making these calls:</p>

<pre><code>balance = bitmex_error_protection(""bitmex.User.User_getMargin(currency='XBt').result()"")
</code></pre>

<p>This solution works, but I understand that it is far from elegant and rests on crutches.</p>

<p>I will be glad if you suggest a couple of ideas or completely alternative methods for solving this problem, where I don't need to use a string object.</p>

<p>Maybe for this, I need to create a class?</p>
","12383200","","","","","2019-11-26 08:31:22","Creating an elegant solution to avoid HTTPServiceUnavailable","<python-3.x><function><exception><error-handling><bitmex>","0","0","0","","","CC BY-SA 4.0"
"59435875","1","71919604","","2019-12-21 11:42:37","","4","3726","<p>How to retry a function if the exception is NOT of a certain type using Python's tenacity?</p>

<p><code>retry_if_exception_type</code> will retry if there is risen an exception of a certain type. <code>not</code> does not seems to work placed before the method nor before its arguments.</p>

<p><code>retry_unless_exception_type</code>, on the other side, loops forever, even if there is not risen error, until there is risen error of a certain type.</p>
","4764353","","325452","","2020-05-03 17:20:06","2022-04-19 04:15:44","Python tenacity: How to retry if exception is NOT of a certain type?","<python><python-3.x><exception><error-handling><python-tenacity>","4","0","","","","CC BY-SA 4.0"
"59856128","1","59858051","","2020-01-22 09:12:44","","0","458","<p>Imagine the following code:</p>

<pre><code>def query(sql, data):
    with conn as cursor:
        try:
            cursor.execute(sql, data)
            rows = cursor.fetchall()
            conn.commit()
        except Exception as e:
            print(cursor._last_executed)
            print(e)
</code></pre>

<p>When calling it, an <code>err.InterfaceError(""(0, '')"")</code> is risen from the last line:
<code>print(e)</code>.</p>

<p>I could even understand it if it was risen from <code>print(cursor._last_executed)</code>, as <code>cursor</code> might be not available or something. But this is not the case.</p>

<p>Why, when my bare exception is supposed to handle everything?</p>

<p>Please ignore the discussion whether bare exceptions are a good or bad practice, this is another topic. The question is how come the exception is risen at all in this case.</p>

<p><strong>Edit</strong>: the exception is risen very rarely, under heavy DB load. You will not be able to reproduce it.</p>

<p><strong>Edit2</strong>: I managed to copy the traceback as text from the sentry report:</p>

<pre><code>InterfaceError: (0, '')
  File ""run_signal_generator.py"", line 39, in &lt;module&gt;
    main()
  File ""run_signal_generator.py"", line 35, in main
    ds.run_trades_stream()
  File ""/home/deribit/rubber-band/data_stream/data_streamer.py"", line 223, in run_trades_stream
    self.process_data(data)
  File ""/home/deribit/rubber-band/data_stream/data_streamer.py"", line 97, in process_data
    self.start_new_candle(timeframe)
  File ""/home/deribit/rubber-band/data_stream/data_streamer.py"", line 117, in start_new_candle
    self.notify()
  File ""/home/deribit/rubber-band/data_stream/observer.py"", line 13, in notify
    observer.update()
  File ""/home/deribit/rubber-band/data_stream/observer.py"", line 26, in update
    self.process_data()
  File ""/home/deribit/rubber-band/data_stream/signal_generator.py"", line 131, in process_data
    return self.process_potential_new_trade()
  File ""/home/deribit/rubber-band/data_stream/signal_generator.py"", line 160, in process_potential_new_trade
    return self.process_enter_signal()
  File ""/home/deribit/rubber-band/data_stream/signal_generator.py"", line 407, in process_enter_signal
    trade_id = self.store_enter_signal_db(data)
  File ""/home/deribit/rubber-band/data_stream/signal_generator.py"", line 522, in store_enter_signal_db
    return query(sql, db_data)[""id""]
  File ""/home/deribit/rubber-band/helpers/mysql.py"", line 19, in query
    print(e)
  File ""pymysql/connections.py"", line 881, in __exit__
    self.commit()
  File ""pymysql/connections.py"", line 798, in commit
    self._execute_command(COMMAND.COM_QUERY, ""COMMIT"")
  File ""pymysql/connections.py"", line 1122, in _execute_command
    raise err.InterfaceError(""(0, '')"")
</code></pre>

<p>Indeed it claims the exception is risen from this line.</p>
","4764353","","4764353","","2020-01-22 09:31:11","2020-01-22 11:02:47","Why is Python raising exception, despite a bare Except block?","<python><mysql><exception><error-handling>","2","5","","","","CC BY-SA 4.0"
"59869542","1","","","2020-01-22 23:11:35","","1","22","<p>Example error handling function:</p>

<pre><code>def read_file():
    try:
        with open(filename, 'rb') as fd:
            x = fd.read()
    except FileNotFoundError as e:
        return(e)
    return(x)
</code></pre>

<p>I would call the function like so:</p>

<pre><code>file = read_file(""test.txt"")
if file:
    #do something
</code></pre>

<p>is there a more efficient/effective way to handle errors than using return multiple times?</p>
","12731222","","12731222","","2020-01-22 23:14:51","2020-01-22 23:29:47","Effective method of error handling a function","<python-3.x><exception><error-handling>","1","3","","","","CC BY-SA 4.0"
"59924513","1","59924555","","2020-01-27 02:11:39","","0","39","<p>I'm trying to run a collatz in Python and I'm having trouble taking into account input that isn't an integer. I would like to have a Try and Except to work within my code that considers the user's non-integer input. Please see my code below.</p>

<pre><code>number = int(input(""Please enter a number: ""))

def collatz(number):
    if number % 2 == 0:
        print(number // 2)
        return number // 2
    elif number % 2 == 1:
        print(number * 3 + 1)
        return number * 3 + 1

while number != 1:
    try:
        number = collatz(int(number))
    except ValueError:
        print(""Something went wrong, please try again..."")
</code></pre>
","6836967","","","","","2020-01-27 03:28:48","How do I use a Try and Exception to raise an error with a print message in Python?","<python><exception><input><error-handling><try-catch>","1","6","","","","CC BY-SA 4.0"
"60159545","1","60159741","","2020-02-10 22:42:08","","0","52","<p>I have a function within a module, that does something like this:</p>
<pre><code>def some_func():

    try:
        # do some error-prone thing
        raise ValueError
        return 'calculated foo'
    except AttributeError as err:
        # handle it
        pass
    except:
        print('Some other error happened, let\'s reraise it....')
        raise
    else:
        pass
    finally:
        return 'default foo'
</code></pre>
<p>Then within my main program,</p>
<pre><code>try:
    val = some_func()
    print('val=', val)
except:
    print('In main except')
    raise
else:
    print('In main else')
    pass
finally:
    print('And we\'re done')
</code></pre>
<p>My output is:</p>
<blockquote>
<p>Some other error happened, let's reraise it....</p>
<p>val= default foo</p>
<p>In main else</p>
<p>And we're done</p>
</blockquote>
<p><strong>No exception is raised.</strong></p>
<p>At the risk of missing something obvious, why isn't the <code>ValueError</code> being reraised within my main?  It almost seems like the <code>return</code> within my <code>finally</code> in <code>some_func()</code> is causing the exception not to be reraised, but this seems odd to me and I can't find any documentation of it.  Here's what I think should be happpening, would like to understand where I'm off.</p>
<ol>
<li>I call <code>some_func()</code> within my main program</li>
<li><code>some_func()</code> raises ValueError</li>
<li>The ValueError is caught within the <code>some_func()</code> <code>except</code>, prints &quot;Some other error happened&quot; and reraises it.</li>
<li>Back in main, I <em>thought</em> the reraised ValueError should get caught by the <code>except</code>, should print 'In main except', reraise, and then the exception itself should be uncaught causing the program to halt.  But I get no exception raised and wind up in the <code>else</code> clause instead.</li>
</ol>
","5124717","","-1","","2020-06-20 09:12:55","2020-02-10 23:00:10","Why isn't my Python exception being re-raised?","<python><exception><error-handling><try-catch>","1","4","","","","CC BY-SA 4.0"
"60508555","1","60508652","","2020-03-03 13:39:59","","1","34","<p>So, I have this code, works very fine, but I want to have possibility if I input x it will return me to the beginning of choosing list I have</p>

<pre><code>def ask2():
while True:
    try:
        number = int(input('Pick a number in range 1-100: '))
    except ValueError:  # just catch the exceptions you know!
        print('That\'s not a number!')
    else:
        if 1 &lt;= number &lt;= 100:  # this is faster
            print(""added"")
        else:
            print('Out of range. Try again')
</code></pre>
","12709847","","","","","2020-03-03 13:52:18","How to I make exception in exception when catching errors in python?","<python><function><if-statement><exception><error-handling>","1","4","","","","CC BY-SA 4.0"
"60688321","1","60688404","","2020-03-14 23:32:35","","0","20","<p>So I have following two different try-except blocks, where I do not understand the output and I believe it is because of Exceptions within except blocks. Even though I found a few questions with a similar title, they did not help me answering my question.</p>

<p>First block:</p>

<pre><code>try:
    try:
        raise IndexError
        x = 5/0
    except ArithmeticError:
        print(""1"")
        print(""2"")
    except IndexError:
        print(""3"")
    finally:
        print(""4"")
except:
    print(""5"")                #Output: 3 4
</code></pre>

<p>Since we caught the IndexError, why does the last exception <strong><em>5</em></strong>? 
(<em>I do understand that the</em> <code>raise IndexError</code> <em>is caught by the second except and we get the</em> <strong><em>3</em></strong>, <em>and since finally is always executed</em>, <strong><em>4</em></strong> <em>is printed out aswell</em>).</p>

<p>Second (related) Question:</p>

<pre><code>try:
    try:
        x = 5/0
    except ArithmeticError:
        print(""1"")
        raise IndexError            # this is different this time!
        print(""2"")
    except IndexError:
        print(""3"")
    finally:
        print(""4"")
except:
    print(""5"")                      #Output: 1 4 5
</code></pre>

<p>How is it, that the <code>raise IndexError</code> does not execute the <code>print(""3"")</code> statement? And why do we get the 5 output this time, since we did not get it in the first example?</p>
","11214376","","11644119","","2020-03-14 23:53:06","2020-03-14 23:53:06","Exception handling within exception","<python-3.x><exception><error-handling><try-catch>","1","0","","","","CC BY-SA 4.0"
"60914445","1","60923884","","2020-03-29 12:43:30","","1","45","<p>I currently have the following code which throws an error on exception just how i want:</p>

<pre><code>try:
    something ....

except Exception as e:
            print(
                'You have encountered the following in the main function \n ERROR: {}'.format(e))
</code></pre>

<p>However in some cases if I get a specific exception such as:</p>

<pre><code>invalid literal for int() with base 10: ''
</code></pre>

<p>I want to change the message of e in the exception to what i want.. how would i go about this?</p>

<pre><code>If e == ""invalid literal for int() with base 10: ''"":
   e = 'my new message'
   print(e)


</code></pre>

<p>but it doesnt seem to be working</p>
","13136937","","","","","2020-04-06 16:49:18","Why does my message for exception not change with my if statement","<python><python-3.x><exception><error-handling><try-catch>","1","3","","","","CC BY-SA 4.0"
"61304761","1","","","2020-04-19 13:00:27","","1","759","<p>Let’s say I have this function :</p>

<pre><code>def a ():

   try :
     b
   except Error:
     raise Error
   return True
</code></pre>

<p>Is this considered good practice to only return true if it is successful otherwise stop block execution with raise error ?  </p>
","8755646","","","","","2020-04-19 15:20:57","Is it good practice to return true when success otherwise raise exception in python?","<python><exception><error-handling>","1","4","","","","CC BY-SA 4.0"
"61309359","1","","","2020-04-19 18:14:09","","2","90","<p>I'm trying to improve my coding and recently came across custom exceptions and the concept of ""Easier to ask for forgiveness than permission"" (EAFP) but it doesn't seem to me that custom exceptions still follow this concept. </p>

<p>For example, in the code below, A looks clean but no custom exception. B also looks clean but no custom exception and does not follow EAFP concept. An alternative to B is replace KeyError with a custom error. C has a custom exception but it seems pretty verbose and for me, it almost seems closer to LBYL. </p>

<p>Is example C typically how custom exceptions are used? (with try/except AND if/else)</p>

<p>Are the extra lines of code in example C worth it for production-grade code that many people will use?</p>

<pre><code>animal_dict={'cat':'mammal', 
             'dog':'mammal', 
             'lizard':'reptile'}

# A - easier to ask for forgiveness not permission (EAFP)
try:
    animal_type = animal_dict['hamster']
except KeyError:
    print('Your animal cannot be found')


#B - look before you leap (LBYL)
if 'hamster' in animal_dict:
    animal_type = animal_dict['hamster']
else:
    raise KeyError('Your animal cannot be found')


# C - with custom exception
class AnimalNotFoundError(KeyError):
    pass

try:
    if 'hamster' in animal_dict:
        animal_type = animal_dict['hamster']
    else:
        raise AnimalNotFoundError('Invalid animal: {}'.format('hamster'))
except AnimalNotFoundError as e:
    print(e)
</code></pre>
","13356169","","","","","2020-04-19 18:25:03","custom exceptions in Python don't seem to follow the ""its easier to ask for forgiveness""?","<python><python-3.x><exception><error-handling>","1","3","","","","CC BY-SA 4.0"
"61498705","1","","","2020-04-29 09:37:51","","0","15","<p>I am trying to use exception handling to prevent my system from crashing, I used the below codes where this csv file does not actually exist. But the system is is continuously giving me the answer. Can someone help me to correct my codes please....help me please</p>

<p>These are my source codes:</p>

<pre><code>while True:
    try:
        import pandas as pd  # data processing, csv file I/O(e.g pd.read_csv)

        df = pd.read_csv('C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv')
        print(df)
    except Exception as err:
            print(""Uh oh, please send me this message: '{}'"" .format(err))
</code></pre>

<p>the results:</p>

<pre><code>Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
Uh oh, please send me this message: '[Errno 2] File b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv' does not exist: b'C:/Users/User/Desktop/Coding/parsehubjsonfileeg/assd.csv''
..................
</code></pre>
","12847828","","","","","2020-04-29 09:43:48","several lines appearing when using exception handling to prevent system from crashing","<python><python-3.x><exception><error-handling>","1","1","","","","CC BY-SA 4.0"
"61811551","1","61811726","","2020-05-15 04:03:13","","0","35","<p>I am trying to understand how to raise a custom error in main method with action. Below is my sudo code but don't work. </p>

<p>I want to raise a custom exception that will go to except in main method with tag, message value. but the below code output a class:</p>

<p>class '<strong>main</strong>.pdv_error_response'</p>

<pre><code>class my_exceptions(Exception):
   """"""Base class for other exceptions""""""
   pass

class pdv_error_response(my_exceptions):
    def __init__(self, tag, message):
        self.tag = tag
        self.tag = message

def tryerror(x):
    if x &lt; 0:
        raise(pdv_error_response('test','output'))

def main():
    try:
        tryerror(-1)
    except:
        if pdv_error_response:
            print(pdv_error_response)

if __name__ == '__main__':
    main()
</code></pre>
","12156545","","","","","2020-05-15 04:21:50","how to raise a custom exception in main method proper?","<python><exception><error-handling><raiserror>","1","0","","","","CC BY-SA 4.0"
"62200818","1","62200917","","2020-06-04 17:36:53","","0","50","<p>Im just starting my python learning journey and need some help with the correct way to raise an exception. </p>

<p>Consider a block of code which loops thru a list and performs a task. If an exception occurs,continue with the program execution. And execute the rest of the code. At the end of the program raise the exception and system the application with non zero code. The idea is the program should continue executing all the tasks, but exit with a non 0 code for an external application to track and report. </p>

<pre class=""lang-py prettyprint-override""><code>save_exc_info = None

def numMatcher(numbers):
    try:
        if numbers != 2:

            print('number match ' + str(numbers))

        else:
            raise ValueError('Number not in list. Will be logged for troubleshooting')  # raise exception and log it

    except ValueError as veer:  # exception 1 caught and saved
        save_exc_info = sys.exc_info()


    except (IOError, OSError) as ioerr:  # exception 2 caught and saved
        save_exc_info = sys.exc_info()


try:
    print('Next step')  # Perform rest of the tasks in the code

except Exception as excp:  # exception 3 caught and saved
    save_exc_info = sys.exc_info()

print('final step')

numlist = [1, 2, 3]

for numbers in numlist:
    numMatcher(numbers)

if save_exc_info is not None:
    traceback.print_exception(*save_exc_info)  # how to return the right exception and print?
    sys.exit(1)  # At the end of the program, exit with non zero code as there was an exception in the program.
</code></pre>
","3135680","","3135680","","2020-06-05 12:34:53","2020-06-05 12:34:53","what is the correct way to handle a caught exception and raise it outside of try block","<python><exception><error-handling><event-handling>","1","1","","","","CC BY-SA 4.0"
"62340629","1","62340716","","2020-06-12 08:39:24","","-1","40","<p>For both developers and users ??? which one is better ? defining a new custom error like this :</p>

<pre class=""lang-py prettyprint-override""><code>def Passed_Empty_Text(Exception):
    def __str__(self):
        return 'Empty String Passed'
raise Passed_Empty String
# And More Exceptions
</code></pre>

<p>or using :</p>

<pre class=""lang-py prettyprint-override""><code> raise ValueError('Passed Empty String')
</code></pre>

<p>which one is better ?? </p>
","13228718","","13228718","","2020-06-12 08:48:42","2020-06-12 08:53:05","Which is better using custom exceptions or using ValueError","<python><python-3.x><exception><error-handling><customization>","1","6","","2020-06-12 10:25:00","","CC BY-SA 4.0"
"62948384","1","63006495","","2020-07-17 06:33:25","","1","375","<p>I have a ViewSet:</p>
<pre class=""lang-py prettyprint-override""><code>...
from handlers import specific_exception_handler...
...

class SomeViewSet(GenericViewSet):
    &quot;&quot;&quot;
    Some custom generic viewset
    &quot;&quot;&quot;
    queryset = SomeModel.objects.all()
    serializer_class = SomeSerializer
    parser_classes = (ParserClassThatReadSpecificXML,)
    renderer_classes = (RendererClassThatConvertResponseIntoSpecificXML,)

    def get_exception_handler(self):
        return specific_exception_handler_function_that_return_specific_xml_format_error

    @action(methods=['post'], detail=False, url_path='some_url', url_name='some_url')
    def register(self, request, format=None):

        some_variable = request.data.get('some_value', None)

        if not some_variable:
            raise ValueError

        return Response(data=some_variable, content_type=&quot;text/xml; charset=shift_jis&quot;)
</code></pre>
<p>I have a render:</p>
<pre class=""lang-py prettyprint-override""><code>...
import xmltodict

class RendererClassThatConvertResponseIntoSpecificXML(BaseRenderer):
    media_type = 'text/xml'
    format = 'txt'
    charset = 'shift_jis'

    def render(self, data, media_type=None, renderer_context=None):
        # return data as non utf-8 xml string
        return xmltodict.unparse(data).encode(&quot;shift_jis&quot;)
</code></pre>
<p>I have a custom error handler:</p>
<pre class=""lang-py prettyprint-override""><code>...
from rest_framework.views import exception_handler

def specific_exception_handler_function_that_return_specific_xml_format_error(exc, context):

    response = exception_handler(exc, context)

    if response is not None:
        status_code = response.status_code
    else:
        status_code = status.HTTP_500_INTERNAL_SERVER_ERROR

    specific_data_that_will_be_converted_into_xml_by_render = {'ERROR_STATUS': status_code}
    headers = {'Retry-After': '300'}

    return Response(data, content_type='text/xml; charset=shift_jis', status=status_code, headers=headers)
</code></pre>
<p>Problem:</p>
<p>If View's <code>raise ValueError</code> will be raised I get my custom XML formatted error message.</p>
<ol>
<li>But if some exception will be happened inside render, there is appears Django's standard <code>500 Server Error</code> message</li>
<li>If I will try to access outside View , there is appears Django's standard <code>404 Server Error</code> message again</li>
</ol>
<p>I want to show my custom XML error anytime.</p>
<p>How can I do it?</p>
","13946204","","13946204","","2020-11-02 08:31:28","2020-11-02 08:31:28","How to override/customize ALL server errors in Django and Django rest framework","<python><django><exception><error-handling><django-rest-framework>","1","0","0","","","CC BY-SA 4.0"
"62951781","1","62952111","","2020-07-17 10:07:38","","-4","427","<p>Suppore below run_test() is my python main method, from that i'm calling function1() and it fails any way because of division by 0 and throws error to its exception block.</p>
<p><strong>But what i want is the exception from function1() should go to calling function exception block, here it is run_test()</strong></p>
<p>With below code i'm not able to achieve, how can i catch a exception from main function.</p>
<pre><code>def function1():
    try:
        a = 10
        b = 0
        c = a / b
    except Exception as e:
        print('Exception ', e)
        
        
def run_test():
    try:
        status = function1()
    except Exception as err:
        print('Main Exception ', err)
</code></pre>
","10429573","","3750257","","2020-07-23 20:33:52","2020-07-23 20:35:04","python3 raise exception to calling method","<python><python-3.x><exception><error-handling>","1","4","","","","CC BY-SA 4.0"
"62952273","1","62952274","","2020-07-17 10:38:09","","12","3806","<p>I'm trying to write a nice error handler for my code, so that when it fails, the logs, traceback and other relevant info get emailed to me.</p>
<p>I can't figure out how to take an exception object and extract the traceback.</p>
<p>I find the <code>traceback</code> module pretty confusing, mostly because it doesn't deal with exceptions at all. It just fetches some global variables from somewhere, assuming that I want the most recent exception. But what if I don't? What if I want to ignore some exception in my error handler? (e.g. if I fail to send me email and want to retry.)</p>
<h1>What I want</h1>
<pre><code>import traceback as tb

# some function that will fail after a few recursions
def myfunc(x):
   assert x &gt; 0, &quot;oh no&quot;
   return myfunc(x-1)

try:
    myfunc(3)
except Exception as e:
    traceback_str = tb.something(e)
</code></pre>
<p>Note that <code>tb.something</code> <strong>takes <code>e</code> as an argument</strong>.</p>
<p>There's lots of questions on Stack Overflow about using the <code>traceback</code> module to get a traceback string. The unique thing about this question is how to get it <em>from the caught exception</em>, instead of global variables.</p>
<p>Result:</p>
<p><code>traceback_str</code> contains the string:</p>
<pre><code>Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 3, in myfunc
  File &quot;&lt;stdin&gt;&quot;, line 3, in myfunc
  File &quot;&lt;stdin&gt;&quot;, line 3, in myfunc
  File &quot;&lt;stdin&gt;&quot;, line 2, in myfunc
AssertionError: oh no
</code></pre>
<p>Note that it contains not just the most recent function call, but the whole stack, and includes the &quot;AssertionError&quot; at the end</p>
","5443120","","","","","2020-07-17 10:38:09","How to catch python exception and save traceback text as string","<python><exception><error-handling><traceback>","1","0","","","","CC BY-SA 4.0"
"63336507","1","63336979","","2020-08-10 08:17:19","","1","640","<p>Can anyone please help with error handling &amp; for loop in my GA reporting API python script?</p>
<p>What I would like it to do is attempt requesting data from the API an <em>n</em> number of times (5 times), if there is an error while pulling the data (generally &quot;Service Unavailable&quot;), log it (<em>log_progress</em> function), but keep trying for <em>n</em> number of times; eventually, if the number of attempts reaches the maximum amount and the API is still returning an error, run a <em>send_email</em> function (which will notify me that some data was not downloaded) and move on with the code to the next item (there is a wider for loop in the script which loops through different GA views/days).</p>
<pre><code>for n in range(0, 5):
        try: #GA API request
            api_request = {
                'viewId': viewId,
                'dateRanges': {
                    'startDate': datetime.strftime(datetime.now() - timedelta(days = i),'%Y-%m-%d'),
                    'endDate': datetime.strftime(datetime.now() - timedelta(days = i),'%Y-%m-%d')
                },
                'dimensions': [{'name': 'ga:date'},{'name': 'ga:countryIsoCode'}],
                'metrics': [{'expression': 'ga:sessions'}],
                &quot;samplingLevel&quot;:  &quot;LARGE&quot;,                 
                &quot;pageSize&quot;: 100000                                          }

            response = api_client.reports().batchGet(
                body={
                    'reportRequests': api_request
                }).execute()

        except HttpError as error:       
           log_progress('errorLog.txt' , error.resp.reason + &quot; - code will try again&quot;)
           pass
</code></pre>
<p>Unfortunately tesing this script is made more complicated by the randomness of GA errors which rarely seem to happen while I'm running the script manually.</p>
","14079162","","","","","2020-08-10 09:04:00","error handling in for-loop API response with python","<python><for-loop><exception><error-handling><google-analytics-api>","1","1","","","","CC BY-SA 4.0"
"63494956","1","63495206","","2020-08-19 21:03:08","","0","78","<p>recently I began to work with tkinter. I try to create a Grade manager and when I try to save the input from an Entry box, but every way I try, the result is an error or 'None'</p>
<pre><code> def check_value(self,Input_Name):
        Name = Input_Name.get()
        print(Name)
    def add_Student(self, window):
        print(&quot;Yes&quot;)
        Input_Name = tk.Entry(window, bg='blue').pack()
    
        Button(window, text=&quot;Show&quot;, command=lambda: self.check_value(Input_Name)).pack()
</code></pre>
<p>For this piece of code the following error is :</p>
<blockquote>
<p>Exception in Tkinter callback
Traceback (most recent call last):   File &quot;C:\Program
Files\WindowsApps\PythonSoftwareFoundation.Python.3.8_3.8.1520.0_x64__qbz5n2kfra8p0\lib\tkinter_<em>init</em>_.py&quot;,
line 1883, in <strong>call</strong>
return self.func(*args)   File &quot;C:/Users/User/PycharmProjects/pythonProject/main.py&quot;, line 28, in

Button(window, text=&quot;Show&quot;, command=lambda: self.check_value(window.Input_Name)).pack()   File
&quot;C:/Users/User/PycharmProjects/pythonProject/main.py&quot;, line 20, in
check_value
Name = Input_Name.get() AttributeError: 'NoneType' object has no attribute 'get'</p>
</blockquote>
","10702745","","","","","2020-08-19 21:24:07","get() from an Entry Box returns 'None'","<python><exception><tkinter><error-handling>","1","2","","2020-08-19 23:13:25","","CC BY-SA 4.0"
"63979684","1","","","2020-09-20 13:51:31","","1","123","<p>I am using napalm library to connect to Arista vEOS using GNS3. I <strong>intentionally</strong> put the wrong IP just to see how my codes handle an error. But the try and except did not work as intended.</p>
<pre><code>import napalm
import concurrent.futures

def napalm_library(ip):
    driver = napalm.get_network_driver(ip[3])
    optional = {&quot;transport&quot;: &quot;telnet&quot;}

    with driver(hostname=ip[0], username=ip[1], password=ip[2], optional_args=optional) as device:
         device.load_merge_candidate(&quot;test.txt&quot;)
         device.commit_config()

with concurrent.futures.ThreadPoolExecutor() as executor:
    t = executor.submit(napalm_library, ['1.1.1.1','username','pass','ios'])
    try:
        t.result()
    except TimeoutError as err1:
        print(err1)
</code></pre>
<p>instead it gave me this TimeoutError eventho I already try to catch the TimeoutError.</p>
<pre><code>[WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond
Traceback (most recent call last):
  File &quot;C:\Python38-32\lib\site-packages\pyeapi\eapilib.py&quot;, line 436, in send
    self.transport.endheaders(message_body=data)
  File &quot;C:\Python38-32\lib\http\client.py&quot;, line 1225, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File &quot;C:\Python38-32\lib\http\client.py&quot;, line 1004, in _send_output
    self.send(msg)
  File &quot;C:\Python38-32\lib\http\client.py&quot;, line 944, in send
    self.connect()
  File &quot;C:\Python38-32\lib\http\client.py&quot;, line 1392, in connect
    super().connect()
  File &quot;C:\Python38-32\lib\http\client.py&quot;, line 915, in connect
    self.sock = self._create_connection(
  File &quot;C:\Python38-32\lib\socket.py&quot;, line 808, in create_connection
    raise err
  File &quot;C:\Python38-32\lib\socket.py&quot;, line 796, in create_connection
    sock.connect(sa)
TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly r
</code></pre>
<p>Enlighten me, as how am i should handle the error.</p>
","14309811","","14309811","","2020-09-20 15:58:37","2022-03-20 11:32:18","How to properly handle this error while using multi thread","<python><exception><error-handling><timeout><napalm>","1","0","","","","CC BY-SA 4.0"
"64404157","1","","","2020-10-17 15:28:38","","0","134","<p>I am trying to use Twisted and Python together. I need to export exceptions and errors to a file rather than the console incase anything unexpected pops up during runtime and I happen to miss it, however redirecting stderr doesn't seem to work. The error still shows up in the console and it doesn't write to the file (although the file is created).</p>
<p>Here is a minimal example:</p>
<pre><code>from twisted.internet import reactor
import sys

sys.stderr = open('error.log', 'a')

def error_test():
    int(&quot;Hello&quot;)

reactor.callLater(1, error_test)

reactor.run()
</code></pre>
<p>What am I doing wrong?</p>
","5380656","","","","","2020-10-18 14:45:03","Twisted and writing exceptions to stderr","<python><exception><error-handling><twisted><stderr>","1","2","","","","CC BY-SA 4.0"
"64548825","1","64548871","","2020-10-27 05:37:09","","2","62","<p>I have a bunch of functions similar to this structure:</p>
<pre><code>def df():
    try:
        foo = #do some computation
    except Exception:
        foo = #do other computation
    return foo
</code></pre>
<p>I was wondering what would be the difference with this other implementation:</p>
<pre><code>def df():
    try:
        foo = #do some computation
    except Exception:
        foo = #do other computation
    finally:
        return foo
</code></pre>
<p>What should I use in this case? I see it a little bit redundant and also I'm concerned of the time execution, because I have many more functions with this same architecture and I don't know if adding finally would increase the execution time too much or not.</p>
","13071340","","","","","2020-10-27 05:43:15","Should I use finally after try/except?","<python><exception><error-handling>","2","0","","","","CC BY-SA 4.0"
"64715784","1","64715864","","2020-11-06 13:45:17","","0","396","<p>Is there a simple way to hide an error in the IDE printout?</p>
<pre><code>logts = np.log(ts)
plt.plot(logts, amps, &quot;1&quot;, ms=10)
</code></pre>
<p>Is my relevant section of code. Due to <code>ts</code> containing a 0 as its first point, Python isn't overly fond of the <code>np.log(ts)</code> operation. The IDE (Jupyter) throws an error message</p>
<blockquote>
<p>C:\ProgramData\Anaconda3\lib\site-packages\ipykernel_launcher.py:119: RuntimeWarning: divide by zero encountered in log</p>
</blockquote>
<p>But the rest of the code runs fine, the relevant pair of results (the ts = 0, and respective <code>amps</code> value are removed later anyway when plotting best fit lines to stop problems with infinities. But I would still like to supress that specific error message, since I know what's causing it and it's otherwise fine.</p>
","4470989","","","","","2020-11-06 14:12:57","How do I suppress a warning in the IDE in Python? (IDE is Jupyter)","<python><exception><error-handling><runtime-error><suppress-warnings>","1","3","","","","CC BY-SA 4.0"
"65073730","1","65074870","","2020-11-30 12:38:17","","0","395","<p>I am stuck with this homework:</p>
<blockquote>
<p>rewrite the following program so that it can handle any invalid inputs from user.</p>
</blockquote>
<pre><code>def example():
   for i in range(3)
       x=eval(input('Enter a number: '))
       y=eval(input('enter another one: '))
       print(x/y)
</code></pre>
<p>l tried tried the try... except ValueError, but the program is still failing to run.</p>
","14734961","","6925185","","2020-11-30 13:41:12","2020-12-03 10:59:41","python handling invalid inputs from a user","<python><exception><error-handling><invalid-characters>","2","1","","","","CC BY-SA 4.0"
"53396944","1","","","2018-11-20 16:02:41","","1","47","<p>I've written some web-scraping code that is currently working, however quite slow. Some background: I am using Selenium as it requires several stages of clicks and entry, along with BeautifulSoup. My code is looking at a list of materials within subcategories on a website(image below) and scraping them. If the material scraped from the website is one of the 30 I am interested in (lst below), then it writes the number 1 to a dataframe which I later convert to an Excel sheet. </p>

<p>The reason it is so slow, I believe anyway, is due to the fact that there are a lot of exceptions. However, I am not sure how to handle these besides try/except. The main bits of code can be seen below, as the entire piece of code is quite lengthy. I have also attached an image of the website in question for reference.</p>

<pre><code>lst = [""Household cleaner and detergent bottles"", ""Plastic milk bottles"", ""Toiletries and shampoo bottles"", ""Plastic drinks bottles"", 
       ""Drinks cans"", ""Food tins"", ""Metal lids from glass jars"", ""Aerosols"", 
       ""Food pots and tubs"", ""Margarine tubs"", ""Plastic trays"",""Yoghurt pots"", ""Carrier bags"",
       ""Aluminium foil"", ""Foil trays"",
       ""Cardboard sleeves"", ""Cardboard egg boxes"", ""Cardboard fruit and veg punnets"", ""Cereal boxes"", ""Corrugated cardboard"", ""Toilet roll tubes"", ""Food and drink cartons"",
       ""Newspapers"", ""Window envelopes"", ""Magazines"", ""Junk mail"", ""Brown envelopes"", ""Shredded paper"", ""Yellow Pages"" , ""Telephone directories"",
       ""Glass bottles and jars""]

def site_scraper(site):
    page_loc = ('//*[@id=""wrap-rlw""]/div/div[2]/div/div/div/div[2]/div/ol/li[{}]/div').format(site)
    page = driver.find_element_by_xpath(page_loc) 
    page.click()
    driver.execute_script(""arguments[0].scrollIntoView(true);"", page)

    soup=BeautifulSoup(driver.page_source, 'lxml')
    for i in x:
        for j in y:
            try:
                material = soup.find_all(""div"", class_ = ""rlw-accordion-content"")[i].find_all('li')[j].get_text(strip=True).encode('utf-8')
                if material in lst:
                    df.at[code_no, material] = 1 
                else:
                    continue 
                continue
            except IndexError:
                continue

x = xrange(0,8) 
y = xrange(0,9)

p = xrange(1,31)

for site in p:
    site_scraper(site)
</code></pre>

<p>Specifically, the i's and j's rarely go to 6,7 or 8 but when they do, it is important that I capture that information too. For context, the i's correspond to the number of different categories in the image below (Automative, Building materials etc.) whilst the j's represent the sub-list (car batteries and engine oil etc.). Because these two loops are repeated for all 30 sites for each code, and I have 1500 codes, this is extremely slow. Currently it is taking 6.5 minutes for 10 codes.</p>

<p>Is there a way I could improve this process? I tried list comprehension however it was difficult to handle errors like this and my results were no longer accurate. Could an ""if"" function be a better choice for this and if so, how would I incorporate it? I also would be happy to attach the full code if required. Thank you!</p>

<p><a href=""https://i.stack.imgur.com/IyH1l.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IyH1l.png"" alt=""enter image description here""></a></p>

<p>EDIT:
by changing </p>

<pre><code>        except IndexError:
            continue
</code></pre>

<p>to </p>

<pre><code>        except IndexError:
            break
</code></pre>

<p>it is now running almost twice as fast! Obviously it is best to exit to loop after it fails once, as the later iterations will also fail. However any other pythonic tips are still welcome :)</p>
","9802825","","9802825","","2018-11-20 16:57:15","2018-11-21 00:53:30","Improve speed/performance of web-scraping with lots of exceptions","<python><exception><web-scraping><error-handling><try-catch>","1","0","","","","CC BY-SA 4.0"
"51314925","1","","","2018-07-12 21:46:01","","0","312","<p>I'm doing an application to download all files form a Telegram channel. When downloading I receive the error message: </p>

<pre><code>telethon.errors.rpcbaseerrors.BadMessageError: Message too old, and it cannot be verified 
whether the server has received a message with this msg_id or not.
</code></pre>

<p>Anyone know how to fix this?</p>
","1672603","","","","","2018-07-19 13:35:56","How to fix the Telethon's exception BadMessageError","<python><exception><error-handling><telethon>","1","2","","","","CC BY-SA 4.0"
"51212178","1","","","2018-07-06 14:03:29","","2","80","<p>i have never done anything serious with python, but i found it very handy for what i wanted to do.<br>I'd like to ask a simple question, how do i raise a custom exception if the third party class already raises it? I am using <a href=""https://github.com/palantir/sqlite3worker"" rel=""nofollow noreferrer""> This class</a> to make asyncronous sql query on my database, and it raises ""UNIQUE constraint failed"" which is fine for me but i don't want it to log it.<br><br> This is my simple code</p>

<pre><code> try:
    querypost = ""INSERT INTO post(link,Commenti,data) VALUES('""+link+""','""+str(n_commenti)+""','""+str(data)+""')""
    sql_worker.execute(querypost);
except (IntegrityError) as error:
    print(""test"")
</code></pre>

<p>The problem with this is that it never reaches my print and it prints his own excpetion.<br>
How do i make it shut up? </p>

<p><strong>EDIT:</strong></p>

<p>This piece of code made the logger suppress the unwanted message:<br>logging.getLogger(""sqlite3worker"").setLevel(logging.CRITICAL)<br><br>
Thanks to @AChampion</p>
","3721797","","3721797","","2018-07-06 14:22:21","2018-07-06 14:22:21","Python Custom Exception","<python><exception><error-handling>","0","6","","2018-07-06 14:08:28","","CC BY-SA 4.0"
"49050030","1","49050132","","2018-03-01 12:45:55","","0","283","<p>I did this example but it does not run with the try and except handling errors in Python.    </p>

<pre><code>def my_fun(numCats):
    print('How many cats do you have?')
    numCats = input()
    try:
        if int(numCats) &gt;=4:
            print('That is a lot of cats')
        else:
            print('That is not that many cats')
    except ValueError:
        print(""Value error"")
</code></pre>

<p>I tried:</p>

<pre><code>except Exception:
except  (ZeroDivisionError,ValueError) as e:
except  (ZeroDivisionError,ValueError) as error:
</code></pre>

<p>I did other example and it was able to catch <code>ZeroDivisionError</code>
I am using Jupyter notebook Python 3. 
<strong>Any help in this matter is highly appreciated.</strong></p>

<p>I am calling </p>

<pre><code>my_fun(int('six'))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-39-657852cb9525&gt; in &lt;module&gt;()
----&gt; 1 my_fun(int('six'))

ValueError: invalid literal for int() with base 10: 'six'
</code></pre>
","8826524","","8826524","","2018-03-01 12:58:06","2018-03-01 13:00:39","Try and Except Python","<python><function><exception><error-handling><try-catch>","2","5","","","","CC BY-SA 3.0"
"49015001","1","","","2018-02-27 17:54:34","","3","367","<p>The following causes some additional strange output to be printed</p>

<pre><code>import warnings

def foo(x):

    if x &gt; 100:
        msg = ""Warning! x is big!""
        warnings.warn(msg)
    return True

foo(999999)
</code></pre>

<p>Instead of only printing:    </p>

<pre><code>UserWarning: Warning! x is big!
</code></pre>

<p>we get: </p>

<pre><code>UserWarning: Warning! x is big!
   warnings.warn(msg)
</code></pre>

<p>Sometimes I have even gotten: </p>

<pre><code>UserWarning: Warning! x is big!
   ValueError [blah, blah, blah]
</code></pre>
","6676101","","6676101","","2018-03-10 07:10:48","2018-03-10 07:10:48","How do we prevent warning from printing strange text at the end of its message?","<python><python-3.x><exception><error-handling><warnings>","1","0","","2018-02-27 17:57:33","","CC BY-SA 3.0"
"45153588","1","","","2017-07-17 20:59:47","","0","101","<blockquote>
  <p>How would I keep track of exceptions so that I could find out whether
  or not they have been handled or not?</p>
</blockquote>

<p>Lets say I have some error handling code:</p>

<pre><code>def errorWindow(self, error_):
    self.filewin = Toplevel(self.master)
    self.NothingLabel = Label(self.filewin,text=error_,justify=CENTER)
    self.NothingLabel.pack()
    self.nbutton = Button(self.filewin, text=""OK"", command=self.filewin.destroy)
    self.nbutton.pack(pady=5)

# When it is called it looks something like this:
    try:
       # Function that is being checked for exceptions
    except Exception as e:
        error_ = 'Failure the following error was encountered: \n {}'.format(e)
        self.errorWindow(error_)
</code></pre>

<p>What I want to do is use the function I have built to handle errors I expect will happen on the users end. I would like to have a function that also creates an error window for users when an error occurs that I do not expect. Ideally this should only happen if an exception has occurred. So is there a way to identify and track specific exceptions so that I may handle the unexpected errors in a different way than the ones that I do expect?</p>
","7416542","","","","","2017-07-17 20:59:47","Keeping track of exceptions and whether or not they have been handled","<python><exception><error-handling><exception-handling>","0","2","","","","CC BY-SA 3.0"
"44516268","1","44516910","","2017-06-13 08:35:34","","0","92","<p>I am quite newby into dealing with exceptions in python.</p>

<p>Particularly I would like to create an exception when:</p>

<pre><code>URLError: &lt;urlopen error [Errno 11001] getaddrinfo failed&gt;`
</code></pre>

<p>and another one when:</p>

<pre><code>HTTPError: HTTP Error 404: Not Found
</code></pre>

<p>If i am right it shall be in both cases a  :</p>

<pre><code>except IOError:
</code></pre>

<p>however I would like to carry out one code when one error arises and a different code when the other error arises, </p>

<p>How could I differentiate these 2 exceptions? </p>

<p>Thank you</p>
","7836530","","7836530","","2017-06-13 08:51:32","2017-06-13 09:14:32","Differentiate errors arising in python","<python><exception><error-handling><exception-handling>","1","0","","","","CC BY-SA 3.0"
"43751989","1","","","2017-05-03 05:48:19","","0","297","<p>I have this piece of code which loads a library, but then it dies. I've surrounded it with the try/except pass, but it still dies. Does anyone know how to get past the error and continue with the print statement below:      </p>

<pre><code>      try: 
         library.load(""test_data/polo.lib"")
      except:
         pass

     defines = library.get_defines()
     print defines
     assert ( len(defines) == 3), ""Make sure we have 3 defines""
</code></pre>

<p>The error I get right after the library.load line of code is:</p>

<pre><code>scci18910&gt; python test_001_library.py
Loading library test_data/polo.lib   
terminate called after throwing an instance of 'std::string'
Abort
</code></pre>
","6693849","","2855071","","2017-05-03 08:55:16","2017-05-03 08:55:16","Except an error in Python from a loaded C library","<python><exception><error-handling>","1","2","","","","CC BY-SA 3.0"
"41980401","1","","","2017-02-01 12:57:18","","2","123","<p>I'm writing a somewhat small python program and am concerned about the way I handle exceptions in my class methods and other functions.
To be more precise, I'm trying to think over all the pros and cons of using <code>sys.exit</code> (aka <code>raise SystemExit</code>) vs <code>raise AppropriateError</code>.
For instance, let's say, I've got the following function that prints the contents of a text file:</p>

<pre><code>def print_lines(path_to_file):
    with open(path_to_file, 'r') as f:
        for line in f.readlines():
            print(line)
</code></pre>

<p>It's reasonable to check if the file provided to the function actually exists, so one way to do this is:</p>

<pre><code>import sys
import os


def print_lines(path_to_file):
    if os.path.isfile(path_to_file):
        with open(path_to_file, 'r') as f:
            for line in f.readlines():
                print(line)
    else:
        sys.exit('Error: file not found')
</code></pre>

<p>Another way would be to <code>raise FileNotFoundError</code> which will then be intercepted and appropriately handled somewhere outside the function. At the first blush, it seems like using <code>sys.exit</code> saves you the trouble of writing additional lines of code (namely, the try-except-else block) and thus seems to be the way to go. So my question is:
in cases like that, when do you have to go for the sys.exit and when would it be better to raise an appropriate exception/error?</p>
","4803153","","58635","","2017-02-01 13:14:19","2017-02-01 13:14:19","processing special cases in python using sys.exit vs raise SomeError","<python><exception><error-handling><exception-handling>","0","3","","","","CC BY-SA 3.0"
"40722921","1","40723148","","2016-11-21 14:48:19","","1","548","<p>When I ask for an attribute of a python object that does not exist, I get an AttributeError, however I have not found the name of the requested attribute among the fields of the error object. The only place which mentions the name of the requested attribute is <code>args</code> member of the error.</p>

<p>It seems to me a bit of an annoyance to parse the error message in order to get the name of the missing attribute. Is there any way to get the name of the missing attribute without parsing the error message?</p>

<p>Demo:</p>

<pre><code>class A:
    def f(self):
        print('in A')


class B:
    pass


class C:
    def f(self):
        print('in C')
        raise AttributeError()


def call_f(o):
    try:
        o.f()
    except AttributeError as e:
        # instead of e.args[0].endswith(""'f'"") it would be nice to do
        # e.missing_attribute == 'f'
        if e.args and e.args[0].endswith(""'f'""):
            print(e.args) # prints (""'B' object has no attribute 'f'"",)
        else: raise

if __name__ == '__main__':
    a = A()
    b = B()
    c = C()

    call_f(a)
    call_f(b)
    call_f(c)
</code></pre>
","18775","","18775","","2016-11-21 19:56:50","2016-11-21 19:56:50","How to determine which attribute an AttributeError refers to?","<python><exception><error-handling><standard-library><anti-patterns>","1","5","","","","CC BY-SA 3.0"
"40237349","1","40237448","","2016-10-25 10:19:50","","3","101","<p>Lets say we have the following code:</p>

<pre><code>print(""..."")
might_throw_type_error()
print(""..."")
might_throw_index_error()
</code></pre>

<p>If we want to handle the exceptions that those functions might arise what is the preferred way:</p>

<hr>

<p>Full split of ""business"" code and error handling</p>

<pre><code>try:
    print(""..."")
    might_throw_type_error()
    print(""..."")
    might_throw_index_error()
except IndexError:
    # index error handling logic
    raise
except TypeError:
    # index error handling logic
    raise
</code></pre>

<hr>

<p>Split of logic and error handling but try starting at the first statement that might raise</p>

<pre><code>print(""..."")
try:
    might_throw_type_error()
    print(""..."")
    might_throw_index_error()
except IndexError:
    # index error handling logic
    raise
except TypeError:
    # index error handling logic
    raise
</code></pre>

<hr>

<p>Exception handling should only wrap statements we expect to raise</p>

<pre><code>print(""..."")
try:
    might_throw_type_error()
except TypeError:
    # index error handling logic
    raise
print(""..."")
try:
    might_throw_index_error()
except IndexError:
    # index error handling logic
    raise
</code></pre>

<hr>

<p>Note that if we capture the exception we don't want to continue</p>
","1210060","","1210060","","2016-10-25 10:44:55","2016-10-26 08:10:02","Correct extent of the exception handling block","<python><exception><error-handling><code-readability>","2","3","","","","CC BY-SA 3.0"
"39892380","1","","","2016-10-06 09:29:33","","0","48","<p>My code downloads files from an online file storage web service and unzip them. To run my script, I give it a date as argument (as mentioned here below). I want to add an error message if the date did not match any documents.</p>

<p>So assuming that I have one month of data (July), a valid date is an existing folder wich contains informations about the date in question (example : 07Jul2016). Obviously, a wrong date is an unexisting folder in my online file storage web service (example : 18Aug2016).</p>

<p>This is what I'm supposed to do in my main function :</p>

<pre><code>download_usrm(date = sys.argv[1]) 
</code></pre>

<p>And obviously, this is my command line to run my script :</p>

<pre><code>python Extractor.py 07Jul2016
</code></pre>

<p>This is the code in question (This is just the try/except part):</p>

<pre><code>if key_element.startswith(date):

    try:                
        if not os.path.exists(working_directory+ '/' +date_file+ '/'+parentKey):
            os.makedirs(working_directory+ '/' +date_file+ '/'+parentKey)
        key.get_contents_to_filename(working_directory+ '/' +date_file+ '/'+keyString)

       for f in glob.glob(working_directory+ '/' + date_file+ '/'+ 'usrm' + '/'+ file_name+ '*.zip'):
           zip_ref = zipfile.ZipFile(f, 'a')
           zip_ref.extractall(working_directory + '/' + date_file+ '/'+ 'usrm' + '/' + file_id)
           zip_ref.close()
           os.remove(f)

    except Exception as e:
        print('ERROR MESSAGE : Your search did not match any documents. Try rynning with another date.', e)
</code></pre>

<p>So with a valid date, my code is normally running. With a wrong date, I have nothing. The error message is not displayed.</p>

<p>What might be wrong? Any help appreciated. Thx !</p>
","6485635","","","","","2016-10-06 09:29:33","Python Exceptions Handling : Exception don't work","<python><exception><error-handling><exception-handling><try-catch>","0","4","","","","CC BY-SA 3.0"
"31514257","1","31593459","","2015-07-20 10:33:15","","4","1379","<p>The below code catches <code>Not Found</code> exceptions:  </p>

<pre><code>@app.errorhandler(404) 
def default_handler(e):
    return 'not-found', 404
</code></pre>

<p>The problem is that when I use general purpose <code>errorhandler</code> it fails to catch <code>404</code> errors:  </p>

<pre><code>@app.errorhandler(Exception)
def default_handler(e):
    return 'server-error', 500
</code></pre>

<p>For the time being I use to error handler one for <code>404</code> and another for other errors. Why <code>Not Found</code> exceptions are not caught by the second one? Is there a way to use one <code>errorhandler</code>?</p>

<p><strong>EDIT:</strong><br>
routes are handles by both <code>flask-restful</code> and <code>@app.route()</code>. <code>flask-restful</code> is used for handling resources and <code>@app.route()</code> for those who are not applicable to resources.</p>
","1061008","","1061008","","2015-07-21 05:32:27","2015-07-23 16:47:23","Invalid routes are not caught by @app.errorhandler(Exception) in flask","<python><exception><error-handling><flask>","1","2","","","","CC BY-SA 3.0"
"31146855","1","31147008","","2015-06-30 19:30:29","","1","128","<p>This is probably a really silly error, but alas I am relatively new to Python and I find this error perplexing so any help would be appreciated. It's probably a relatively simple error, but searches on the site have so far not solved the issue. Here is the method that is giving me all of these problems:</p>

<pre><code>def loggable(func):
    def log(self, *args, **kwargs):
        try:
            return func(self, *args, **kwargs)
        except Exception as ex:
            import traceback
            import sys
            tb = sys.exc_info()[2]
            exception_string = traceback.format_exception(type(ex), ex, tb)
            [self.error_log.appendText(item) for item in exception_string]

            m = qg.QMessageBox()
            m.setIcon(m.Warning)
            m.setText(ex.args[0])
            try:
                m.setInformativeText(str(ex.args[1]))
            except IndexError:
                pass
            try:
                m.setDetailedText(str(ex.args[2]))
            except IndexError:
                pass
            m.exec_()
            raise

    return log
</code></pre>

<p>The exception from this line </p>

<pre><code>m.setDetailedText(str(ex.args[2]))
</code></pre>

<p>is being thrown even though it's inside of not one but TWO catch blocks. I am trying to figure out what the issue could be and any help would be appreciated. </p>

<p>Here is the traceback:</p>

<pre><code>Traceback (most recent call last):
  File ""/home/skylion/Git/popupcad/popupcad/guis/editor.py"", line 335, in &lt;lambda&gt;
    popupcad.manufacturing.joint_operation2.JointOperation2)}})
  File ""/home/skylion/Git/popupcad/popupcad/guis/editor.py"", line 51, in log
    m.setDetailedText(str(ex.args[2]))
IndexError: tuple index out of range
</code></pre>
","2444240","","2444240","","2015-06-30 19:33:45","2015-06-30 19:51:35","Python IndexError being thrown even though it's inside two except blocks","<python><python-2.7><exception><error-handling><runtimeexception>","2","2","","","","CC BY-SA 3.0"
"30834172","1","","","2015-06-14 20:26:08","","10","12287","<p>I have some code that iterates through a series of URLs. If there is an error in my code because one of the URLs does not contain a valid JSON body, I want the error generated to be printed to screen, but then the code moves onto the next iteration. A simple version of my code is:</p>

<pre><code>for a in myurls:

    try:

        #mycode

    except Exception as exc:

        print traceback.format_exc()
        print exc
        pass
</code></pre>

<p>However this prints the error to screen and ends execution of the code. Is there a way I can get the error to continue execution by moving to the next iteration of my 'for' loop?</p>
","3045351","","3045351","","2015-06-14 20:34:33","2015-06-14 20:34:33","Print error to screen but continue code execution","<python><exception><error-handling>","1","1","0","","","CC BY-SA 3.0"
"25523361","1","25523456","","2014-08-27 09:20:49","","3","389","<p>I'm running some terminal commands from within Python using the <a href=""https://docs.python.org/2/library/subprocess.html#subprocess.check_output"" rel=""nofollow"">subprocess.check_output() call</a>. This works all fine when it returns correct results. When interacting with the bitcoin daemon I can get several responses however. For example, the raw output (as seen on a normal bash command line) can be:</p>

<pre><code>: Cannot obtain a lock on data directory /home/kramer65/.bitcoin. Bitcoin is probably already running.
</code></pre>

<p>or</p>

<pre><code>error: couldn't connect to server
</code></pre>

<p>Both these responses give an error code 1 however. I tried printing out the following attributes of the <code>subprocess.CalledProcessError as e</code>, which in both cases results in the same outputs (except for the <code>cmd</code> attribute of course:</p>

<pre><code>print e.args, e.cmd, e.message, e.output, e.returncode
#       ()   'BTC'                            1
#       ()   'BTC getinfo'                    1
</code></pre>

<p>I guess the only thing that distincts the two errors, is the raw string that is outputted on the command line which I listed above. So my question is: how can I get the raw string that is shown on the command line from within Python?</p>
","1650012","","","","","2014-08-27 09:25:24","How to know the exact output from a Python subprocess.check_output() call?","<python><bash><exception><error-handling>","1","0","0","","","CC BY-SA 3.0"
"24522290","1","","","2014-07-02 03:12:57","","59","57765","<p>Try as I might, I can't seem to catch the sqlalchemy IntegrityError correctly:</p>

<pre><code>from sqlalchemy import exc

try:
    insert_record()
except exc.IntegrityError, exc:
    print exc # this is never called
    handle_elegantly() # this is never called
</code></pre>

<p>As what one might expect:</p>

<pre><code>IntegrityError: (IntegrityError) insert or update on table ""my_table"" 
                violates foreign key constraint ""my_table_some_column_fkey""
</code></pre>

<p>I've tried to explicitly:</p>

<pre><code>from sqlalchemy.exc import IntegrityError
</code></pre>

<p><strong>UPDATE:</strong></p>

<p>I found something that seems to fit what's happening here, where Integrity Error isn't thrown until the session is flushed to the db, and after the <code>try</code>/<code>except</code>blocks have been executed: <a href=""https://stackoverflow.com/questions/11313935/trying-to-catch-integrity-error-with-sqlalchemy"">Trying to catch integrity error with SQLAlchemy</a></p>

<p>However, adding <code>session.flush()</code> in the <code>try</code> block yields an <code>InvalidRequestError</code>:</p>

<pre><code>ERROR:root:This Session's transaction has been rolled back due to a previous 
           exception during flush. To begin a new transaction with this Session, 
           first issue Session.rollback(). 
           Original exception was: (IntegrityError)
</code></pre>
","2392486","","-1","","2017-05-23 11:47:13","2022-11-13 17:28:43","cannot catch SQLAlchemy IntegrityError","<python><exception><exception-handling><error-handling><sqlalchemy>","5","8","0","","","CC BY-SA 3.0"
"22338300","1","22340836","","2014-03-11 22:46:45","","0","96","<p>I use this code to write into a <code>.log</code> file when there is an uncaught exception : </p>

<pre><code>import sys
import traceback

def uncaught_exc_handler(ex_cls, ex, tb):
   with open('mylog.log', 'w') as f: 
      traceback.print_last(file=f)

sys.excepthook = uncaught_exc_handler

1/0
</code></pre>

<p><strong>Exemple of output :</strong></p>

<pre><code>Traceback (most recent call last):
  File ""C:\Users\Abc\Desktop\test.py"", line 11, in &lt;module&gt;
    1/0
ZeroDivisionError: integer division or modulo by zero
</code></pre>

<p><strong>How to customize the logging and have this instead :</strong>  </p>

<pre><code>ERROR 11 (test): ZeroDivisionError: integer division or modulo by zero
</code></pre>

<p>?</p>

<p><em>(note :  <code>11</code> is the number of the line where the error occured, <code>test</code> is the current file)</em></p>

<p><em>PS : I thought about parsing these 4 lines, search for ""line"" in the second line, extract the <code>int</code> nearby, etc.   but that's a rather dirty method, and I imagine this won't work robustly</em></p>
","1422096","","","","","2014-03-12 02:31:00","Customize traceback output","<python><exception><logging><error-handling><traceback>","1","0","","","","CC BY-SA 3.0"
"22132272","1","22132355","","2014-03-02 19:26:36","","24","70514","<p>I'm new to Python and struggling with handling self-defined errors. When my code spots the error, I want it to throw an error in red font and take me back to the Python terminal without killing Python.</p>

<p>I came across sys.exit() looking for an answer, but it quits Python completely. Do you know of an alternative that throws back an error in red font <strong><em>and</em></strong> takes me back to the terminal?</p>

<p>This is what I have so far.</p>

<pre><code>import sys
def do_something(parameter):
    if parameter &gt; 100:
        # quit the function and any function(s) that may have called it
        sys.exit('Your parameter should not be greater than 100!')
    else:
        # otherwise, carry on with the rest of the code
</code></pre>

<p>Please let me know if I'm not clear and I'll be happy to provide more details. Thank you all in advance!</p>
","2932774","","","","","2014-03-02 19:38:03","How to quit Python function, throwing error statement without quitting Python interpreter","<python><function><exception><error-handling><quit>","2","1","0","2022-10-13 19:32:08","","CC BY-SA 3.0"
"17784849","1","17785098","","2013-07-22 10:08:47","","47","71743","<p>I've seen similar questions to this one but none of them really address the trackback.
If I have a class like so</p>

<pre><code>class Stop_if_no_then():
    def __init__(self, value one, operator, value_two, then, line_or_label, line_number):
        self._firstvalue = value_one
        self._secondvalue = value_two
        self._operator = operator
        self._gohere = line_or_label
        self._then = then
        self._line_number = line_number

    def execute(self, OtherClass):
        ""code comparing the first two values and making changes etc""
</code></pre>

<p>What I want my execute method to be able to do is if self._then is not equal to the string ""THEN"" (in allcaps) then I want it to raise a custom error message and terminate the whole  program while also not showing a traceback.</p>

<p>If the error is encountered the only thing that should print out would look something like (I'm using 3 as an example, formatting is not a problem) this.</p>

<pre><code>`Syntax Error (Line 3): No -THEN- present in the statement.`
</code></pre>

<p>I'm not very picky about it actually being an exception class object, so there's no issue in that aspect. Since I will be using this in a while loop, simple if, elif just repeats the message over and over (because obviously I am not closing the loop). I have seen sys.exit() but that also prints out a giant block of red text, unless I am not using it correctly. I don't want to catch the exception in my loop because there are other classes in the same module in which I need to implement something like this.</p>
","2560035","","1251007","","2018-03-23 13:28:24","2022-02-11 18:37:17","Print an error message without printing a traceback and close the program when a condition is not met","<python><exception><error-handling><customization><traceback>","7","0","0","","","CC BY-SA 3.0"
"10324558","1","","","2012-04-25 22:11:49","","0","45","<p>Is there any way, how to find out line of code, where I called: raise MyError(""something"")??</p>

<p>I have code like this:</p>

<pre><code>class MyError(Exception):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)
</code></pre>

<p>Can I get the line of exception in this class?</p>

<p>Calling like this:</p>

<pre><code>try:
    somethin()
except:
    raise MyError(""abc"")
</code></pre>

<p>Thank you</p>
","1007627","","","","","2012-04-25 22:19:59","Get line of exception in my own exception class","<exception><error-handling><python-3.2>","1","0","","","","CC BY-SA 3.0"
"9979735","1","9979968","","2012-04-02 16:03:27","","1","304","<p>I looking for a ""the way its meant to be done"" solution for the next problem:</p>

<p>I have a class called <code>InputChecker</code>, which takes an input file, checks the content of it, and if all is well, returns the file to next class (<code>ExpofitAgent</code>) for further actions.</p>

<p>However, if the file is not in the form as it should be, <code>InputChecker</code> generates an error message which says on which line of the file the error was found.</p>

<p><code>InputChecker</code> doesn't print the error, it just generates the message which is printed later.</p>

<p>Since I'm doing it in python my method can return a file or a string. How to do a check if the file is ok without the need of including an additional flag?</p>
","1214214","","21640","","2012-04-02 16:55:25","2016-09-21 13:41:43","Best return type policy in python","<python><exception><exception-handling><error-handling>","2","0","","","","CC BY-SA 3.0"
"3950505","1","3950536","","2010-10-16 19:52:34","","1","146","<p>I know try/except can handle errors in my program.
But, is there a way of making <strong>the error be displayed</strong> in the program execution, be ignored and let the execution go on?</p>
","396050","","","","","2010-10-16 20:21:39","How to see the error and still keep the program on in the Python shell?","<python><exception><exception-handling><error-handling>","2","0","","","","CC BY-SA 2.5"
"57518776","1","57518854","","2019-08-16 04:04:40","","0","21","<p>I have two potential file-paths where my application can read specific data from. If one fails, I want it to read from the other.  </p>

<p>My intuitive attempt to do so was with try...except clauses, having something as below:</p>

<pre class=""lang-py prettyprint-override""><code># Try the first file path
try:
    file = open(possible_path_1)
    content = file.read()

# File is not in first location, try the second
except IOError:
    file = open(possible_path_2)
    content = file.read()

# Could not read from either location, throw custom CriticalException
except IOError:
    raise CriticalException(""Could not read the file!"")
</code></pre>

<p>However, this does not seem to work as intuitively expected. The second IOError is never caught. Why is this the case? Is there any ""clean"" way to read from one file path or the other without having to manually check <code>os.path.exists(filepath) and os.path.isfile(filepath)</code>?</p>
","6951909","","","","","2019-08-16 07:58:22","What's the most clean and pythonic way to load data from one of two file paths? Why can't I catch two of the same Exceptions?","<python><file><exception><error-handling>","1","5","","","","CC BY-SA 4.0"
"64904160","1","","","2020-11-19 01:45:32","","1","50","<p>I am trying to use the following code below to try and catch connection errors and what not when I am web scraping. I basically would like to run the code and leave it to do its thing until done so if it gets one of the following errors it just sleeps then tries again. I appreciate that the code isnt exactly replicable but it doesnt always happen sometimes I can run the code which scrapes a few thousand web pages and there will be no errors at all. Other times I have to keep manually starting it again and again. I think originally I borrowed the exceptions from this site but I cant remember where.</p>
<p>I was just wondering why the errors are not being caught and instead crashing my code instead of closing down the webdriver recording that the link was broken for another part of my code to start a new webdriver using selenium.</p>
<pre><code>ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x000002179EB75DC0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it

During handling of the above exception, another exception occurred:

urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='127.0.0.1', port=51368): Max retries exceeded with url: /session/c793ca5f1c29af6f63ab217cbf01aa80/url (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x000002179EB75DC0&gt;: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))

        try:
            inputElement = driver.find_element_by_id('id_num')
            inputElement.send_keys(id)
            time.sleep(.3)
            inputElement.submit()
            time.sleep(.3)

        except ConnectionError as e:
            print(str(e))
            print(&quot;********Portal New connection timed out***********&quot;)
            time.sleep(30)
            driver.close()
            driver.quit()
            link_broken = True
            break
        except ConnectionRefusedError as e:
            time.sleep(30)
            print(str(e))
            print(&quot;*********Portal Connection refused by the server**********&quot;)
            driver.close()
            driver.quit()
            link_broken = True
            break
        except urllib3.exceptions.NewConnectionError as e:
            print(str(e))
            print(&quot;********Portal New connection timed out***********&quot;)
            time.sleep(30)
            driver.close()
            driver.quit()
            link_broken = True
            break
        except urllib3.exceptions.MaxRetryError as e:
            print(str(e))
            time.sleep(30)
            print(&quot;*********Portal Max tries exceeded************&quot;)
            driver.close()
            driver.quit()
            link_broken = True
            break
        except urllib3.exceptions.ConnectTimeoutError as e:
            time.sleep(10)
            print(&quot;**********Timeout error************&quot;)
            driver.close()
            driver.quit()
            link_broken = True
            break
</code></pre>
","8684461","","","","","2020-11-19 01:45:32","Catching connection errors and alike when web scraping","<python><exception><web-scraping><error-handling>","0","0","","","","CC BY-SA 4.0"
"64869794","1","64869852","","2020-11-17 05:26:15","","0","56","<p>[First, I'm sorry for my bad english]
I'm as user not programmer in here, I'm challenged by my teacher to input something in this program to make a non value error or zerodivision error so that the program show the last except <code>&quot;mysterious error happened, sorry&quot;</code>. What should I input?</p>
<pre><code>import math
def main():
    print('A program to find the root of the quadratic equation')
    try:
        a = float(input('a = '))
        b = float(input('b= '))
        c = float(input('c = '))
        discriminant = b * b - 4 * a * c
        squareDisc = math.sqrt(discriminant)
        root1 = (-b + squareDisc) / (2 * a)
        root2 = (-b - squareDisc) / (2 * a)
        print(' x1 =', root1)
        print(' x2 =', root2)
    except ValueError as obyekExcept:
        if str(obyekExcept) == 'math domain error':
            print('\nDont have real root')
        else:
            print('\nYou give non number input')
    except ZeroDivisionError:
        print('\nYou are providing an input which results in zero division')
    except:
        print(&quot;\nmysterious error happen, sorry&quot;)
main()
</code></pre>
","14652320","","3457761","","2020-11-17 05:29:00","2020-11-17 05:45:06","I'm as a user, what should I input to cause a non value-error or zerodivision-error in this code? #python","<python><exception><error-handling>","3","2","0","","","CC BY-SA 4.0"
"64867908","1","","","2020-11-17 01:02:45","","0","22","<pre><code>try:
   a = 1/0
except Exception as e:
    print(e)
</code></pre>
<p>For example, I would like to store the exception into a variable named &quot;Error Log&quot; insert insert the variable into a SQLite table?</p>
","13281432","","13281432","","2020-11-17 03:02:22","2020-11-17 03:02:22","How to capture Exception and use as a normal variable?","<python-3.x><sqlite><variables><exception><error-handling>","0","3","","","","CC BY-SA 4.0"
"62107561","1","62107708","","2020-05-30 19:17:08","","-1","112","<p>I'm trying to web scraping.</p>

<p>using BeautifulSoup, i'm parsing several objects and confronted with a problem.</p>

<p>The problem is, i can't predict where the error occur using ""find"" method.</p>

<p>it looks like</p>

<pre><code>a = soup.find(something).find(something)
b = soup.find(something)
...
f = soup.find(something).find(something)
</code></pre>

<p>among a,b,c,d,e,f, error can happen anywhere and their code should not be revised.</p>

<p>the variable 'b' is not matter because it would be None, which is ok.</p>

<p><strong>but variable 'a' or 'f' is problem, because it would end the script.</strong></p>

<p>i know there is ""try - exception"" grammar but that's not what i want.
of course it can be written like this:</p>

<pre><code>try : 
 a = soup.find(something).find(something)
except Exception:
 a = None
...
try : 
 f = soup.find(something).find(something)
except Exception:
 f = None
</code></pre>

<p>looks ridiculous, doesnt it?</p>

<p>how can i handle it gracefully? </p>
","11686638","","12538467","","2020-05-31 09:46:40","2020-05-31 09:46:40","how can i ignore error in python properly?","<python><exception><error-handling><beautifulsoup>","3","2","","","","CC BY-SA 4.0"
"61917457","1","61917563","","2020-05-20 15:54:41","","2","174","<p>I have a simple python code to open the .csv file and check for exceptions.
The file exists in my current folder and it has more than 2 lines of data.
But the for loop in the else part is not executing.. because I'm getting zero lines to count.</p>

<pre><code># Base class for defining your own user-defined exceptions.
class Error(Exception):
    '''Base class for other exceptions'''
    pass

# own exception class as a subclass of error
class EmptyFileError(Error):
    pass
# raise error
try:
    # open the file (no error check for this example).
    thefile = open('people.csv')
    # count the number of lines in file.
    file_content = thefile.readlines()
    line_count = len(file_content)
    # If there is fewer than 2 lines, raise exception.
    if line_count &lt; 2:
        raise EmptyFileError
# Handles missing file error.
except FileNotFoundError:
    print('\n There is no people.csv file here')
# Handles my custom error for too few rows.
except EmptyFileError:
    print('\nYour people.csv does not have enough stuff')
# Handles all other Exceptions
except Exceptions as e:
    # Show the error
    print('\n\nFailed: The error was '+str(e))
    # Close the file
    thefile.close()
else:
    print(thefile.name)
    # file must be open if we got here
    for one_line in file_content:
        print(list(one_line.split(',')))
    thefile.close()
    print('Success')
</code></pre>

<p>I was able to see the output of the file name and success message from the else part but not the for loop part. There were no exceptions occurred and so the file was never closed before else part.
What could be the problem?</p>

<p><strong>Solved</strong>   with the help of @Ralf answer.</p>
","9530039","","9530039","","2020-05-20 16:04:58","2020-05-20 16:04:58","File has zero lines in else block of python try except code","<python><python-3.x><exception><error-handling>","1","0","","","","CC BY-SA 4.0"
"61895157","1","","","2020-05-19 15:46:40","","0","767","<p>I'm trying to use try/except for error handling working with the pygsheets library. My code is as follows:</p>

<pre><code>def export_col_values(workbook, df, columns):
    """"""for a list of columns, creates a new sheet for each column and exports unique values and their counts to that sheet""""""
    for col in columns:
        value_counts = df[col].value_counts()
        counts_df = pd.DataFrame(value_counts).reset_index()
        counts_df['index'] = counts_df['index'].astype(str)
        try:
            worksheet = workbook.worksheet_by_title(col)
        except WorksheetNotFound:
            workbook.add_worksheet(col)
            worksheet = workbook.worksheet_by_title(col)
        worksheet.set_dataframe(counts_df, start='A1')
    print(f'{len(columns)} sets of column values exported.')
</code></pre>

<p>when the worksheet does not exist, i want to create a new worksheet. however, i get the error 'WorksheetNotFound' is not defined. i understand that I haven't defined the term WorksheetNotFound anywhere in my code, but my understanding was that the 'except' statement would catch any error of the 'WorksheetNotFound' type (this is the error I get when trying to access a worksheet that does not exist). Does try/except not work with all errors? Or are there only certain types of errors that an except statement recognizes? Thanks!</p>
","12507783","","","","","2020-06-09 13:22:18","name 'WorksheetNotFound' is not defined","<python><exception><error-handling><try-except><pygsheets>","1","0","","","","CC BY-SA 4.0"