{"topic": "built-in-functions", "content": ["Previous topic", "Introduction", "Next topic", "Built-in Constants", "This Page", "Report a Bug", "Show Source", "Navigation", "index", "modules", "|", "next", "|", "previous", "|", "Python", "\u00bb", "3.11.0 Documentation", "\u00bb", "The Python Standard Library", "\u00bb", "Built-in Functions", "|", "Built-in Functions", "\u00b6", "The Python interpreter has a number of functions and types built into it that\nare always available.  They are listed here in alphabetical order.", "Built-in Functions", "A", "abs()", "aiter()", "all()", "any()", "anext()", "ascii()", "B", "bin()", "bool()", "breakpoint()", "bytearray()", "bytes()", "C", "callable()", "chr()", "classmethod()", "compile()", "complex()", "D", "delattr()", "dict()", "dir()", "divmod()", "E", "enumerate()", "eval()", "exec()", "F", "filter()", "float()", "format()", "frozenset()", "G", "getattr()", "globals()", "H", "hasattr()", "hash()", "help()", "hex()", "I", "id()", "input()", "int()", "isinstance()", "issubclass()", "iter()", "L", "len()", "list()", "locals()", "M", "map()", "max()", "memoryview()", "min()", "N", "next()", "O", "object()", "oct()", "open()", "ord()", "P", "pow()", "print()", "property()", "R", "range()", "repr()", "reversed()", "round()", "S", "set()", "setattr()", "slice()", "sorted()", "staticmethod()", "str()", "sum()", "super()", "T", "tuple()", "type()", "V", "vars()", "Z", "zip()", "_", "__import__()", "abs", "(", "x", ")", "\u00b6", "Return the absolute value of a number.  The argument may be an\ninteger, a floating point number, or an object implementing", "__abs__()", ".\nIf the argument is a complex number, its magnitude is returned.", "aiter", "(", "async_iterable", ")", "\u00b6", "Return an", "asynchronous iterator", "for an", "asynchronous iterable", ".\nEquivalent to calling", "x.__aiter__()", ".", "Note: Unlike", "iter()", ",", "aiter()", "has no 2-argument variant.", "New in version 3.10.", "all", "(", "iterable", ")", "\u00b6", "Return", "True", "if all elements of the", "iterable", "are true (or if the iterable\nis empty).  Equivalent to:", "def", "all", "(", "iterable", "):", "for", "element", "in", "iterable", ":", "if", "not", "element", ":", "return", "False", "return", "True", "awaitable", "anext", "(", "async_iterator", ")", "\u00b6", "awaitable", "anext", "(", "async_iterator", ",", "default", ")", "When awaited, return the next item from the given", "asynchronous\niterator", ", or", "default", "if given and the iterator is exhausted.", "This is the async variant of the", "next()", "builtin, and behaves\nsimilarly.", "This calls the", "__anext__()", "method of", "async_iterator", ",\nreturning an", "awaitable", ". Awaiting this returns the next value of the\niterator. If", "default", "is given, it is returned if the iterator is exhausted,\notherwise", "StopAsyncIteration", "is raised.", "New in version 3.10.", "any", "(", "iterable", ")", "\u00b6", "Return", "True", "if any element of the", "iterable", "is true.  If the iterable\nis empty, return", "False", ".  Equivalent to:", "def", "any", "(", "iterable", "):", "for", "element", "in", "iterable", ":", "if", "element", ":", "return", "True", "return", "False", "ascii", "(", "object", ")", "\u00b6", "As", "repr()", ", return a string containing a printable representation of an\nobject, but escape the non-ASCII characters in the string returned by", "repr()", "using", "\\x", ",", "\\u", ", or", "\\U", "escapes.  This generates a string\nsimilar to that returned by", "repr()", "in Python 2.", "bin", "(", "x", ")", "\u00b6", "Convert an integer number to a binary string prefixed with \u201c0b\u201d. The result\nis a valid Python expression. If", "x", "is not a Python", "int", "object, it\nhas to define an", "__index__()", "method that returns an integer. Some\nexamples:", ">>>", "bin", "(", "3", ")", "'0b11'", ">>>", "bin", "(", "-", "10", ")", "'-0b1010'", "If the prefix \u201c0b\u201d is desired or not, you can use either of the following ways.", ">>>", "format", "(", "14", ",", "'#b'", "),", "format", "(", "14", ",", "'b'", ")", "('0b1110', '1110')", ">>>", "f", "'", "{", "14", ":", "#b", "}", "'", ",", "f", "'", "{", "14", ":", "b", "}", "'", "('0b1110', '1110')", "See also", "format()", "for more information.", "class", "bool", "(", "x", "=", "False", ")", "\u00b6", "Return a Boolean value, i.e. one of", "True", "or", "False", ".", "x", "is converted\nusing the standard", "truth testing procedure", ".  If", "x", "is false\nor omitted, this returns", "False", "; otherwise, it returns", "True", ".  The", "bool", "class is a subclass of", "int", "(see", "Numeric Types \u2014 int, float, complex", ").\nIt cannot be subclassed further.  Its only instances are", "False", "and", "True", "(see", "Boolean Values", ").", "Changed in version 3.7:", "x", "is now a positional-only parameter.", "breakpoint", "(", "*", "args", ",", "**", "kws", ")", "\u00b6", "This function drops you into the debugger at the call site.  Specifically,\nit calls", "sys.breakpointhook()", ", passing", "args", "and", "kws", "straight\nthrough.  By default,", "sys.breakpointhook()", "calls", "pdb.set_trace()", "expecting no arguments.  In this case, it is\npurely a convenience function so you don\u2019t have to explicitly import", "pdb", "or type as much code to enter the debugger.  However,", "sys.breakpointhook()", "can be set to some other function and", "breakpoint()", "will automatically call that, allowing you to drop into\nthe debugger of choice.\nIf", "sys.breakpointhook()", "is not accessible, this function will\nraise", "RuntimeError", ".", "Raises an", "auditing event", "builtins.breakpoint", "with argument", "breakpointhook", ".", "New in version 3.7.", "class", "bytearray", "(", "source", "=", "b''", ")", "class", "bytearray", "(", "source", ",", "encoding", ")", "class", "bytearray", "(", "source", ",", "encoding", ",", "errors", ")", "Return a new array of bytes.  The", "bytearray", "class is a mutable\nsequence of integers in the range 0 <= x < 256.  It has most of the usual\nmethods of mutable sequences, described in", "Mutable Sequence Types", ", as well\nas most methods that the", "bytes", "type has, see", "Bytes and Bytearray Operations", ".", "The optional", "source", "parameter can be used to initialize the array in a few\ndifferent ways:", "If it is a", "string", ", you must also give the", "encoding", "(and optionally,", "errors", ") parameters;", "bytearray()", "then converts the string to\nbytes using", "str.encode()", ".", "If it is an", "integer", ", the array will have that size and will be\ninitialized with null bytes.", "If it is an object conforming to the", "buffer interface", ",\na read-only buffer of the object will be used to initialize the bytes array.", "If it is an", "iterable", ", it must be an iterable of integers in the range", "0", "<=", "x", "<", "256", ", which are used as the initial contents of the array.", "Without an argument, an array of size 0 is created.", "See also", "Binary Sequence Types \u2014 bytes, bytearray, memoryview", "and", "Bytearray Objects", ".", "class", "bytes", "(", "source", "=", "b''", ")", "class", "bytes", "(", "source", ",", "encoding", ")", "class", "bytes", "(", "source", ",", "encoding", ",", "errors", ")", "Return a new \u201cbytes\u201d object which is an immutable sequence of integers in\nthe range", "0", "<=", "x", "<", "256", ".", "bytes", "is an immutable version of", "bytearray", "\u2013 it has the same non-mutating methods and the same\nindexing and slicing behavior.", "Accordingly, constructor arguments are interpreted as for", "bytearray()", ".", "Bytes objects can also be created with literals, see", "String and Bytes literals", ".", "See also", "Binary Sequence Types \u2014 bytes, bytearray, memoryview", ",", "Bytes Objects", ", and", "Bytes and Bytearray Operations", ".", "callable", "(", "object", ")", "\u00b6", "Return", "True", "if the", "object", "argument appears callable,", "False", "if not.  If this returns", "True", ", it is still possible that a\ncall fails, but if it is", "False", ", calling", "object", "will never succeed.\nNote that classes are callable (calling a class returns a new instance);\ninstances are callable if their class has a", "__call__()", "method.", "New in version 3.2:", "This function was first removed in Python 3.0 and then brought back\nin Python 3.2.", "chr", "(", "i", ")", "\u00b6", "Return the string representing a character whose Unicode code point is the\ninteger", "i", ".  For example,", "chr(97)", "returns the string", "'a'", ", while", "chr(8364)", "returns the string", "'\u20ac'", ". This is the inverse of", "ord()", ".", "The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in\nbase 16).", "ValueError", "will be raised if", "i", "is outside that range.", "@", "classmethod", "\u00b6", "Transform a method into a class method.", "A class method receives the class as an implicit first argument, just like an\ninstance method receives the instance. To declare a class method, use this\nidiom:", "class", "C", ":", "@classmethod", "def", "f", "(", "cls", ",", "arg1", ",", "arg2", "):", "...", "The", "@classmethod", "form is a function", "decorator", "\u2013 see", "Function definitions", "for details.", "A class method can be called either on the class (such as", "C.f()", ") or on an instance (such\nas", "C().f()", ").  The instance is ignored except for its class. If a class\nmethod is called for a derived class, the derived class object is passed as the\nimplied first argument.", "Class methods are different than C++ or Java static methods. If you want those,\nsee", "staticmethod()", "in this section.\nFor more information on class methods, see", "The standard type hierarchy", ".", "Changed in version 3.9:", "Class methods can now wrap other", "descriptors", "such as", "property()", ".", "Changed in version 3.10:", "Class methods now inherit the method attributes (", "__module__", ",", "__name__", ",", "__qualname__", ",", "__doc__", "and", "__annotations__", ") and\nhave a new", "__wrapped__", "attribute.", "Changed in version 3.11:", "Class methods can no longer wrap other", "descriptors", "such as", "property()", ".", "compile", "(", "source", ",", "filename", ",", "mode", ",", "flags", "=", "0", ",", "dont_inherit", "=", "False", ",", "optimize", "=", "-", "1", ")", "\u00b6", "Compile the", "source", "into a code or AST object.  Code objects can be executed\nby", "exec()", "or", "eval()", ".", "source", "can either be a normal string, a\nbyte string, or an AST object.  Refer to the", "ast", "module documentation\nfor information on how to work with AST objects.", "The", "filename", "argument should give the file from which the code was read;\npass some recognizable value if it wasn\u2019t read from a file (", "'<string>'", "is\ncommonly used).", "The", "mode", "argument specifies what kind of code must be compiled; it can be", "'exec'", "if", "source", "consists of a sequence of statements,", "'eval'", "if it\nconsists of a single expression, or", "'single'", "if it consists of a single\ninteractive statement (in the latter case, expression statements that\nevaluate to something other than", "None", "will be printed).", "The optional arguments", "flags", "and", "dont_inherit", "control which", "compiler options", "should be activated\nand which", "future features", "should be allowed. If neither\nis present (or both are zero) the code is compiled with the same flags that\naffect the code that is calling", "compile()", ". If the", "flags", "argument is given and", "dont_inherit", "is not (or is zero) then the compiler\noptions and the future statements specified by the", "flags", "argument are used\nin addition to those that would be used anyway. If", "dont_inherit", "is a\nnon-zero integer then the", "flags", "argument is it \u2013 the flags (future\nfeatures and compiler options) in the surrounding code are ignored.", "Compiler options and future statements are specified by bits which can be\nbitwise ORed together to specify multiple options. The bitfield required to\nspecify a given future feature can be found as the", "compiler_flag", "attribute on the", "_Feature", "instance in the", "__future__", "module.", "Compiler flags", "can be found in", "ast", "module, with", "PyCF_", "prefix.", "The argument", "optimize", "specifies the optimization level of the compiler; the\ndefault value of", "-1", "selects the optimization level of the interpreter as\ngiven by", "-O", "options.  Explicit levels are", "0", "(no optimization;", "__debug__", "is true),", "1", "(asserts are removed,", "__debug__", "is false)\nor", "2", "(docstrings are removed too).", "This function raises", "SyntaxError", "if the compiled source is invalid,\nand", "ValueError", "if the source contains null bytes.", "If you want to parse Python code into its AST representation, see", "ast.parse()", ".", "Raises an", "auditing event", "compile", "with arguments", "source", "and", "filename", ". This event may also be raised by implicit\ncompilation.", "Note", "When compiling a string with multi-line code in", "'single'", "or", "'eval'", "mode, input must be terminated by at least one newline\ncharacter.  This is to facilitate detection of incomplete and complete\nstatements in the", "code", "module.", "Warning", "It is possible to crash the Python interpreter with a\nsufficiently large/complex string when compiling to an AST\nobject due to stack depth limitations in Python\u2019s AST compiler.", "Changed in version 3.2:", "Allowed use of Windows and Mac newlines.  Also, input in", "'exec'", "mode\ndoes not have to end in a newline anymore.  Added the", "optimize", "parameter.", "Changed in version 3.5:", "Previously,", "TypeError", "was raised when null bytes were encountered\nin", "source", ".", "New in version 3.8:", "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT", "can now be passed in flags to enable\nsupport for top-level", "await", ",", "async", "for", ", and", "async", "with", ".", "class", "complex", "(", "real", "=", "0", ",", "imag", "=", "0", ")", "\u00b6", "class", "complex", "(", "string", ")", "Return a complex number with the value", "real", "+", "imag", "*1j or convert a string\nor number to a complex number.  If the first parameter is a string, it will\nbe interpreted as a complex number and the function must be called without a\nsecond parameter.  The second parameter can never be a string. Each argument\nmay be any numeric type (including complex).  If", "imag", "is omitted, it\ndefaults to zero and the constructor serves as a numeric conversion like", "int", "and", "float", ".  If both arguments are omitted, returns", "0j", ".", "For a general Python object", "x", ",", "complex(x)", "delegates to", "x.__complex__()", ".  If", "__complex__()", "is not defined then it falls back\nto", "__float__()", ".  If", "__float__()", "is not defined then it falls back\nto", "__index__()", ".", "Note", "When converting from a string, the string must not contain whitespace\naround the central", "+", "or", "-", "operator.  For example,", "complex('1+2j')", "is fine, but", "complex('1", "+", "2j')", "raises", "ValueError", ".", "The complex type is described in", "Numeric Types \u2014 int, float, complex", ".", "Changed in version 3.6:", "Grouping digits with underscores as in code literals is allowed.", "Changed in version 3.8:", "Falls back to", "__index__()", "if", "__complex__()", "and", "__float__()", "are not defined.", "delattr", "(", "object", ",", "name", ")", "\u00b6", "This is a relative of", "setattr()", ".  The arguments are an object and a\nstring.  The string must be the name of one of the object\u2019s attributes.  The\nfunction deletes the named attribute, provided the object allows it.  For\nexample,", "delattr(x,", "'foobar')", "is equivalent to", "del", "x.foobar", ".", "name", "need not be a Python identifier (see", "setattr()", ").", "class", "dict", "(", "**", "kwarg", ")", "class", "dict", "(", "mapping", ",", "**", "kwarg", ")", "class", "dict", "(", "iterable", ",", "**", "kwarg", ")", "Create a new dictionary.  The", "dict", "object is the dictionary class.\nSee", "dict", "and", "Mapping Types \u2014 dict", "for documentation about this class.", "For other containers see the built-in", "list", ",", "set", ", and", "tuple", "classes, as well as the", "collections", "module.", "dir", "(", ")", "\u00b6", "dir", "(", "object", ")", "Without arguments, return the list of names in the current local scope.  With an\nargument, attempt to return a list of valid attributes for that object.", "If the object has a method named", "__dir__()", ", this method will be called and\nmust return the list of attributes. This allows objects that implement a custom", "__getattr__()", "or", "__getattribute__()", "function to customize the way", "dir()", "reports their attributes.", "If the object does not provide", "__dir__()", ", the function tries its best to\ngather information from the object\u2019s", "__dict__", "attribute, if defined, and\nfrom its type object.  The resulting list is not necessarily complete and may\nbe inaccurate when the object has a custom", "__getattr__()", ".", "The default", "dir()", "mechanism behaves differently with different types of\nobjects, as it attempts to produce the most relevant, rather than complete,\ninformation:", "If the object is a module object, the list contains the names of the module\u2019s\nattributes.", "If the object is a type or class object, the list contains the names of its\nattributes, and recursively of the attributes of its bases.", "Otherwise, the list contains the object\u2019s attributes\u2019 names, the names of its\nclass\u2019s attributes, and recursively of the attributes of its class\u2019s base\nclasses.", "The resulting list is sorted alphabetically.  For example:", ">>>", "import", "struct", ">>>", "dir", "()", "# show the names in the module namespace", "['__builtins__', '__name__', 'struct']", ">>>", "dir", "(", "struct", ")", "# show the names in the struct module", "['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__',", "'__initializing__', '__loader__', '__name__', '__package__',", "'_clearcache', 'calcsize', 'error', 'pack', 'pack_into',", "'unpack', 'unpack_from']", ">>>", "class", "Shape", ":", "...", "def", "__dir__", "(", "self", "):", "...", "return", "[", "'area'", ",", "'perimeter'", ",", "'location'", "]", ">>>", "s", "=", "Shape", "()", ">>>", "dir", "(", "s", ")", "['area', 'location', 'perimeter']", "Note", "Because", "dir()", "is supplied primarily as a convenience for use at an\ninteractive prompt, it tries to supply an interesting set of names more\nthan it tries to supply a rigorously or consistently defined set of names,\nand its detailed behavior may change across releases.  For example,\nmetaclass attributes are not in the result list when the argument is a\nclass.", "divmod", "(", "a", ",", "b", ")", "\u00b6", "Take two (non-complex) numbers as arguments and return a pair of numbers\nconsisting of their quotient and remainder when using integer division.  With\nmixed operand types, the rules for binary arithmetic operators apply.  For\nintegers, the result is the same as", "(a", "//", "b,", "a", "%", "b)", ". For floating point\nnumbers the result is", "(q,", "a", "%", "b)", ", where", "q", "is usually", "math.floor(a", "/", "b)", "but may be 1 less than that.  In any case", "q", "*", "b", "+", "a", "%", "b", "is very\nclose to", "a", ", if", "a", "%", "b", "is non-zero it has the same sign as", "b", ", and", "0", "<=", "abs(a", "%", "b)", "<", "abs(b)", ".", "enumerate", "(", "iterable", ",", "start", "=", "0", ")", "\u00b6", "Return an enumerate object.", "iterable", "must be a sequence, an", "iterator", ", or some other object which supports iteration.\nThe", "__next__()", "method of the iterator returned by", "enumerate()", "returns a tuple containing a count (from", "start", "which\ndefaults to 0) and the values obtained from iterating over", "iterable", ".", ">>>", "seasons", "=", "[", "'Spring'", ",", "'Summer'", ",", "'Fall'", ",", "'Winter'", "]", ">>>", "list", "(", "enumerate", "(", "seasons", "))", "[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]", ">>>", "list", "(", "enumerate", "(", "seasons", ",", "start", "=", "1", "))", "[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]", "Equivalent to:", "def", "enumerate", "(", "sequence", ",", "start", "=", "0", "):", "n", "=", "start", "for", "elem", "in", "sequence", ":", "yield", "n", ",", "elem", "n", "+=", "1", "eval", "(", "expression", ",", "/", ",", "globals", "=", "None", ",", "locals", "=", "None", ")", "\u00b6", "The arguments are a string and optional globals and locals.  If provided,", "globals", "must be a dictionary.  If provided,", "locals", "can be any mapping\nobject.", "The", "expression", "argument is parsed and evaluated as a Python expression\n(technically speaking, a condition list) using the", "globals", "and", "locals", "dictionaries as global and local namespace.  If the", "globals", "dictionary is\npresent and does not contain a value for the key", "__builtins__", ", a\nreference to the dictionary of the built-in module", "builtins", "is\ninserted under that key before", "expression", "is parsed.  That way you can\ncontrol what builtins are available to the executed code by inserting your\nown", "__builtins__", "dictionary into", "globals", "before passing it to", "eval()", ".  If the", "locals", "dictionary is omitted it defaults to the", "globals", "dictionary.  If both dictionaries are omitted, the expression is\nexecuted with the", "globals", "and", "locals", "in the environment where", "eval()", "is called.  Note,", "eval()", "does not have access to the", "nested scopes", "(non-locals) in the enclosing\nenvironment.", "The return value is the result of\nthe evaluated expression. Syntax errors are reported as exceptions.  Example:", ">>>", "x", "=", "1", ">>>", "eval", "(", "'x+1'", ")", "2", "This function can also be used to execute arbitrary code objects (such as\nthose created by", "compile()", ").  In this case, pass a code object instead\nof a string.  If the code object has been compiled with", "'exec'", "as the", "mode", "argument,", "eval()", "'s return value will be", "None", ".", "Hints: dynamic execution of statements is supported by the", "exec()", "function.  The", "globals()", "and", "locals()", "functions\nreturn the current global and local dictionary, respectively, which may be\nuseful to pass around for use by", "eval()", "or", "exec()", ".", "If the given source is a string, then leading and trailing spaces and tabs\nare stripped.", "See", "ast.literal_eval()", "for a function that can safely evaluate strings\nwith expressions containing only literals.", "Raises an", "auditing event", "exec", "with the code object\nas the argument. Code compilation events may also be raised.", "exec", "(", "object", ",", "globals", "=", "None", ",", "locals", "=", "None", ",", "/", ",", "*", ",", "closure", "=", "None", ")", "\u00b6", "This function supports dynamic execution of Python code.", "object", "must be\neither a string or a code object.  If it is a string, the string is parsed as\na suite of Python statements which is then executed (unless a syntax error\noccurs).", "1", "If it is a code object, it is simply executed.  In all cases,\nthe code that\u2019s executed is expected to be valid as file input (see the\nsection", "File input", "in the Reference Manual). Be aware that the", "nonlocal", ",", "yield", ",  and", "return", "statements may not be used outside of\nfunction definitions even within the context of code passed to the", "exec()", "function. The return value is", "None", ".", "In all cases, if the optional parts are omitted, the code is executed in the\ncurrent scope.  If only", "globals", "is provided, it must be a dictionary\n(and not a subclass of dictionary), which\nwill be used for both the global and the local variables.  If", "globals", "and", "locals", "are given, they are used for the global and local variables,\nrespectively.  If provided,", "locals", "can be any mapping object.  Remember\nthat at the module level, globals and locals are the same dictionary. If exec\ngets two separate objects as", "globals", "and", "locals", ", the code will be\nexecuted as if it were embedded in a class definition.", "If the", "globals", "dictionary does not contain a value for the key", "__builtins__", ", a reference to the dictionary of the built-in module", "builtins", "is inserted under that key.  That way you can control what\nbuiltins are available to the executed code by inserting your own", "__builtins__", "dictionary into", "globals", "before passing it to", "exec()", ".", "The", "closure", "argument specifies a closure\u2013a tuple of cellvars.\nIt\u2019s only valid when the", "object", "is a code object containing free variables.\nThe length of the tuple must exactly match the number of free variables\nreferenced by the code object.", "Raises an", "auditing event", "exec", "with the code object\nas the argument. Code compilation events may also be raised.", "Note", "The built-in functions", "globals()", "and", "locals()", "return the current\nglobal and local dictionary, respectively, which may be useful to pass around\nfor use as the second and third argument to", "exec()", ".", "Note", "The default", "locals", "act as described for function", "locals()", "below:\nmodifications to the default", "locals", "dictionary should not be attempted.\nPass an explicit", "locals", "dictionary if you need to see effects of the\ncode on", "locals", "after function", "exec()", "returns.", "Changed in version 3.11:", "Added the", "closure", "parameter.", "filter", "(", "function", ",", "iterable", ")", "\u00b6", "Construct an iterator from those elements of", "iterable", "for which", "function", "returns true.", "iterable", "may be either a sequence, a container which\nsupports iteration, or an iterator.  If", "function", "is", "None", ", the identity\nfunction is assumed, that is, all elements of", "iterable", "that are false are\nremoved.", "Note that", "filter(function,", "iterable)", "is equivalent to the generator\nexpression", "(item", "for", "item", "in", "iterable", "if", "function(item))", "if function is\nnot", "None", "and", "(item", "for", "item", "in", "iterable", "if", "item)", "if function is", "None", ".", "See", "itertools.filterfalse()", "for the complementary function that returns\nelements of", "iterable", "for which", "function", "returns false.", "class", "float", "(", "x", "=", "0.0", ")", "\u00b6", "Return a floating point number constructed from a number or string", "x", ".", "If the argument is a string, it should contain a decimal number, optionally\npreceded by a sign, and optionally embedded in whitespace.  The optional\nsign may be", "'+'", "or", "'-'", "; a", "'+'", "sign has no effect on the value\nproduced.  The argument may also be a string representing a NaN\n(not-a-number), or positive or negative infinity.  More precisely, the\ninput must conform to the following grammar after leading and trailing\nwhitespace characters are removed:", "sign", "::=  \"+\" | \"-\"", "infinity", "::=  \"Infinity\" | \"inf\"", "nan", "::=  \"nan\"", "numeric_value", "::=", "floatnumber", "|", "infinity", "|", "nan", "numeric_string", "::=  [", "sign", "]", "numeric_value", "Here", "floatnumber", "is the form of a Python floating-point literal,\ndescribed in", "Floating point literals", ".  Case is not significant, so, for example,\n\u201cinf\u201d, \u201cInf\u201d, \u201cINFINITY\u201d, and \u201ciNfINity\u201d are all acceptable spellings for\npositive infinity.", "Otherwise, if the argument is an integer or a floating point number, a\nfloating point number with the same value (within Python\u2019s floating point\nprecision) is returned.  If the argument is outside the range of a Python\nfloat, an", "OverflowError", "will be raised.", "For a general Python object", "x", ",", "float(x)", "delegates to", "x.__float__()", ".  If", "__float__()", "is not defined then it falls back\nto", "__index__()", ".", "If no argument is given,", "0.0", "is returned.", "Examples:", ">>>", "float", "(", "'+1.23'", ")", "1.23", ">>>", "float", "(", "'   -12345", "\\n", "'", ")", "-12345.0", ">>>", "float", "(", "'1e-003'", ")", "0.001", ">>>", "float", "(", "'+1E6'", ")", "1000000.0", ">>>", "float", "(", "'-Infinity'", ")", "-inf", "The float type is described in", "Numeric Types \u2014 int, float, complex", ".", "Changed in version 3.6:", "Grouping digits with underscores as in code literals is allowed.", "Changed in version 3.7:", "x", "is now a positional-only parameter.", "Changed in version 3.8:", "Falls back to", "__index__()", "if", "__float__()", "is not defined.", "format", "(", "value", ",", "format_spec", "=", "''", ")", "\u00b6", "Convert a", "value", "to a \u201cformatted\u201d representation, as controlled by", "format_spec", ".  The interpretation of", "format_spec", "will depend on the type\nof the", "value", "argument; however, there is a standard formatting syntax that\nis used by most built-in types:", "Format Specification Mini-Language", ".", "The default", "format_spec", "is an empty string which usually gives the same\neffect as calling", "str(value)", ".", "A call to", "format(value,", "format_spec)", "is translated to", "type(value).__format__(value,", "format_spec)", "which bypasses the instance\ndictionary when searching for the value\u2019s", "__format__()", "method.  A", "TypeError", "exception is raised if the method search reaches", "object", "and the", "format_spec", "is non-empty, or if either the", "format_spec", "or the return value are not strings.", "Changed in version 3.4:", "object().__format__(format_spec)", "raises", "TypeError", "if", "format_spec", "is not an empty string.", "class", "frozenset", "(", "iterable", "=", "set()", ")", "Return a new", "frozenset", "object, optionally with elements taken from", "iterable", ".", "frozenset", "is a built-in class.  See", "frozenset", "and", "Set Types \u2014 set, frozenset", "for documentation about this class.", "For other containers see the built-in", "set", ",", "list", ",", "tuple", ", and", "dict", "classes, as well as the", "collections", "module.", "getattr", "(", "object", ",", "name", ")", "\u00b6", "getattr", "(", "object", ",", "name", ",", "default", ")", "Return the value of the named attribute of", "object", ".", "name", "must be a string.\nIf the string is the name of one of the object\u2019s attributes, the result is the\nvalue of that attribute.  For example,", "getattr(x,", "'foobar')", "is equivalent to", "x.foobar", ".  If the named attribute does not exist,", "default", "is returned if\nprovided, otherwise", "AttributeError", "is raised.", "name", "need not be a Python identifier (see", "setattr()", ").", "Note", "Since", "private name mangling", "happens at\ncompilation time, one must manually mangle a private attribute\u2019s\n(attributes with two leading underscores) name in order to retrieve it with", "getattr()", ".", "globals", "(", ")", "\u00b6", "Return the dictionary implementing the current module namespace. For code within\nfunctions, this is set when the function is defined and remains the same\nregardless of where the function is called.", "hasattr", "(", "object", ",", "name", ")", "\u00b6", "The arguments are an object and a string.  The result is", "True", "if the\nstring is the name of one of the object\u2019s attributes,", "False", "if not. (This\nis implemented by calling", "getattr(object,", "name)", "and seeing whether it\nraises an", "AttributeError", "or not.)", "hash", "(", "object", ")", "\u00b6", "Return the hash value of the object (if it has one).  Hash values are\nintegers.  They are used to quickly compare dictionary keys during a\ndictionary lookup.  Numeric values that compare equal have the same hash\nvalue (even if they are of different types, as is the case for 1 and 1.0).", "Note", "For objects with custom", "__hash__()", "methods, note that", "hash()", "truncates the return value based on the bit width of the host machine.\nSee", "__hash__()", "for details.", "help", "(", ")", "\u00b6", "help", "(", "request", ")", "Invoke the built-in help system.  (This function is intended for interactive\nuse.)  If no argument is given, the interactive help system starts on the\ninterpreter console.  If the argument is a string, then the string is looked up\nas the name of a module, function, class, method, keyword, or documentation\ntopic, and a help page is printed on the console.  If the argument is any other\nkind of object, a help page on the object is generated.", "Note that if a slash(/) appears in the parameter list of a function when\ninvoking", "help()", ", it means that the parameters prior to the slash are\npositional-only. For more info, see", "the FAQ entry on positional-only parameters", ".", "This function is added to the built-in namespace by the", "site", "module.", "Changed in version 3.4:", "Changes to", "pydoc", "and", "inspect", "mean that the reported\nsignatures for callables are now more comprehensive and consistent.", "hex", "(", "x", ")", "\u00b6", "Convert an integer number to a lowercase hexadecimal string prefixed with\n\u201c0x\u201d. If", "x", "is not a Python", "int", "object, it has to define an", "__index__()", "method that returns an integer. Some examples:", ">>>", "hex", "(", "255", ")", "'0xff'", ">>>", "hex", "(", "-", "42", ")", "'-0x2a'", "If you want to convert an integer number to an uppercase or lower hexadecimal\nstring with prefix or not, you can use either of the following ways:", ">>>", "'", "%#x", "'", "%", "255", ",", "'", "%x", "'", "%", "255", ",", "'", "%X", "'", "%", "255", "('0xff', 'ff', 'FF')", ">>>", "format", "(", "255", ",", "'#x'", "),", "format", "(", "255", ",", "'x'", "),", "format", "(", "255", ",", "'X'", ")", "('0xff', 'ff', 'FF')", ">>>", "f", "'", "{", "255", ":", "#x", "}", "'", ",", "f", "'", "{", "255", ":", "x", "}", "'", ",", "f", "'", "{", "255", ":", "X", "}", "'", "('0xff', 'ff', 'FF')", "See also", "format()", "for more information.", "See also", "int()", "for converting a hexadecimal string to an\ninteger using a base of 16.", "Note", "To obtain a hexadecimal string representation for a float, use the", "float.hex()", "method.", "id", "(", "object", ")", "\u00b6", "Return the \u201cidentity\u201d of an object.  This is an integer which\nis guaranteed to be unique and constant for this object during its lifetime.\nTwo objects with non-overlapping lifetimes may have the same", "id()", "value.", "CPython implementation detail:", "This is the address of the object in memory.", "Raises an", "auditing event", "builtins.id", "with argument", "id", ".", "input", "(", ")", "\u00b6", "input", "(", "prompt", ")", "If the", "prompt", "argument is present, it is written to standard output without\na trailing newline.  The function then reads a line from input, converts it\nto a string (stripping a trailing newline), and returns that.  When EOF is\nread,", "EOFError", "is raised.  Example:", ">>>", "s", "=", "input", "(", "'--> '", ")", "--> Monty Python's Flying Circus", ">>>", "s", "\"Monty Python's Flying Circus\"", "If the", "readline", "module was loaded, then", "input()", "will use it\nto provide elaborate line editing and history features.", "Raises an", "auditing event", "builtins.input", "with\nargument", "prompt", "before reading input", "Raises an", "auditing event", "builtins.input/result", "with the result after successfully reading input.", "class", "int", "(", "x", "=", "0", ")", "\u00b6", "class", "int", "(", "x", ",", "base", "=", "10", ")", "Return an integer object constructed from a number or string", "x", ", or return", "0", "if no arguments are given.  If", "x", "defines", "__int__()", ",", "int(x)", "returns", "x.__int__()", ".  If", "x", "defines", "__index__()", ",\nit returns", "x.__index__()", ".  If", "x", "defines", "__trunc__()", ",\nit returns", "x.__trunc__()", ".\nFor floating point numbers, this truncates towards zero.", "If", "x", "is not a number or if", "base", "is given, then", "x", "must be a string,", "bytes", ", or", "bytearray", "instance representing an", "integer\nliteral", "in radix", "base", ".  Optionally, the literal can be\npreceded by", "+", "or", "-", "(with no space in between) and surrounded by\nwhitespace.  A base-n literal consists of the digits 0 to n-1, with", "a", "to", "z", "(or", "A", "to", "Z", ") having\nvalues 10 to 35.  The default", "base", "is 10. The allowed values are 0 and 2\u201336.\nBase-2, -8, and -16 literals can be optionally prefixed with", "0b", "/", "0B", ",", "0o", "/", "0O", ", or", "0x", "/", "0X", ", as with integer literals in code.  Base 0\nmeans to interpret exactly as a code literal, so that the actual base is 2,\n8, 10, or 16, and so that", "int('010',", "0)", "is not legal, while", "int('010')", "is, as well as", "int('010',", "8)", ".", "The integer type is described in", "Numeric Types \u2014 int, float, complex", ".", "Changed in version 3.4:", "If", "base", "is not an instance of", "int", "and the", "base", "object has a", "base.__index__", "method, that method is called\nto obtain an integer for the base.  Previous versions used", "base.__int__", "instead of", "base.__index__", ".", "Changed in version 3.6:", "Grouping digits with underscores as in code literals is allowed.", "Changed in version 3.7:", "x", "is now a positional-only parameter.", "Changed in version 3.8:", "Falls back to", "__index__()", "if", "__int__()", "is not defined.", "Changed in version 3.11:", "The delegation to", "__trunc__()", "is deprecated.", "Changed in version 3.11:", "int", "string inputs and string representations can be limited to\nhelp avoid denial of service attacks. A", "ValueError", "is raised when\nthe limit is exceeded while converting a string", "x", "to an", "int", "or\nwhen converting an", "int", "into a string would exceed the limit.\nSee the", "integer string conversion length limitation", "documentation.", "isinstance", "(", "object", ",", "classinfo", ")", "\u00b6", "Return", "True", "if the", "object", "argument is an instance of the", "classinfo", "argument, or of a (direct, indirect, or", "virtual", ") subclass thereof.  If", "object", "is not\nan object of the given type, the function always returns", "False", ".\nIf", "classinfo", "is a tuple of type objects (or recursively, other such\ntuples) or a", "Union Type", "of multiple types, return", "True", "if", "object", "is an instance of any of the types.\nIf", "classinfo", "is not a type or tuple of types and such tuples,\na", "TypeError", "exception is raised.", "TypeError", "may not be\nraised for an invalid type if an earlier check succeeds.", "Changed in version 3.10:", "classinfo", "can be a", "Union Type", ".", "issubclass", "(", "class", ",", "classinfo", ")", "\u00b6", "Return", "True", "if", "class", "is a subclass (direct, indirect, or", "virtual", ") of", "classinfo", ".  A\nclass is considered a subclass of itself.", "classinfo", "may be a tuple of class\nobjects (or recursively, other such tuples)\nor a", "Union Type", ", in which case return", "True", "if", "class", "is a\nsubclass of any entry in", "classinfo", ".  In any other case, a", "TypeError", "exception is raised.", "Changed in version 3.10:", "classinfo", "can be a", "Union Type", ".", "iter", "(", "object", ")", "\u00b6", "iter", "(", "object", ",", "sentinel", ")", "Return an", "iterator", "object.  The first argument is interpreted very\ndifferently depending on the presence of the second argument. Without a\nsecond argument,", "object", "must be a collection object which supports the", "iterable", "protocol (the", "__iter__()", "method), or it must support\nthe sequence protocol (the", "__getitem__()", "method with integer arguments\nstarting at", "0", ").  If it does not support either of those protocols,", "TypeError", "is raised. If the second argument,", "sentinel", ", is given,\nthen", "object", "must be a callable object.  The iterator created in this case\nwill call", "object", "with no arguments for each call to its", "__next__()", "method; if the value returned is equal to", "sentinel", ",", "StopIteration", "will be raised, otherwise the value will\nbe returned.", "See also", "Iterator Types", ".", "One useful application of the second form of", "iter()", "is to build a\nblock-reader. For example, reading fixed-width blocks from a binary\ndatabase file until the end of file is reached:", "from", "functools", "import", "partial", "with", "open", "(", "'mydata.db'", ",", "'rb'", ")", "as", "f", ":", "for", "block", "in", "iter", "(", "partial", "(", "f", ".", "read", ",", "64", "),", "b", "''", "):", "process_block", "(", "block", ")", "len", "(", "s", ")", "\u00b6", "Return the length (the number of items) of an object.  The argument may be a\nsequence (such as a string, bytes, tuple, list, or range) or a collection\n(such as a dictionary, set, or frozen set).", "CPython implementation detail:", "len", "raises", "OverflowError", "on lengths larger than", "sys.maxsize", ", such as", "range(2", "**", "100)", ".", "class", "list", "class", "list", "(", "iterable", ")", "Rather than being a function,", "list", "is actually a mutable\nsequence type, as documented in", "Lists", "and", "Sequence Types \u2014 list, tuple, range", ".", "locals", "(", ")", "\u00b6", "Update and return a dictionary representing the current local symbol table.\nFree variables are returned by", "locals()", "when it is called in function\nblocks, but not in class blocks. Note that at the module level,", "locals()", "and", "globals()", "are the same dictionary.", "Note", "The contents of this dictionary should not be modified; changes may not\naffect the values of local and free variables used by the interpreter.", "map", "(", "function", ",", "iterable", ",", "*", "iterables", ")", "\u00b6", "Return an iterator that applies", "function", "to every item of", "iterable", ",\nyielding the results.  If additional", "iterables", "arguments are passed,", "function", "must take that many arguments and is applied to the items from all\niterables in parallel.  With multiple iterables, the iterator stops when the\nshortest iterable is exhausted.  For cases where the function inputs are\nalready arranged into argument tuples, see", "itertools.starmap()", ".", "max", "(", "iterable", ",", "*", ",", "key", "=", "None", ")", "\u00b6", "max", "(", "iterable", ",", "*", ",", "default", ",", "key", "=", "None", ")", "max", "(", "arg1", ",", "arg2", ",", "*", "args", ",", "key", "=", "None", ")", "Return the largest item in an iterable or the largest of two or more\narguments.", "If one positional argument is provided, it should be an", "iterable", ".\nThe largest item in the iterable is returned.  If two or more positional\narguments are provided, the largest of the positional arguments is\nreturned.", "There are two optional keyword-only arguments. The", "key", "argument specifies\na one-argument ordering function like that used for", "list.sort()", ". The", "default", "argument specifies an object to return if the provided iterable is\nempty. If the iterable is empty and", "default", "is not provided, a", "ValueError", "is raised.", "If multiple items are maximal, the function returns the first one\nencountered.  This is consistent with other sort-stability preserving tools\nsuch as", "sorted(iterable,", "key=keyfunc,", "reverse=True)[0]", "and", "heapq.nlargest(1,", "iterable,", "key=keyfunc)", ".", "New in version 3.4:", "The", "default", "keyword-only argument.", "Changed in version 3.8:", "The", "key", "can be", "None", ".", "class", "memoryview", "(", "object", ")", "Return a \u201cmemory view\u201d object created from the given argument.  See", "Memory Views", "for more information.", "min", "(", "iterable", ",", "*", ",", "key", "=", "None", ")", "\u00b6", "min", "(", "iterable", ",", "*", ",", "default", ",", "key", "=", "None", ")", "min", "(", "arg1", ",", "arg2", ",", "*", "args", ",", "key", "=", "None", ")", "Return the smallest item in an iterable or the smallest of two or more\narguments.", "If one positional argument is provided, it should be an", "iterable", ".\nThe smallest item in the iterable is returned.  If two or more positional\narguments are provided, the smallest of the positional arguments is\nreturned.", "There are two optional keyword-only arguments. The", "key", "argument specifies\na one-argument ordering function like that used for", "list.sort()", ". The", "default", "argument specifies an object to return if the provided iterable is\nempty. If the iterable is empty and", "default", "is not provided, a", "ValueError", "is raised.", "If multiple items are minimal, the function returns the first one\nencountered.  This is consistent with other sort-stability preserving tools\nsuch as", "sorted(iterable,", "key=keyfunc)[0]", "and", "heapq.nsmallest(1,", "iterable,", "key=keyfunc)", ".", "New in version 3.4:", "The", "default", "keyword-only argument.", "Changed in version 3.8:", "The", "key", "can be", "None", ".", "next", "(", "iterator", ")", "\u00b6", "next", "(", "iterator", ",", "default", ")", "Retrieve the next item from the", "iterator", "by calling its", "__next__()", "method.  If", "default", "is given, it is returned\nif the iterator is exhausted, otherwise", "StopIteration", "is raised.", "class", "object", "\u00b6", "Return a new featureless object.", "object", "is a base for all classes.\nIt has methods that are common to all instances of Python classes.  This\nfunction does not accept any arguments.", "Note", "object", "does", "not", "have a", "__dict__", ", so you can\u2019t\nassign arbitrary attributes to an instance of the", "object", "class.", "oct", "(", "x", ")", "\u00b6", "Convert an integer number to an octal string prefixed with \u201c0o\u201d.  The result\nis a valid Python expression. If", "x", "is not a Python", "int", "object, it\nhas to define an", "__index__()", "method that returns an integer. For\nexample:", ">>>", "oct", "(", "8", ")", "'0o10'", ">>>", "oct", "(", "-", "56", ")", "'-0o70'", "If you want to convert an integer number to an octal string either with the prefix\n\u201c0o\u201d or not, you can use either of the following ways.", ">>>", "'", "%#o", "'", "%", "10", ",", "'", "%o", "'", "%", "10", "('0o12', '12')", ">>>", "format", "(", "10", ",", "'#o'", "),", "format", "(", "10", ",", "'o'", ")", "('0o12', '12')", ">>>", "f", "'", "{", "10", ":", "#o", "}", "'", ",", "f", "'", "{", "10", ":", "o", "}", "'", "('0o12', '12')", "See also", "format()", "for more information.", "open", "(", "file", ",", "mode", "=", "'r'", ",", "buffering", "=", "-", "1", ",", "encoding", "=", "None", ",", "errors", "=", "None", ",", "newline", "=", "None", ",", "closefd", "=", "True", ",", "opener", "=", "None", ")", "\u00b6", "Open", "file", "and return a corresponding", "file object", ".  If the file\ncannot be opened, an", "OSError", "is raised. See", "Reading and Writing Files", "for more examples of how to use this function.", "file", "is a", "path-like object", "giving the pathname (absolute or\nrelative to the current working directory) of the file to be opened or an\ninteger file descriptor of the file to be wrapped.  (If a file descriptor is\ngiven, it is closed when the returned I/O object is closed unless", "closefd", "is set to", "False", ".)", "mode", "is an optional string that specifies the mode in which the file is\nopened.  It defaults to", "'r'", "which means open for reading in text mode.\nOther common values are", "'w'", "for writing (truncating the file if it\nalready exists),", "'x'", "for exclusive creation, and", "'a'", "for appending\n(which on", "some", "Unix systems, means that", "all", "writes append to the end of\nthe file regardless of the current seek position).  In text mode, if", "encoding", "is not specified the encoding used is platform-dependent:", "locale.getencoding()", "is called to get the current locale encoding.\n(For reading and writing raw bytes use binary mode and leave", "encoding", "unspecified.)  The available modes are:", "Character", "Meaning", "'r'", "open for reading (default)", "'w'", "open for writing, truncating the file first", "'x'", "open for exclusive creation, failing if the file already exists", "'a'", "open for writing, appending to the end of file if it exists", "'b'", "binary mode", "'t'", "text mode (default)", "'+'", "open for updating (reading and writing)", "The default mode is", "'r'", "(open for reading text, a synonym of", "'rt'", ").\nModes", "'w+'", "and", "'w+b'", "open and truncate the file.  Modes", "'r+'", "and", "'r+b'", "open the file with no truncation.", "As mentioned in the", "Overview", ", Python distinguishes between binary\nand text I/O.  Files opened in binary mode (including", "'b'", "in the", "mode", "argument) return contents as", "bytes", "objects without any decoding.  In\ntext mode (the default, or when", "'t'", "is included in the", "mode", "argument),\nthe contents of the file are returned as", "str", ", the bytes having been\nfirst decoded using a platform-dependent encoding or using the specified", "encoding", "if given.", "Note", "Python doesn\u2019t depend on the underlying operating system\u2019s notion of text\nfiles; all the processing is done by Python itself, and is therefore\nplatform-independent.", "buffering", "is an optional integer used to set the buffering policy.  Pass 0\nto switch buffering off (only allowed in binary mode), 1 to select line\nbuffering (only usable in text mode), and an integer > 1 to indicate the size\nin bytes of a fixed-size chunk buffer. Note that specifying a buffer size this\nway applies for binary buffered I/O, but", "TextIOWrapper", "(i.e., files opened\nwith", "mode='r+'", ") would have another buffering. To disable buffering in", "TextIOWrapper", ", consider using the", "write_through", "flag for", "io.TextIOWrapper.reconfigure()", ". When no", "buffering", "argument is\ngiven, the default buffering policy works as follows:", "Binary files are buffered in fixed-size chunks; the size of the buffer is\nchosen using a heuristic trying to determine the underlying device\u2019s \u201cblock\nsize\u201d and falling back on", "io.DEFAULT_BUFFER_SIZE", ".  On many systems,\nthe buffer will typically be 4096 or 8192 bytes long.", "\u201cInteractive\u201d text files (files for which", "isatty()", "returns", "True", ") use line buffering.  Other text files use the policy\ndescribed above for binary files.", "encoding", "is the name of the encoding used to decode or encode the file.\nThis should only be used in text mode.  The default encoding is platform\ndependent (whatever", "locale.getencoding()", "returns), but any", "text encoding", "supported by Python can be used.\nSee the", "codecs", "module for the list of supported encodings.", "errors", "is an optional string that specifies how encoding and decoding\nerrors are to be handled\u2014this cannot be used in binary mode.\nA variety of standard error handlers are available\n(listed under", "Error Handlers", "), though any\nerror handling name that has been registered with", "codecs.register_error()", "is also valid.  The standard names\ninclude:", "'strict'", "to raise a", "ValueError", "exception if there is\nan encoding error.  The default value of", "None", "has the same\neffect.", "'ignore'", "ignores errors.  Note that ignoring encoding errors\ncan lead to data loss.", "'replace'", "causes a replacement marker (such as", "'?'", ") to be inserted\nwhere there is malformed data.", "'surrogateescape'", "will represent any incorrect bytes as low\nsurrogate code units ranging from U+DC80 to U+DCFF.\nThese surrogate code units will then be turned back into\nthe same bytes when the", "surrogateescape", "error handler is used\nwhen writing data.  This is useful for processing files in an\nunknown encoding.", "'xmlcharrefreplace'", "is only supported when writing to a file.\nCharacters not supported by the encoding are replaced with the\nappropriate XML character reference", "&#nnn;", ".", "'backslashreplace'", "replaces malformed data by Python\u2019s backslashed\nescape sequences.", "'namereplace'", "(also only supported when writing)\nreplaces unsupported characters with", "\\N{...}", "escape sequences.", "newline", "determines how to parse newline characters from the stream.\nIt can be", "None", ",", "''", ",", "'\\n'", ",", "'\\r'", ", and", "'\\r\\n'", ".  It works as follows:", "When reading input from the stream, if", "newline", "is", "None", ", universal\nnewlines mode is enabled.  Lines in the input can end in", "'\\n'", ",", "'\\r'", ", or", "'\\r\\n'", ", and these are translated into", "'\\n'", "before\nbeing returned to the caller.  If it is", "''", ", universal newlines mode is\nenabled, but line endings are returned to the caller untranslated.  If it\nhas any of the other legal values, input lines are only terminated by the\ngiven string, and the line ending is returned to the caller untranslated.", "When writing output to the stream, if", "newline", "is", "None", ", any", "'\\n'", "characters written are translated to the system default line separator,", "os.linesep", ".  If", "newline", "is", "''", "or", "'\\n'", ", no translation\ntakes place.  If", "newline", "is any of the other legal values, any", "'\\n'", "characters written are translated to the given string.", "If", "closefd", "is", "False", "and a file descriptor rather than a filename was\ngiven, the underlying file descriptor will be kept open when the file is\nclosed.  If a filename is given", "closefd", "must be", "True", "(the default);\notherwise, an error will be raised.", "A custom opener can be used by passing a callable as", "opener", ". The underlying\nfile descriptor for the file object is then obtained by calling", "opener", "with\n(", "file", ",", "flags", ").", "opener", "must return an open file descriptor (passing", "os.open", "as", "opener", "results in functionality similar to passing", "None", ").", "The newly created file is", "non-inheritable", ".", "The following example uses the", "dir_fd", "parameter of the", "os.open()", "function to open a file relative to a given directory:", ">>>", "import", "os", ">>>", "dir_fd", "=", "os", ".", "open", "(", "'somedir'", ",", "os", ".", "O_RDONLY", ")", ">>>", "def", "opener", "(", "path", ",", "flags", "):", "...", "return", "os", ".", "open", "(", "path", ",", "flags", ",", "dir_fd", "=", "dir_fd", ")", "...", ">>>", "with", "open", "(", "'spamspam.txt'", ",", "'w'", ",", "opener", "=", "opener", ")", "as", "f", ":", "...", "print", "(", "'This will be written to somedir/spamspam.txt'", ",", "file", "=", "f", ")", "...", ">>>", "os", ".", "close", "(", "dir_fd", ")", "# don't leak a file descriptor", "The type of", "file object", "returned by the", "open()", "function\ndepends on the mode.  When", "open()", "is used to open a file in a text\nmode (", "'w'", ",", "'r'", ",", "'wt'", ",", "'rt'", ", etc.), it returns a subclass of", "io.TextIOBase", "(specifically", "io.TextIOWrapper", ").  When used\nto open a file in a binary mode with buffering, the returned class is a\nsubclass of", "io.BufferedIOBase", ".  The exact class varies: in read\nbinary mode, it returns an", "io.BufferedReader", "; in write binary and\nappend binary modes, it returns an", "io.BufferedWriter", ", and in\nread/write mode, it returns an", "io.BufferedRandom", ".  When buffering is\ndisabled, the raw stream, a subclass of", "io.RawIOBase", ",", "io.FileIO", ", is returned.", "See also the file handling modules, such as", "fileinput", ",", "io", "(where", "open()", "is declared),", "os", ",", "os.path", ",", "tempfile", ",\nand", "shutil", ".", "Raises an", "auditing event", "open", "with arguments", "file", ",", "mode", ",", "flags", ".", "The", "mode", "and", "flags", "arguments may have been modified or inferred from\nthe original call.", "Changed in version 3.3:", "The", "opener", "parameter was added.", "The", "'x'", "mode was added.", "IOError", "used to be raised, it is now an alias of", "OSError", ".", "FileExistsError", "is now raised if the file opened in exclusive\ncreation mode (", "'x'", ") already exists.", "Changed in version 3.4:", "The file is now non-inheritable.", "Changed in version 3.5:", "If the system call is interrupted and the signal handler does not raise an\nexception, the function now retries the system call instead of raising an", "InterruptedError", "exception (see", "PEP 475", "for the rationale).", "The", "'namereplace'", "error handler was added.", "Changed in version 3.6:", "Support added to accept objects implementing", "os.PathLike", ".", "On Windows, opening a console buffer may return a subclass of", "io.RawIOBase", "other than", "io.FileIO", ".", "Changed in version 3.11:", "The", "'U'", "mode has been removed.", "ord", "(", "c", ")", "\u00b6", "Given a string representing one Unicode character, return an integer\nrepresenting the Unicode code point of that character.  For example,", "ord('a')", "returns the integer", "97", "and", "ord('\u20ac')", "(Euro sign)\nreturns", "8364", ".  This is the inverse of", "chr()", ".", "pow", "(", "base", ",", "exp", ",", "mod", "=", "None", ")", "\u00b6", "Return", "base", "to the power", "exp", "; if", "mod", "is present, return", "base", "to the\npower", "exp", ", modulo", "mod", "(computed more efficiently than", "pow(base,", "exp)", "%", "mod", "). The two-argument form", "pow(base,", "exp)", "is\nequivalent to using the power operator:", "base**exp", ".", "The arguments must have numeric types.  With mixed operand types, the\ncoercion rules for binary arithmetic operators apply.  For", "int", "operands, the result has the same type as the operands (after coercion)\nunless the second argument is negative; in that case, all arguments are\nconverted to float and a float result is delivered.  For example,", "pow(10,", "2)", "returns", "100", ", but", "pow(10,", "-2)", "returns", "0.01", ".  For a negative base of\ntype", "int", "or", "float", "and a non-integral exponent, a complex\nresult is delivered.  For example,", "pow(-9,", "0.5)", "returns a value close\nto", "3j", ".", "For", "int", "operands", "base", "and", "exp", ", if", "mod", "is present,", "mod", "must\nalso be of integer type and", "mod", "must be nonzero. If", "mod", "is present and", "exp", "is negative,", "base", "must be relatively prime to", "mod", ". In that case,", "pow(inv_base,", "-exp,", "mod)", "is returned, where", "inv_base", "is an inverse to", "base", "modulo", "mod", ".", "Here\u2019s an example of computing an inverse for", "38", "modulo", "97", ":", ">>>", "pow", "(", "38", ",", "-", "1", ",", "mod", "=", "97", ")", "23", ">>>", "23", "*", "38", "%", "97", "==", "1", "True", "Changed in version 3.8:", "For", "int", "operands, the three-argument form of", "pow", "now allows\nthe second argument to be negative, permitting computation of modular\ninverses.", "Changed in version 3.8:", "Allow keyword arguments.  Formerly, only positional arguments were\nsupported.", "print", "(", "*", "objects", ",", "sep", "=", "'", "'", ",", "end", "=", "'\\n'", ",", "file", "=", "None", ",", "flush", "=", "False", ")", "\u00b6", "Print", "objects", "to the text stream", "file", ", separated by", "sep", "and followed\nby", "end", ".", "sep", ",", "end", ",", "file", ", and", "flush", ", if present, must be given as keyword\narguments.", "All non-keyword arguments are converted to strings like", "str()", "does and\nwritten to the stream, separated by", "sep", "and followed by", "end", ".  Both", "sep", "and", "end", "must be strings; they can also be", "None", ", which means to use the\ndefault values.  If no", "objects", "are given,", "print()", "will just write", "end", ".", "The", "file", "argument must be an object with a", "write(string)", "method; if it\nis not present or", "None", ",", "sys.stdout", "will be used.  Since printed\narguments are converted to text strings,", "print()", "cannot be used with\nbinary mode file objects.  For these, use", "file.write(...)", "instead.", "Whether the output is buffered is usually determined by", "file", ", but if the", "flush", "keyword argument is true, the stream is forcibly flushed.", "Changed in version 3.3:", "Added the", "flush", "keyword argument.", "class", "property", "(", "fget", "=", "None", ",", "fset", "=", "None", ",", "fdel", "=", "None", ",", "doc", "=", "None", ")", "\u00b6", "Return a property attribute.", "fget", "is a function for getting an attribute value.", "fset", "is a function\nfor setting an attribute value.", "fdel", "is a function for deleting an attribute\nvalue.  And", "doc", "creates a docstring for the attribute.", "A typical use is to define a managed attribute", "x", ":", "class", "C", ":", "def", "__init__", "(", "self", "):", "self", ".", "_x", "=", "None", "def", "getx", "(", "self", "):", "return", "self", ".", "_x", "def", "setx", "(", "self", ",", "value", "):", "self", ".", "_x", "=", "value", "def", "delx", "(", "self", "):", "del", "self", ".", "_x", "x", "=", "property", "(", "getx", ",", "setx", ",", "delx", ",", "\"I'm the 'x' property.\"", ")", "If", "c", "is an instance of", "C", ",", "c.x", "will invoke the getter,", "c.x", "=", "value", "will invoke the setter, and", "del", "c.x", "the deleter.", "If given,", "doc", "will be the docstring of the property attribute. Otherwise, the\nproperty will copy", "fget", "\u2019s docstring (if it exists).  This makes it possible to\ncreate read-only properties easily using", "property()", "as a", "decorator", ":", "class", "Parrot", ":", "def", "__init__", "(", "self", "):", "self", ".", "_voltage", "=", "100000", "@property", "def", "voltage", "(", "self", "):", "\"\"\"Get the current voltage.\"\"\"", "return", "self", ".", "_voltage", "The", "@property", "decorator turns the", "voltage()", "method into a \u201cgetter\u201d\nfor a read-only attribute with the same name, and it sets the docstring for", "voltage", "to \u201cGet the current voltage.\u201d", "A property object has", "getter", ",", "setter", ",\nand", "deleter", "methods usable as decorators that create a\ncopy of the property with the corresponding accessor function set to the\ndecorated function.  This is best explained with an example:", "class", "C", ":", "def", "__init__", "(", "self", "):", "self", ".", "_x", "=", "None", "@property", "def", "x", "(", "self", "):", "\"\"\"I'm the 'x' property.\"\"\"", "return", "self", ".", "_x", "@x", ".", "setter", "def", "x", "(", "self", ",", "value", "):", "self", ".", "_x", "=", "value", "@x", ".", "deleter", "def", "x", "(", "self", "):", "del", "self", ".", "_x", "This code is exactly equivalent to the first example.  Be sure to give the\nadditional functions the same name as the original property (", "x", "in this\ncase.)", "The returned property object also has the attributes", "fget", ",", "fset", ", and", "fdel", "corresponding to the constructor arguments.", "Changed in version 3.5:", "The docstrings of property objects are now writeable.", "class", "range", "(", "stop", ")", "class", "range", "(", "start", ",", "stop", ",", "step", "=", "1", ")", "Rather than being a function,", "range", "is actually an immutable\nsequence type, as documented in", "Ranges", "and", "Sequence Types \u2014 list, tuple, range", ".", "repr", "(", "object", ")", "\u00b6", "Return a string containing a printable representation of an object.  For many\ntypes, this function makes an attempt to return a string that would yield an\nobject with the same value when passed to", "eval()", "; otherwise, the\nrepresentation is a string enclosed in angle brackets that contains the name\nof the type of the object together with additional information often\nincluding the name and address of the object.  A class can control what this\nfunction returns for its instances by defining a", "__repr__()", "method.\nIf", "sys.displayhook()", "is not accessible, this function will raise", "RuntimeError", ".", "reversed", "(", "seq", ")", "\u00b6", "Return a reverse", "iterator", ".", "seq", "must be an object which has\na", "__reversed__()", "method or supports the sequence protocol (the", "__len__()", "method and the", "__getitem__()", "method with integer\narguments starting at", "0", ").", "round", "(", "number", ",", "ndigits", "=", "None", ")", "\u00b6", "Return", "number", "rounded to", "ndigits", "precision after the decimal\npoint.  If", "ndigits", "is omitted or is", "None", ", it returns the\nnearest integer to its input.", "For the built-in types supporting", "round()", ", values are rounded to the\nclosest multiple of 10 to the power minus", "ndigits", "; if two multiples are\nequally close, rounding is done toward the even choice (so, for example,\nboth", "round(0.5)", "and", "round(-0.5)", "are", "0", ", and", "round(1.5)", "is", "2", ").  Any integer value is valid for", "ndigits", "(positive, zero, or\nnegative).  The return value is an integer if", "ndigits", "is omitted or", "None", ".\nOtherwise, the return value has the same type as", "number", ".", "For a general Python object", "number", ",", "round", "delegates to", "number.__round__", ".", "Note", "The behavior of", "round()", "for floats can be surprising: for example,", "round(2.675,", "2)", "gives", "2.67", "instead of the expected", "2.68", ".\nThis is not a bug: it\u2019s a result of the fact that most decimal fractions\ncan\u2019t be represented exactly as a float.  See", "Floating Point Arithmetic:  Issues and Limitations", "for\nmore information.", "class", "set", "class", "set", "(", "iterable", ")", "Return a new", "set", "object, optionally with elements taken from", "iterable", ".", "set", "is a built-in class.  See", "set", "and", "Set Types \u2014 set, frozenset", "for documentation about this class.", "For other containers see the built-in", "frozenset", ",", "list", ",", "tuple", ", and", "dict", "classes, as well as the", "collections", "module.", "setattr", "(", "object", ",", "name", ",", "value", ")", "\u00b6", "This is the counterpart of", "getattr()", ".  The arguments are an object, a\nstring, and an arbitrary value.  The string may name an existing attribute or a\nnew attribute.  The function assigns the value to the attribute, provided the\nobject allows it.  For example,", "setattr(x,", "'foobar',", "123)", "is equivalent to", "x.foobar", "=", "123", ".", "name", "need not be a Python identifier as defined in", "Identifiers and keywords", "unless the object chooses to enforce that, for example in a custom", "__getattribute__()", "or via", "__slots__", ".\nAn attribute whose name is not an identifier will not be accessible using\nthe dot notation, but is accessible through", "getattr()", "etc..", "Note", "Since", "private name mangling", "happens at\ncompilation time, one must manually mangle a private attribute\u2019s\n(attributes with two leading underscores) name in order to set it with", "setattr()", ".", "class", "slice", "(", "stop", ")", "\u00b6", "class", "slice", "(", "start", ",", "stop", ",", "step", "=", "1", ")", "Return a", "slice", "object representing the set of indices specified by", "range(start,", "stop,", "step)", ".  The", "start", "and", "step", "arguments default to", "None", ".  Slice objects have read-only data attributes", "start", ",", "stop", ", and", "step", "which merely return the argument\nvalues (or their default).  They have no other explicit functionality;\nhowever, they are used by NumPy and other third-party packages.\nSlice objects are also generated when extended indexing syntax is used.  For\nexample:", "a[start:stop:step]", "or", "a[start:stop,", "i]", ".  See", "itertools.islice()", "for an alternate version that returns an iterator.", "sorted", "(", "iterable", ",", "/", ",", "*", ",", "key", "=", "None", ",", "reverse", "=", "False", ")", "\u00b6", "Return a new sorted list from the items in", "iterable", ".", "Has two optional arguments which must be specified as keyword arguments.", "key", "specifies a function of one argument that is used to extract a comparison\nkey from each element in", "iterable", "(for example,", "key=str.lower", ").  The\ndefault value is", "None", "(compare the elements directly).", "reverse", "is a boolean value.  If set to", "True", ", then the list elements are\nsorted as if each comparison were reversed.", "Use", "functools.cmp_to_key()", "to convert an old-style", "cmp", "function to a", "key", "function.", "The built-in", "sorted()", "function is guaranteed to be stable. A sort is\nstable if it guarantees not to change the relative order of elements that\ncompare equal \u2014 this is helpful for sorting in multiple passes (for\nexample, sort by department, then by salary grade).", "The sort algorithm uses only", "<", "comparisons between items.  While\ndefining an", "__lt__()", "method will suffice for sorting,", "PEP 8", "recommends that all six", "rich comparisons", "be implemented.  This will help avoid bugs when using\nthe same data with other ordering tools such as", "max()", "that rely\non a different underlying method.  Implementing all six comparisons\nalso helps avoid confusion for mixed type comparisons which can call\nreflected the", "__gt__()", "method.", "For sorting examples and a brief sorting tutorial, see", "Sorting HOW TO", ".", "@", "staticmethod", "\u00b6", "Transform a method into a static method.", "A static method does not receive an implicit first argument. To declare a static\nmethod, use this idiom:", "class", "C", ":", "@staticmethod", "def", "f", "(", "arg1", ",", "arg2", ",", "...", "):", "...", "The", "@staticmethod", "form is a function", "decorator", "\u2013 see", "Function definitions", "for details.", "A static method can be called either on the class (such as", "C.f()", ") or on\nan instance (such as", "C().f()", "). Moreover, they can be called as regular\nfunctions (such as", "f()", ").", "Static methods in Python are similar to those found in Java or C++. Also, see", "classmethod()", "for a variant that is useful for creating alternate class\nconstructors.", "Like all decorators, it is also possible to call", "staticmethod", "as\na regular function and do something with its result.  This is needed\nin some cases where you need a reference to a function from a class\nbody and you want to avoid the automatic transformation to instance\nmethod.  For these cases, use this idiom:", "def", "regular_function", "():", "...", "class", "C", ":", "method", "=", "staticmethod", "(", "regular_function", ")", "For more information on static methods, see", "The standard type hierarchy", ".", "Changed in version 3.10:", "Static methods now inherit the method attributes (", "__module__", ",", "__name__", ",", "__qualname__", ",", "__doc__", "and", "__annotations__", "),\nhave a new", "__wrapped__", "attribute, and are now callable as regular\nfunctions.", "class", "str", "(", "object", "=", "''", ")", "class", "str", "(", "object", "=", "b''", ",", "encoding", "=", "'utf-8'", ",", "errors", "=", "'strict'", ")", "Return a", "str", "version of", "object", ".  See", "str()", "for details.", "str", "is the built-in string", "class", ".  For general information\nabout strings, see", "Text Sequence Type \u2014 str", ".", "sum", "(", "iterable", ",", "/", ",", "start", "=", "0", ")", "\u00b6", "Sums", "start", "and the items of an", "iterable", "from left to right and returns the\ntotal.  The", "iterable", "\u2019s items are normally numbers, and the start value is not\nallowed to be a string.", "For some use cases, there are good alternatives to", "sum()", ".\nThe preferred, fast way to concatenate a sequence of strings is by calling", "''.join(sequence)", ".  To add floating point values with extended precision,\nsee", "math.fsum()", ".  To concatenate a series of iterables, consider using", "itertools.chain()", ".", "Changed in version 3.8:", "The", "start", "parameter can be specified as a keyword argument.", "class", "super", "\u00b6", "class", "super", "(", "type", ",", "object_or_type", "=", "None", ")", "Return a proxy object that delegates method calls to a parent or sibling\nclass of", "type", ".  This is useful for accessing inherited methods that have\nbeen overridden in a class.", "The", "object_or_type", "determines the", "method resolution order", "to be searched.  The search starts from the class right after the", "type", ".", "For example, if", "__mro__", "of", "object_or_type", "is", "D", "->", "B", "->", "C", "->", "A", "->", "object", "and the value of", "type", "is", "B", ",\nthen", "super()", "searches", "C", "->", "A", "->", "object", ".", "The", "__mro__", "attribute of the", "object_or_type", "lists the method\nresolution search order used by both", "getattr()", "and", "super()", ".  The\nattribute is dynamic and can change whenever the inheritance hierarchy is\nupdated.", "If the second argument is omitted, the super object returned is unbound.  If\nthe second argument is an object,", "isinstance(obj,", "type)", "must be true.  If\nthe second argument is a type,", "issubclass(type2,", "type)", "must be true (this\nis useful for classmethods).", "There are two typical use cases for", "super", ".  In a class hierarchy with\nsingle inheritance,", "super", "can be used to refer to parent classes without\nnaming them explicitly, thus making the code more maintainable.  This use\nclosely parallels the use of", "super", "in other programming languages.", "The second use case is to support cooperative multiple inheritance in a\ndynamic execution environment.  This use case is unique to Python and is\nnot found in statically compiled languages or languages that only support\nsingle inheritance.  This makes it possible to implement \u201cdiamond diagrams\u201d\nwhere multiple base classes implement the same method.  Good design dictates\nthat such implementations have the same calling signature in every case (because the\norder of calls is determined at runtime, because that order adapts\nto changes in the class hierarchy, and because that order can include\nsibling classes that are unknown prior to runtime).", "For both use cases, a typical superclass call looks like this:", "class", "C", "(", "B", "):", "def", "method", "(", "self", ",", "arg", "):", "super", "()", ".", "method", "(", "arg", ")", "# This does the same thing as:", "# super(C, self).method(arg)", "In addition to method lookups,", "super()", "also works for attribute\nlookups.  One possible use case for this is calling", "descriptors", "in a parent or sibling class.", "Note that", "super()", "is implemented as part of the binding process for\nexplicit dotted attribute lookups such as", "super().__getitem__(name)", ".\nIt does so by implementing its own", "__getattribute__()", "method for searching\nclasses in a predictable order that supports cooperative multiple inheritance.\nAccordingly,", "super()", "is undefined for implicit lookups using statements or\noperators such as", "super()[name]", ".", "Also note that, aside from the zero argument form,", "super()", "is not\nlimited to use inside methods.  The two argument form specifies the\narguments exactly and makes the appropriate references.  The zero\nargument form only works inside a class definition, as the compiler fills\nin the necessary details to correctly retrieve the class being defined,\nas well as accessing the current instance for ordinary methods.", "For practical suggestions on how to design cooperative classes using", "super()", ", see", "guide to using super()", ".", "class", "tuple", "class", "tuple", "(", "iterable", ")", "Rather than being a function,", "tuple", "is actually an immutable\nsequence type, as documented in", "Tuples", "and", "Sequence Types \u2014 list, tuple, range", ".", "class", "type", "(", "object", ")", "\u00b6", "class", "type", "(", "name", ",", "bases", ",", "dict", ",", "**", "kwds", ")", "With one argument, return the type of an", "object", ".  The return value is a\ntype object and generally the same object as returned by", "object.__class__", ".", "The", "isinstance()", "built-in function is recommended for testing the type\nof an object, because it takes subclasses into account.", "With three arguments, return a new type object.  This is essentially a\ndynamic form of the", "class", "statement. The", "name", "string is\nthe class name and becomes the", "__name__", "attribute.\nThe", "bases", "tuple contains the base classes and becomes the", "__bases__", "attribute; if empty,", "object", ", the\nultimate base of all classes, is added.  The", "dict", "dictionary contains\nattribute and method definitions for the class body; it may be copied\nor wrapped before becoming the", "__dict__", "attribute.\nThe following two statements create identical", "type", "objects:", ">>>", "class", "X", ":", "...", "a", "=", "1", "...", ">>>", "X", "=", "type", "(", "'X'", ",", "(),", "dict", "(", "a", "=", "1", "))", "See also", "Type Objects", ".", "Keyword arguments provided to the three argument form are passed to the\nappropriate metaclass machinery (usually", "__init_subclass__()", ")\nin the same way that keywords in a class\ndefinition (besides", "metaclass", ") would.", "See also", "Customizing class creation", ".", "Changed in version 3.6:", "Subclasses of", "type", "which don\u2019t override", "type.__new__", "may no\nlonger use the one-argument form to get the type of an object.", "vars", "(", ")", "\u00b6", "vars", "(", "object", ")", "Return the", "__dict__", "attribute for a module, class, instance,\nor any other object with a", "__dict__", "attribute.", "Objects such as modules and instances have an updateable", "__dict__", "attribute; however, other objects may have write restrictions on their", "__dict__", "attributes (for example, classes use a", "types.MappingProxyType", "to prevent direct dictionary updates).", "Without an argument,", "vars()", "acts like", "locals()", ".  Note, the\nlocals dictionary is only useful for reads since updates to the locals\ndictionary are ignored.", "A", "TypeError", "exception is raised if an object is specified but\nit doesn\u2019t have a", "__dict__", "attribute (for example, if\nits class defines the", "__slots__", "attribute).", "zip", "(", "*", "iterables", ",", "strict", "=", "False", ")", "\u00b6", "Iterate over several iterables in parallel, producing tuples with an item\nfrom each one.", "Example:", ">>>", "for", "item", "in", "zip", "([", "1", ",", "2", ",", "3", "],", "[", "'sugar'", ",", "'spice'", ",", "'everything nice'", "]):", "...", "print", "(", "item", ")", "...", "(1, 'sugar')", "(2, 'spice')", "(3, 'everything nice')", "More formally:", "zip()", "returns an iterator of tuples, where the", "i", "-th\ntuple contains the", "i", "-th element from each of the argument iterables.", "Another way to think of", "zip()", "is that it turns rows into columns, and\ncolumns into rows.  This is similar to", "transposing a matrix", ".", "zip()", "is lazy: The elements won\u2019t be processed until the iterable is\niterated on, e.g. by a", "for", "loop or by wrapping in a", "list", ".", "One thing to consider is that the iterables passed to", "zip()", "could have\ndifferent lengths; sometimes by design, and sometimes because of a bug in\nthe code that prepared these iterables.  Python offers three different\napproaches to dealing with this issue:", "By default,", "zip()", "stops when the shortest iterable is exhausted.\nIt will ignore the remaining items in the longer iterables, cutting off\nthe result to the length of the shortest iterable:", ">>>", "list", "(", "zip", "(", "range", "(", "3", "),", "[", "'fee'", ",", "'fi'", ",", "'fo'", ",", "'fum'", "]))", "[(0, 'fee'), (1, 'fi'), (2, 'fo')]", "zip()", "is often used in cases where the iterables are assumed to be\nof equal length.  In such cases, it\u2019s recommended to use the", "strict=True", "option. Its output is the same as regular", "zip()", ":", ">>>", "list", "(", "zip", "((", "'a'", ",", "'b'", ",", "'c'", "),", "(", "1", ",", "2", ",", "3", "),", "strict", "=", "True", "))", "[('a', 1), ('b', 2), ('c', 3)]", "Unlike the default behavior, it checks that the lengths of iterables are\nidentical, raising a", "ValueError", "if they aren\u2019t:", ">>>", "list", "(", "zip", "(", "range", "(", "3", "),", "[", "'fee'", ",", "'fi'", ",", "'fo'", ",", "'fum'", "],", "strict", "=", "True", "))", "Traceback (most recent call last):", "...", "ValueError", ":", "zip() argument 2 is longer than argument 1", "Without the", "strict=True", "argument, any bug that results in iterables of\ndifferent lengths will be silenced, possibly manifesting as a hard-to-find\nbug in another part of the program.", "Shorter iterables can be padded with a constant value to make all the\niterables have the same length.  This is done by", "itertools.zip_longest()", ".", "Edge cases: With a single iterable argument,", "zip()", "returns an\niterator of 1-tuples.  With no arguments, it returns an empty iterator.", "Tips and tricks:", "The left-to-right evaluation order of the iterables is guaranteed. This\nmakes possible an idiom for clustering a data series into n-length groups\nusing", "zip(*[iter(s)]*n,", "strict=True)", ".  This repeats the", "same", "iterator", "n", "times so that each output tuple has the result of", "n", "calls to the\niterator. This has the effect of dividing the input into n-length chunks.", "zip()", "in conjunction with the", "*", "operator can be used to unzip a\nlist:", ">>>", "x", "=", "[", "1", ",", "2", ",", "3", "]", ">>>", "y", "=", "[", "4", ",", "5", ",", "6", "]", ">>>", "list", "(", "zip", "(", "x", ",", "y", "))", "[(1, 4), (2, 5), (3, 6)]", ">>>", "x2", ",", "y2", "=", "zip", "(", "*", "zip", "(", "x", ",", "y", "))", ">>>", "x", "==", "list", "(", "x2", ")", "and", "y", "==", "list", "(", "y2", ")", "True", "Changed in version 3.10:", "Added the", "strict", "argument.", "__import__", "(", "name", ",", "globals", "=", "None", ",", "locals", "=", "None", ",", "fromlist", "=", "()", ",", "level", "=", "0", ")", "\u00b6", "Note", "This is an advanced function that is not needed in everyday Python\nprogramming, unlike", "importlib.import_module()", ".", "This function is invoked by the", "import", "statement.  It can be\nreplaced (by importing the", "builtins", "module and assigning to", "builtins.__import__", ") in order to change semantics of the", "import", "statement, but doing so is", "strongly", "discouraged as it\nis usually simpler to use import hooks (see", "PEP 302", ") to attain the same\ngoals and does not cause issues with code which assumes the default import\nimplementation is in use.  Direct use of", "__import__()", "is also\ndiscouraged in favor of", "importlib.import_module()", ".", "The function imports the module", "name", ", potentially using the given", "globals", "and", "locals", "to determine how to interpret the name in a package context.\nThe", "fromlist", "gives the names of objects or submodules that should be\nimported from the module given by", "name", ".  The standard implementation does\nnot use its", "locals", "argument at all and uses its", "globals", "only to\ndetermine the package context of the", "import", "statement.", "level", "specifies whether to use absolute or relative imports.", "0", "(the\ndefault) means only perform absolute imports.  Positive values for", "level", "indicate the number of parent directories to search relative to the\ndirectory of the module calling", "__import__()", "(see", "PEP 328", "for the\ndetails).", "When the", "name", "variable is of the form", "package.module", ", normally, the\ntop-level package (the name up till the first dot) is returned,", "not", "the\nmodule named by", "name", ".  However, when a non-empty", "fromlist", "argument is\ngiven, the module named by", "name", "is returned.", "For example, the statement", "import", "spam", "results in bytecode resembling the\nfollowing code:", "spam", "=", "__import__", "(", "'spam'", ",", "globals", "(),", "locals", "(),", "[],", "0", ")", "The statement", "import", "spam.ham", "results in this call:", "spam", "=", "__import__", "(", "'spam.ham'", ",", "globals", "(),", "locals", "(),", "[],", "0", ")", "Note how", "__import__()", "returns the toplevel module here because this is\nthe object that is bound to a name by the", "import", "statement.", "On the other hand, the statement", "from", "spam.ham", "import", "eggs,", "sausage", "as", "saus", "results in", "_temp", "=", "__import__", "(", "'spam.ham'", ",", "globals", "(),", "locals", "(),", "[", "'eggs'", ",", "'sausage'", "],", "0", ")", "eggs", "=", "_temp", ".", "eggs", "saus", "=", "_temp", ".", "sausage", "Here, the", "spam.ham", "module is returned from", "__import__()", ".  From this\nobject, the names to import are retrieved and assigned to their respective\nnames.", "If you simply want to import a module (potentially within a package) by name,\nuse", "importlib.import_module()", ".", "Changed in version 3.3:", "Negative values for", "level", "are no longer supported (which also changes\nthe default value to 0).", "Changed in version 3.9:", "When the command line options", "-E", "or", "-I", "are being used,\nthe environment variable", "PYTHONCASEOK", "is now ignored.", "Footnotes", "1", "Note that the parser only accepts the Unix-style end of line convention.\nIf you are reading the code from a file, make sure to use newline conversion\nmode to convert Windows or Mac-style newlines.", "Previous topic", "Introduction", "Next topic", "Built-in Constants", "This Page", "Report a Bug", "Show Source", "Navigation", "index", "modules", "|", "next", "|", "previous", "|", "Python", "\u00bb", "3.11.0 Documentation", "\u00bb", "The Python Standard Library", "\u00bb", "Built-in Functions", "|", "\u00a9", "Copyright", "2001-2022, Python Software Foundation.", "This page is licensed under the Python Software Foundation License Version 2.", "Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.", "See", "History and License", "for more information.", "The Python Software Foundation is a non-profit corporation.", "Please donate.", "Last updated on Nov 24, 2022.", "Found a bug", "?", "Created using", "Sphinx", "4.5.0."]}